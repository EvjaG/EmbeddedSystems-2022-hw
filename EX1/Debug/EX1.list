
EX1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000480  08000488  00010488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000480  08000480  00010488  2**0
                  CONTENTS
  4 .ARM          00000000  08000480  08000480  00010488  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000480  08000488  00010488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000488  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000488  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a8a  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001fb  00000000  00000000  00010f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00011140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  000111a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001759e  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000056b  00000000  00000000  00028796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c3e  00000000  00000000  00028d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ab93f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  000ab994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000468 	.word	0x08000468

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000468 	.word	0x08000468

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db12      	blt.n	8000248 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <__NVIC_DisableIRQ+0x44>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	3320      	adds	r3, #32
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800023c:	f3bf 8f4f 	dsb	sy
}
 8000240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000242:	f3bf 8f6f 	isb	sy
}
 8000246:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <EXTI15_10_IRQHandler>:
int mode = 0;



// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){// 3 modes : x%3 = 0 :off x%3=1 : blinking x%3 = 2 : on
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <EXTI15_10_IRQHandler+0x8c>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a20      	ldr	r2, [pc, #128]	; (80002e4 <EXTI15_10_IRQHandler+0x8c>)
 8000264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000268:	6153      	str	r3, [r2, #20]
	mode++;
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <EXTI15_10_IRQHandler+0x90>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <EXTI15_10_IRQHandler+0x90>)
 8000272:	6013      	str	r3, [r2, #0]
	mode%=3;
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <EXTI15_10_IRQHandler+0x90>)
 8000276:	6819      	ldr	r1, [r3, #0]
 8000278:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <EXTI15_10_IRQHandler+0x94>)
 800027a:	fb83 3201 	smull	r3, r2, r3, r1
 800027e:	17cb      	asrs	r3, r1, #31
 8000280:	1ad2      	subs	r2, r2, r3
 8000282:	4613      	mov	r3, r2
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	4413      	add	r3, r2
 8000288:	1aca      	subs	r2, r1, r3
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <EXTI15_10_IRQHandler+0x90>)
 800028c:	601a      	str	r2, [r3, #0]
	currentMode curr = mode;
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <EXTI15_10_IRQHandler+0x90>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	71fb      	strb	r3, [r7, #7]
	NVIC_DisableIRQ(TIM2_IRQn);// enable interrupt core
 8000294:	201c      	movs	r0, #28
 8000296:	f7ff ffbb 	bl	8000210 <__NVIC_DisableIRQ>
	switch(curr)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b02      	cmp	r3, #2
 800029e:	d006      	beq.n	80002ae <EXTI15_10_IRQHandler+0x56>
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	dc1a      	bgt.n	80002da <EXTI15_10_IRQHandler+0x82>
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <EXTI15_10_IRQHandler+0x68>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d00d      	beq.n	80002c8 <EXTI15_10_IRQHandler+0x70>
			break;

		case off:
			GPIOA->ODR &= 0xFFFFFFDF;
	}
}
 80002ac:	e015      	b.n	80002da <EXTI15_10_IRQHandler+0x82>
			GPIOA->ODR |= ~0xFFFFFFDF;
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b8:	f043 0320 	orr.w	r3, r3, #32
 80002bc:	6153      	str	r3, [r2, #20]
			break;
 80002be:	e00c      	b.n	80002da <EXTI15_10_IRQHandler+0x82>
			NVIC_EnableIRQ(TIM2_IRQn);// enable interrupt core
 80002c0:	201c      	movs	r0, #28
 80002c2:	f7ff ff87 	bl	80001d4 <__NVIC_EnableIRQ>
			break;
 80002c6:	e008      	b.n	80002da <EXTI15_10_IRQHandler+0x82>
			GPIOA->ODR &= 0xFFFFFFDF;
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d2:	f023 0320 	bic.w	r3, r3, #32
 80002d6:	6153      	str	r3, [r2, #20]
}
 80002d8:	e7ff      	b.n	80002da <EXTI15_10_IRQHandler+0x82>
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	2000001c 	.word	0x2000001c
 80002ec:	55555556 	.word	0x55555556

080002f0 <TIM2_IRQHandler>:


// ------------------------------------------------------Timer handler function
void TIM2_IRQHandler(){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	TIM2->SR&=0XFFFFFFFE;
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fe:	f023 0301 	bic.w	r3, r3, #1
 8000302:	6113      	str	r3, [r2, #16]
	GPIOA->ODR ^= 0x00000020; // Write 0x00000020 to the address 0x48000014
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030e:	f083 0320 	eor.w	r3, r3, #32
 8000312:	6153      	str	r3, [r2, #20]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <main>:



// ------------------------------------------------------ Main
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000A0000;
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <main+0x9c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a24      	ldr	r2, [pc, #144]	; (80003bc <main+0x9c>)
 800032a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800032e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 8000330:	4b22      	ldr	r3, [pc, #136]	; (80003bc <main+0x9c>)
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	4a21      	ldr	r2, [pc, #132]	; (80003bc <main+0x9c>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <main+0x9c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <main+0x9c>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //interrupt enable
 8000348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 8000358:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <main+0xa0>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <main+0xa0>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000362:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0xa0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <main+0xa0>)
 800036a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036e:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0xa4>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <main+0xa4>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
    NVIC_EnableIRQ(EXTI15_10_IRQn); // enable button - core interrupt
 800037c:	2028      	movs	r0, #40	; 0x28
 800037e:	f7ff ff29 	bl	80001d4 <__NVIC_EnableIRQ>
// ------------------------------------------------------
    // Configure GPIOA pin 5 as output.
    GPIOA->MODER |= 0x00000400;
 8000382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800038c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000390:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000020; // (1 << 5);
 8000392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800039c:	f023 0320 	bic.w	r3, r3, #32
 80003a0:	6053      	str	r3, [r2, #4]

    TIM2->ARR= 4000000; // same as writing TIM2->ARR =0x003D0900
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <main+0xa8>)
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1|=0x00000001;
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]


    while(1)
 80003ba:	e7fe      	b.n	80003ba <main+0x9a>
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010400 	.word	0x40010400
 80003c4:	40010000 	.word	0x40010000
 80003c8:	003d0900 	.word	0x003d0900

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ff8f 	bl	8000320 <main>

08000402 <LoopForever>:

LoopForever:
    b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000410:	08000488 	.word	0x08000488
  ldr r2, =_sbss
 8000414:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000418:	20000020 	.word	0x20000020

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	; (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	; (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	; (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	; (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000480 	.word	0x08000480
 800045c:	08000480 	.word	0x08000480
 8000460:	08000480 	.word	0x08000480
 8000464:	08000484 	.word	0x08000484

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
