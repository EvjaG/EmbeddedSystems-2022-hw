
homework2_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08001e88  08001e88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c8  080020c8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080020c8  080020c8  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c8  080020c8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080020d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200000c8  08002198  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08002198  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003078  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e0  00000000  00000000  00023170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00023950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aff  00000000  00000000  00023af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017cf  00000000  00000000  0003c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087414  00000000  00000000  0003ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c51da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f58  00000000  00000000  000c5230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000c6188  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000c6254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e70 	.word	0x08001e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	08001e70 	.word	0x08001e70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <power>:
 *
 * */
char format[100] = "-time HH:MM:SS\nWhere:\n\t0<=HH<=24\n\t0<=MM<60\n\t0<=SS<60";

// power function
int power(int a,int b){
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	int toReturn=1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	e007      	b.n	80002e0 <power+0x24>
		toReturn*=a;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	3301      	adds	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	dbf3      	blt.n	80002d0 <power+0x14>
	return toReturn;
 80002e8:	68fb      	ldr	r3, [r7, #12]
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
	...

080002f8 <validateTime>:

int validateTime(char* input){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b092      	sub	sp, #72	; 0x48
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	//parse string - check for correct format
	int len;
	int colon_count=0;
 8000300:	2300      	movs	r3, #0
 8000302:	643b      	str	r3, [r7, #64]	; 0x40
	int func_count=0;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
	int space_count=0;
 8000308:	2300      	movs	r3, #0
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
	for (len = 0; input[len] != '\0'; len++){ // were checking to see what punctual the user used in the hour he put inside
 800030c:	2300      	movs	r3, #0
 800030e:	647b      	str	r3, [r7, #68]	; 0x44
 8000310:	e025      	b.n	800035e <validateTime+0x66>
		if(input[len]==':') colon_count++;
 8000312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b3a      	cmp	r3, #58	; 0x3a
 800031c:	d102      	bne.n	8000324 <validateTime+0x2c>
 800031e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000320:	3301      	adds	r3, #1
 8000322:	643b      	str	r3, [r7, #64]	; 0x40
		if(input[len]==' ') space_count++;
 8000324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b20      	cmp	r3, #32
 800032e:	d102      	bne.n	8000336 <validateTime+0x3e>
 8000330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000332:	3301      	adds	r3, #1
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
		if(input[len]=='-'){
 8000336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b2d      	cmp	r3, #45	; 0x2d
 8000340:	d10a      	bne.n	8000358 <validateTime+0x60>
			if(len>0 || func_count)
 8000342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000344:	2b00      	cmp	r3, #0
 8000346:	dc02      	bgt.n	800034e <validateTime+0x56>
 8000348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <validateTime+0x5a>
				return 0;
 800034e:	2300      	movs	r3, #0
 8000350:	e087      	b.n	8000462 <validateTime+0x16a>
			func_count++;
 8000352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000354:	3301      	adds	r3, #1
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (len = 0; input[len] != '\0'; len++){ // were checking to see what punctual the user used in the hour he put inside
 8000358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800035a:	3301      	adds	r3, #1
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
 800035e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1d3      	bne.n	8000312 <validateTime+0x1a>
		}

	}
	if(colon_count != 2 || func_count != 1 || input[0] != '-') return -1; // we check if the input stands in the format we want if not we return a msg.
 800036a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800036c:	2b02      	cmp	r3, #2
 800036e:	d106      	bne.n	800037e <validateTime+0x86>
 8000370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000372:	2b01      	cmp	r3, #1
 8000374:	d103      	bne.n	800037e <validateTime+0x86>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b2d      	cmp	r3, #45	; 0x2d
 800037c:	d002      	beq.n	8000384 <validateTime+0x8c>
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	e06e      	b.n	8000462 <validateTime+0x16a>
	//if func call not in system
	if(strstr(input,"-time")==NULL)
 8000384:	4939      	ldr	r1, [pc, #228]	; (800046c <validateTime+0x174>)
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 fbdc 	bl	8000b44 <strstr>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d102      	bne.n	8000398 <validateTime+0xa0>
		return -1;
 8000392:	f04f 33ff 	mov.w	r3, #4294967295
 8000396:	e064      	b.n	8000462 <validateTime+0x16a>

	//check string inputs
	char *token = strtok(input, " "); // doin manipulation over the string we recieved. (swaping all the panctual to " ")
 8000398:	4935      	ldr	r1, [pc, #212]	; (8000470 <validateTime+0x178>)
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 fbea 	bl	8000b74 <strtok>
 80003a0:	6378      	str	r0, [r7, #52]	; 0x34
	token = strtok(NULL, ":");
 80003a2:	4934      	ldr	r1, [pc, #208]	; (8000474 <validateTime+0x17c>)
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fbe5 	bl	8000b74 <strtok>
 80003aa:	6378      	str	r0, [r7, #52]	; 0x34

	int j=0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	633b      	str	r3, [r7, #48]	; 0x30
	int modArr[3]={24,60,60}; // we put each digit in the right place in our array and perfrmoing MOD action to make sure the hour is in bounds
 80003b0:	4a31      	ldr	r2, [pc, #196]	; (8000478 <validateTime+0x180>)
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80003b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int timeArr[3]={0,0,0};
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

	while (token != NULL)
 80003c8:	e047      	b.n	800045a <validateTime+0x162>
	{
        int sum=0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 80003ce:	2300      	movs	r3, #0
 80003d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80003d2:	e020      	b.n	8000416 <validateTime+0x11e>
			int c = token[i];
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003d8:	4413      	add	r3, r2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
			if(c<48 || c>57) //check if char is digit
 80003de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e0:	2b2f      	cmp	r3, #47	; 0x2f
 80003e2:	dd02      	ble.n	80003ea <validateTime+0xf2>
 80003e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e6:	2b39      	cmp	r3, #57	; 0x39
 80003e8:	dd01      	ble.n	80003ee <validateTime+0xf6>
				return 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	e039      	b.n	8000462 <validateTime+0x16a>
			c-=48;
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	3b30      	subs	r3, #48	; 0x30
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
			sum+=c*power(10, 2-(i+1));
 80003f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f6:	f1c3 0301 	rsb	r3, r3, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	200a      	movs	r0, #10
 80003fe:	f7ff ff5d 	bl	80002bc <power>
 8000402:	4602      	mov	r2, r0
 8000404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000406:	fb03 f302 	mul.w	r3, r3, r2
 800040a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800040c:	4413      	add	r3, r2
 800040e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 8000410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000412:	3301      	adds	r3, #1
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
 8000416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000418:	2b01      	cmp	r3, #1
 800041a:	dddb      	ble.n	80003d4 <validateTime+0xdc>
		}
		if(sum<0 || sum>=modArr[j])
 800041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800041e:	2b00      	cmp	r3, #0
 8000420:	db09      	blt.n	8000436 <validateTime+0x13e>
 8000422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800042a:	4413      	add	r3, r2
 800042c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000432:	429a      	cmp	r2, r3
 8000434:	db01      	blt.n	800043a <validateTime+0x142>
			return 0;
 8000436:	2300      	movs	r3, #0
 8000438:	e013      	b.n	8000462 <validateTime+0x16a>
//		printf("sum:\t%d\n",sum);
		timeArr[j]=sum;
 800043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000442:	4413      	add	r3, r2
 8000444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000446:	f843 2c3c 	str.w	r2, [r3, #-60]

		token = strtok(NULL, ":");
 800044a:	490a      	ldr	r1, [pc, #40]	; (8000474 <validateTime+0x17c>)
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fb91 	bl	8000b74 <strtok>
 8000452:	6378      	str	r0, [r7, #52]	; 0x34
		j++;
 8000454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000456:	3301      	adds	r3, #1
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
	while (token != NULL)
 800045a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1b4      	bne.n	80003ca <validateTime+0xd2>
	}
	return 1;
 8000460:	2301      	movs	r3, #1
}
 8000462:	4618      	mov	r0, r3
 8000464:	3748      	adds	r7, #72	; 0x48
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	08001e88 	.word	0x08001e88
 8000470:	08001e90 	.word	0x08001e90
 8000474:	08001e94 	.word	0x08001e94
 8000478:	08001e98 	.word	0x08001e98

0800047c <returnHour>:



//this will be the button interrupt function
char* returnHour(){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	char timeFromSlave[8];
    SPI_Receive(timeFromSlave,8);
 8000482:	463b      	mov	r3, r7
 8000484:	2108      	movs	r1, #8
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f99e 	bl	80007c8 <SPI_Receive>
	return timeFromSlave;
 800048c:	2300      	movs	r3, #0
}
 800048e:	4618      	mov	r0, r3
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <inputTime>:
//this will be the function from reading the input from the user
//return 0 if fail, otherwise return 1
int inputTime(char* input){
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
//	print("in inputTime \n");
	if(validateTime(input) == 1){
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ff2a 	bl	80002f8 <validateTime>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d107      	bne.n	80004ba <inputTime+0x24>
//		print("in inputTime validation\n");
		SPI_Transmit(input+6,8);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3306      	adds	r3, #6
 80004ae:	2108      	movs	r1, #8
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f957 	bl	8000764 <SPI_Transmit>
//		print("in inputTime after trans\n");
		return 1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	e001      	b.n	80004be <inputTime+0x28>
	}
	else{
//		print("in inputTime validation failed\n");
		return -1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <EXTI15_10_IRQHandler>:


//// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <EXTI15_10_IRQHandler+0x30>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <EXTI15_10_IRQHandler+0x30>)
 80004d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d8:	6153      	str	r3, [r2, #20]
	// TODO - function to retrieve time from secondary machine
	char* toPrint = returnHour();
 80004da:	f7ff ffcf 	bl	800047c <returnHour>
 80004de:	6078      	str	r0, [r7, #4]
	print("%s\n",toPrint);
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <EXTI15_10_IRQHandler+0x34>)
 80004e4:	f000 f996 	bl	8000814 <print>
	free(toPrint);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 fa61 	bl	80009b0 <free>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010400 	.word	0x40010400
 80004fc:	08001ea4 	.word	0x08001ea4

08000500 <USART2_EXTI26_IRQHandler>:

//--------------------------------------------------------UART input handler function
void USART2_EXTI26_IRQHandler(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	if(RX_BUF_PLACE >= RX_BUF_SIZE)
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <USART2_EXTI26_IRQHandler+0x6c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b13      	cmp	r3, #19
 800050c:	dd02      	ble.n	8000514 <USART2_EXTI26_IRQHandler+0x14>
		RX_BUF_PLACE=0;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <USART2_EXTI26_IRQHandler+0x6c>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
	char newChar = (uint8_t)USART2->RDR;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <USART2_EXTI26_IRQHandler+0x70>)
 8000516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000518:	b29b      	uxth	r3, r3
 800051a:	71fb      	strb	r3, [r7, #7]
	if(newChar==(uint8_t)'\0' || newChar==(uint8_t)'\n' || newChar==(uint8_t)'\r'){
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d005      	beq.n	800052e <USART2_EXTI26_IRQHandler+0x2e>
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b0a      	cmp	r3, #10
 8000526:	d002      	beq.n	800052e <USART2_EXTI26_IRQHandler+0x2e>
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b0d      	cmp	r3, #13
 800052c:	d112      	bne.n	8000554 <USART2_EXTI26_IRQHandler+0x54>
		if (inputTime(RX_BUF)!=1)
 800052e:	4811      	ldr	r0, [pc, #68]	; (8000574 <USART2_EXTI26_IRQHandler+0x74>)
 8000530:	f7ff ffb1 	bl	8000496 <inputTime>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	d003      	beq.n	8000542 <USART2_EXTI26_IRQHandler+0x42>
			print("To change time please input in the following format  it:\t%s\n",format);
 800053a:	490f      	ldr	r1, [pc, #60]	; (8000578 <USART2_EXTI26_IRQHandler+0x78>)
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <USART2_EXTI26_IRQHandler+0x7c>)
 800053e:	f000 f969 	bl	8000814 <print>
		RX_BUF_PLACE=0;
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <USART2_EXTI26_IRQHandler+0x6c>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
		memset(RX_BUF,'\0',RX_BUF_SIZE);
 8000548:	2214      	movs	r2, #20
 800054a:	2100      	movs	r1, #0
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <USART2_EXTI26_IRQHandler+0x74>)
 800054e:	f000 fa37 	bl	80009c0 <memset>
		return;
 8000552:	e007      	b.n	8000564 <USART2_EXTI26_IRQHandler+0x64>
	}
	RX_BUF[RX_BUF_PLACE++]=newChar;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <USART2_EXTI26_IRQHandler+0x6c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	4904      	ldr	r1, [pc, #16]	; (800056c <USART2_EXTI26_IRQHandler+0x6c>)
 800055c:	600a      	str	r2, [r1, #0]
 800055e:	4905      	ldr	r1, [pc, #20]	; (8000574 <USART2_EXTI26_IRQHandler+0x74>)
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	54ca      	strb	r2, [r1, r3]

}
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000298 	.word	0x20000298
 8000570:	40004400 	.word	0x40004400
 8000574:	20000284 	.word	0x20000284
 8000578:	20000000 	.word	0x20000000
 800057c:	08001ea8 	.word	0x08001ea8

08000580 <SPI1_IRQHandler>:


//--------------------------------------------------------SPI1 interrupt handler function
void SPI1_IRQHandler(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	memset(timeFromSlave,'\0',9);
 8000584:	2209      	movs	r2, #9
 8000586:	2100      	movs	r1, #0
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <SPI1_IRQHandler+0x1c>)
 800058a:	f000 fa19 	bl	80009c0 <memset>
	SPI_Receive(timeFromSlave,8);
 800058e:	2108      	movs	r1, #8
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <SPI1_IRQHandler+0x1c>)
 8000592:	f000 f919 	bl	80007c8 <SPI_Receive>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000e4 	.word	0x200000e4

080005a0 <main>:


// ------------------------------------------------------ Main
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000E0000;
 80005a4:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <main+0x104>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a3e      	ldr	r2, [pc, #248]	; (80006a4 <main+0x104>)
 80005aa:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80005ae:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 80005b0:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <main+0x104>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	4a3b      	ldr	r2, [pc, #236]	; (80006a4 <main+0x104>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <main+0x104>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a38      	ldr	r2, [pc, #224]	; (80006a4 <main+0x104>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 80005c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <main+0x108>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a32      	ldr	r2, [pc, #200]	; (80006a8 <main+0x108>)
 80005de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e2:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <main+0x108>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <main+0x108>)
 80005ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ee:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <main+0x10c>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <main+0x10c>)
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	6153      	str	r3, [r2, #20]
//    NVIC_EnableIRQ(EXTI15_10_IRQn); // enable button - core interrupt
// ------------------------------------------------------
    // Configure GPIOA pin 5 as output, 0 as input.
    GPIOA->MODER |= 0x00000400;
 80005fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800060a:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 0 as input.
//    GPIOA->MODER &= ~0x00000003;
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000021; // (1 << 5);
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000616:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 800061a:	6053      	str	r3, [r2, #4]
//    GPIOA->ODR &= ~0x1;

    USART2_init();
 800061c:	f000 f912 	bl	8000844 <USART2_init>
	SPI1_init();
 8000620:	f000 f854 	bl	80006cc <SPI1_init>
    NVIC_EnableIRQ(USART2_IRQn); //usart2 rx interrupt function enable
 8000624:	2026      	movs	r0, #38	; 0x26
 8000626:	f7ff fe2b 	bl	8000280 <__NVIC_EnableIRQ>
    print("Hello!\nThis is the primary machine in the 2-machine exercise you are running!\n");
 800062a:	4821      	ldr	r0, [pc, #132]	; (80006b0 <main+0x110>)
 800062c:	f000 f8f2 	bl	8000814 <print>
    print("To change time please input in the following format  it:\t%s\n",format);
 8000630:	4920      	ldr	r1, [pc, #128]	; (80006b4 <main+0x114>)
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <main+0x118>)
 8000634:	f000 f8ee 	bl	8000814 <print>
	memset(timeFromSlave,'\0',9);
 8000638:	2209      	movs	r2, #9
 800063a:	2100      	movs	r1, #0
 800063c:	481f      	ldr	r0, [pc, #124]	; (80006bc <main+0x11c>)
 800063e:	f000 f9bf 	bl	80009c0 <memset>

	while(1){
		memset(timeFromSlave,'\0',9);
 8000642:	2209      	movs	r2, #9
 8000644:	2100      	movs	r1, #0
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <main+0x11c>)
 8000648:	f000 f9ba 	bl	80009c0 <memset>
		if((GPIOA->IDR&0x100)==0x100){
 800064c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800065a:	d103      	bne.n	8000664 <main+0xc4>
			kdet = 1;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <main+0x120>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	e002      	b.n	800066a <main+0xca>
		}
		else{
			kdet = 0;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <main+0x120>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
		}
		if(kdet_prev != kdet){
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <main+0x124>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <main+0x120>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d0e5      	beq.n	8000642 <main+0xa2>
			SPI_Receive(timeFromSlave, 8);
 8000676:	2108      	movs	r1, #8
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <main+0x11c>)
 800067a:	f000 f8a5 	bl	80007c8 <SPI_Receive>
			if(timeFromSlave[2] == ':'){
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0x11c>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b3a      	cmp	r3, #58	; 0x3a
 8000684:	d108      	bne.n	8000698 <main+0xf8>
				print("We just detect a movement at %s\n",timeFromSlave);
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <main+0x11c>)
 8000688:	480f      	ldr	r0, [pc, #60]	; (80006c8 <main+0x128>)
 800068a:	f000 f8c3 	bl	8000814 <print>
				memset(timeFromSlave,'\0',9);
 800068e:	2209      	movs	r2, #9
 8000690:	2100      	movs	r1, #0
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <main+0x11c>)
 8000694:	f000 f994 	bl	80009c0 <memset>
			}
			kdet_prev = kdet;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <main+0x120>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <main+0x124>)
 800069e:	6013      	str	r3, [r2, #0]
		memset(timeFromSlave,'\0',9);
 80006a0:	e7cf      	b.n	8000642 <main+0xa2>
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010400 	.word	0x40010400
 80006ac:	40010000 	.word	0x40010000
 80006b0:	08001ee8 	.word	0x08001ee8
 80006b4:	20000000 	.word	0x20000000
 80006b8:	08001ea8 	.word	0x08001ea8
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	200000f0 	.word	0x200000f0
 80006c4:	200000f4 	.word	0x200000f4
 80006c8:	08001f38 	.word	0x08001f38

080006cc <SPI1_init>:
int A_Buffer_PLACE=0;



void SPI1_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	//TODO - initialize SPI values (page 962 of user manual)
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	2100      	movs	r1, #0
 80006d4:	481e      	ldr	r0, [pc, #120]	; (8000750 <SPI1_init+0x84>)
 80006d6:	f000 f973 	bl	80009c0 <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	2100      	movs	r1, #0
 80006de:	481d      	ldr	r0, [pc, #116]	; (8000754 <SPI1_init+0x88>)
 80006e0:	f000 f96e 	bl	80009c0 <memset>
	*SPI_B_Buffer='\0';
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <SPI1_init+0x88>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]

	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <SPI1_init+0x8c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <SPI1_init+0x8c>)
 80006f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f4:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 80006f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000700:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 8000704:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 8000706:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000710:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000714:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000718:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000080; // Configure GPIOB pins 3  as alternate function 5, which is SPI1.
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <SPI1_init+0x90>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <SPI1_init+0x90>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PB3
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <SPI1_init+0x90>)
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <SPI1_init+0x90>)
 800072c:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000730:	6213      	str	r3, [r2, #32]
	SPI1->CR2 |= 0x000000044;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <SPI1_init+0x94>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SPI1_init+0x94>)
 8000738:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800073c:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x00000007C;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <SPI1_init+0x94>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <SPI1_init+0x94>)
 8000744:	f043 037c 	orr.w	r3, r3, #124	; 0x7c
 8000748:	6013      	str	r3, [r2, #0]

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000f8 	.word	0x200000f8
 8000754:	20000178 	.word	0x20000178
 8000758:	40021000 	.word	0x40021000
 800075c:	48000400 	.word	0x48000400
 8000760:	40013000 	.word	0x40013000

08000764 <SPI_Transmit>:


void SPI_Transmit (char *data, int size)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]

	int i=0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
	while (i<size){
 8000772:	e01b      	b.n	80007ac <SPI_Transmit+0x48>
	   SPI1->DR = data[i];  // load the data into the Data Register
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <SPI_Transmit+0x5c>)
 800077e:	60da      	str	r2, [r3, #12]
	   print("in SPI_Transmit data[%d] = %c\n",i,data[i]);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	68f9      	ldr	r1, [r7, #12]
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <SPI_Transmit+0x60>)
 800078e:	f000 f841 	bl	8000814 <print>
	   while((SPI1->SR&0x3)!=0x3){}
 8000792:	bf00      	nop
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <SPI_Transmit+0x5c>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	2b03      	cmp	r3, #3
 800079e:	d1f9      	bne.n	8000794 <SPI_Transmit+0x30>
	   uint8_t temp = SPI1->DR;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <SPI_Transmit+0x5c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	72fb      	strb	r3, [r7, #11]
	   i++;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
	while (i<size){
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbdf      	blt.n	8000774 <SPI_Transmit+0x10>
	}

}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40013000 	.word	0x40013000
 80007c4:	08001f5c 	.word	0x08001f5c

080007c8 <SPI_Receive>:

void SPI_Receive (char *data, int size)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
//	print("in SPI_Receive\n");
	while (size){
 80007d2:	e013      	b.n	80007fc <SPI_Receive+0x34>
//		print("in SPI_Receive size = %d\n",size);
		SPI1->DR = 0;  // send dummy data
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <SPI_Receive+0x48>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
		while((SPI1->SR&0x3)!=0x3){}
 80007da:	bf00      	nop
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <SPI_Receive+0x48>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f003 0303 	and.w	r3, r3, #3
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d1f9      	bne.n	80007dc <SPI_Receive+0x14>
		*data++ = (SPI1->DR);
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <SPI_Receive+0x48>)
 80007ea:	68d9      	ldr	r1, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
		size--;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
	while (size){
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e8      	bne.n	80007d4 <SPI_Receive+0xc>
	}
//	print("in SPI_Receive data recived = %s\n",data);

}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40013000 	.word	0x40013000

08000814 <print>:
 8000814:	b40f      	push	{r0, r1, r2, r3}
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	6939      	ldr	r1, [r7, #16]
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <print+0x2c>)
 8000828:	f000 fa16 	bl	8000c58 <vsiprintf>
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <print+0x2c>)
 800082e:	f000 f847 	bl	80008c0 <USART2_print>
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr
 8000840:	200001f8 	.word	0x200001f8

08000844 <USART2_init>:
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <USART2_init+0x6c>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <USART2_init+0x6c>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000852:	6153      	str	r3, [r2, #20]
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <USART2_init+0x6c>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <USART2_init+0x6c>)
 800085a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085e:	61d3      	str	r3, [r2, #28]
 8000860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800086a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000874:	6a1b      	ldr	r3, [r3, #32]
 8000876:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800087a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800087e:	6213      	str	r3, [r2, #32]
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <USART2_init+0x70>)
 8000882:	f240 3241 	movw	r2, #833	; 0x341
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <USART2_init+0x70>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	2214      	movs	r2, #20
 8000890:	2100      	movs	r1, #0
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <USART2_init+0x74>)
 8000894:	f000 f894 	bl	80009c0 <memset>
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <USART2_init+0x78>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <USART2_init+0x70>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <USART2_init+0x70>)
 80008a4:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40004400 	.word	0x40004400
 80008b8:	20000284 	.word	0x20000284
 80008bc:	20000298 	.word	0x20000298

080008c0 <USART2_print>:
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	e00e      	b.n	80008e8 <USART2_print+0x28>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <USART2_print+0x40>)
 80008d0:	b292      	uxth	r2, r2
 80008d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	bf00      	nop
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <USART2_print+0x40>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f9      	beq.n	80008dc <USART2_print+0x1c>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ec      	bne.n	80008ca <USART2_print+0xa>
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40004400 	.word	0x40004400

08000904 <Reset_Handler>:
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
 8000906:	4685      	mov	sp, r0
 8000908:	f3af 8000 	nop.w
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
 8000912:	2300      	movs	r3, #0
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:
 8000916:	58d4      	ldr	r4, [r2, r3]
 8000918:	50c4      	str	r4, [r0, r3]
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:
 800091c:	18c4      	adds	r4, r0, r3
 800091e:	428c      	cmp	r4, r1
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
 8000926:	2300      	movs	r3, #0
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:
 800092e:	42a2      	cmp	r2, r4
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>
 8000932:	f000 f811 	bl	8000958 <__libc_init_array>
 8000936:	f7ff fe33 	bl	80005a0 <main>

0800093a <LoopForever>:
 800093a:	e7fe      	b.n	800093a <LoopForever>
 800093c:	20010000 	.word	0x20010000
 8000940:	20000000 	.word	0x20000000
 8000944:	200000c8 	.word	0x200000c8
 8000948:	080020d0 	.word	0x080020d0
 800094c:	200000c8 	.word	0x200000c8
 8000950:	200002ac 	.word	0x200002ac

08000954 <ADC1_2_IRQHandler>:
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <__libc_init_array>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	4d0d      	ldr	r5, [pc, #52]	; (8000990 <__libc_init_array+0x38>)
 800095c:	4c0d      	ldr	r4, [pc, #52]	; (8000994 <__libc_init_array+0x3c>)
 800095e:	1b64      	subs	r4, r4, r5
 8000960:	10a4      	asrs	r4, r4, #2
 8000962:	2600      	movs	r6, #0
 8000964:	42a6      	cmp	r6, r4
 8000966:	d109      	bne.n	800097c <__libc_init_array+0x24>
 8000968:	4d0b      	ldr	r5, [pc, #44]	; (8000998 <__libc_init_array+0x40>)
 800096a:	4c0c      	ldr	r4, [pc, #48]	; (800099c <__libc_init_array+0x44>)
 800096c:	f001 fa80 	bl	8001e70 <_init>
 8000970:	1b64      	subs	r4, r4, r5
 8000972:	10a4      	asrs	r4, r4, #2
 8000974:	2600      	movs	r6, #0
 8000976:	42a6      	cmp	r6, r4
 8000978:	d105      	bne.n	8000986 <__libc_init_array+0x2e>
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000980:	4798      	blx	r3
 8000982:	3601      	adds	r6, #1
 8000984:	e7ee      	b.n	8000964 <__libc_init_array+0xc>
 8000986:	f855 3b04 	ldr.w	r3, [r5], #4
 800098a:	4798      	blx	r3
 800098c:	3601      	adds	r6, #1
 800098e:	e7f2      	b.n	8000976 <__libc_init_array+0x1e>
 8000990:	080020c8 	.word	0x080020c8
 8000994:	080020c8 	.word	0x080020c8
 8000998:	080020c8 	.word	0x080020c8
 800099c:	080020cc 	.word	0x080020cc

080009a0 <malloc>:
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <malloc+0xc>)
 80009a2:	4601      	mov	r1, r0
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	f000 b863 	b.w	8000a70 <_malloc_r>
 80009aa:	bf00      	nop
 80009ac:	20000064 	.word	0x20000064

080009b0 <free>:
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <free+0xc>)
 80009b2:	4601      	mov	r1, r0
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f000 b80b 	b.w	80009d0 <_free_r>
 80009ba:	bf00      	nop
 80009bc:	20000064 	.word	0x20000064

080009c0 <memset>:
 80009c0:	4402      	add	r2, r0
 80009c2:	4603      	mov	r3, r0
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d100      	bne.n	80009ca <memset+0xa>
 80009c8:	4770      	bx	lr
 80009ca:	f803 1b01 	strb.w	r1, [r3], #1
 80009ce:	e7f9      	b.n	80009c4 <memset+0x4>

080009d0 <_free_r>:
 80009d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009d2:	2900      	cmp	r1, #0
 80009d4:	d048      	beq.n	8000a68 <_free_r+0x98>
 80009d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009da:	9001      	str	r0, [sp, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f1a1 0404 	sub.w	r4, r1, #4
 80009e2:	bfb8      	it	lt
 80009e4:	18e4      	addlt	r4, r4, r3
 80009e6:	f000 f971 	bl	8000ccc <__malloc_lock>
 80009ea:	4a20      	ldr	r2, [pc, #128]	; (8000a6c <_free_r+0x9c>)
 80009ec:	9801      	ldr	r0, [sp, #4]
 80009ee:	6813      	ldr	r3, [r2, #0]
 80009f0:	4615      	mov	r5, r2
 80009f2:	b933      	cbnz	r3, 8000a02 <_free_r+0x32>
 80009f4:	6063      	str	r3, [r4, #4]
 80009f6:	6014      	str	r4, [r2, #0]
 80009f8:	b003      	add	sp, #12
 80009fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80009fe:	f000 b96b 	b.w	8000cd8 <__malloc_unlock>
 8000a02:	42a3      	cmp	r3, r4
 8000a04:	d90b      	bls.n	8000a1e <_free_r+0x4e>
 8000a06:	6821      	ldr	r1, [r4, #0]
 8000a08:	1862      	adds	r2, r4, r1
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	bf04      	itt	eq
 8000a0e:	681a      	ldreq	r2, [r3, #0]
 8000a10:	685b      	ldreq	r3, [r3, #4]
 8000a12:	6063      	str	r3, [r4, #4]
 8000a14:	bf04      	itt	eq
 8000a16:	1852      	addeq	r2, r2, r1
 8000a18:	6022      	streq	r2, [r4, #0]
 8000a1a:	602c      	str	r4, [r5, #0]
 8000a1c:	e7ec      	b.n	80009f8 <_free_r+0x28>
 8000a1e:	461a      	mov	r2, r3
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	b10b      	cbz	r3, 8000a28 <_free_r+0x58>
 8000a24:	42a3      	cmp	r3, r4
 8000a26:	d9fa      	bls.n	8000a1e <_free_r+0x4e>
 8000a28:	6811      	ldr	r1, [r2, #0]
 8000a2a:	1855      	adds	r5, r2, r1
 8000a2c:	42a5      	cmp	r5, r4
 8000a2e:	d10b      	bne.n	8000a48 <_free_r+0x78>
 8000a30:	6824      	ldr	r4, [r4, #0]
 8000a32:	4421      	add	r1, r4
 8000a34:	1854      	adds	r4, r2, r1
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	6011      	str	r1, [r2, #0]
 8000a3a:	d1dd      	bne.n	80009f8 <_free_r+0x28>
 8000a3c:	681c      	ldr	r4, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	6053      	str	r3, [r2, #4]
 8000a42:	4421      	add	r1, r4
 8000a44:	6011      	str	r1, [r2, #0]
 8000a46:	e7d7      	b.n	80009f8 <_free_r+0x28>
 8000a48:	d902      	bls.n	8000a50 <_free_r+0x80>
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	6003      	str	r3, [r0, #0]
 8000a4e:	e7d3      	b.n	80009f8 <_free_r+0x28>
 8000a50:	6825      	ldr	r5, [r4, #0]
 8000a52:	1961      	adds	r1, r4, r5
 8000a54:	428b      	cmp	r3, r1
 8000a56:	bf04      	itt	eq
 8000a58:	6819      	ldreq	r1, [r3, #0]
 8000a5a:	685b      	ldreq	r3, [r3, #4]
 8000a5c:	6063      	str	r3, [r4, #4]
 8000a5e:	bf04      	itt	eq
 8000a60:	1949      	addeq	r1, r1, r5
 8000a62:	6021      	streq	r1, [r4, #0]
 8000a64:	6054      	str	r4, [r2, #4]
 8000a66:	e7c7      	b.n	80009f8 <_free_r+0x28>
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd30      	pop	{r4, r5, pc}
 8000a6c:	20000278 	.word	0x20000278

08000a70 <_malloc_r>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	1ccd      	adds	r5, r1, #3
 8000a74:	f025 0503 	bic.w	r5, r5, #3
 8000a78:	3508      	adds	r5, #8
 8000a7a:	2d0c      	cmp	r5, #12
 8000a7c:	bf38      	it	cc
 8000a7e:	250c      	movcc	r5, #12
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	4606      	mov	r6, r0
 8000a84:	db01      	blt.n	8000a8a <_malloc_r+0x1a>
 8000a86:	42a9      	cmp	r1, r5
 8000a88:	d903      	bls.n	8000a92 <_malloc_r+0x22>
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	6033      	str	r3, [r6, #0]
 8000a8e:	2000      	movs	r0, #0
 8000a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a92:	f000 f91b 	bl	8000ccc <__malloc_lock>
 8000a96:	4921      	ldr	r1, [pc, #132]	; (8000b1c <_malloc_r+0xac>)
 8000a98:	680a      	ldr	r2, [r1, #0]
 8000a9a:	4614      	mov	r4, r2
 8000a9c:	b99c      	cbnz	r4, 8000ac6 <_malloc_r+0x56>
 8000a9e:	4f20      	ldr	r7, [pc, #128]	; (8000b20 <_malloc_r+0xb0>)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b923      	cbnz	r3, 8000aae <_malloc_r+0x3e>
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	f000 f83c 	bl	8000b24 <_sbrk_r>
 8000aac:	6038      	str	r0, [r7, #0]
 8000aae:	4629      	mov	r1, r5
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f000 f837 	bl	8000b24 <_sbrk_r>
 8000ab6:	1c43      	adds	r3, r0, #1
 8000ab8:	d123      	bne.n	8000b02 <_malloc_r+0x92>
 8000aba:	230c      	movs	r3, #12
 8000abc:	6033      	str	r3, [r6, #0]
 8000abe:	4630      	mov	r0, r6
 8000ac0:	f000 f90a 	bl	8000cd8 <__malloc_unlock>
 8000ac4:	e7e3      	b.n	8000a8e <_malloc_r+0x1e>
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	1b5b      	subs	r3, r3, r5
 8000aca:	d417      	bmi.n	8000afc <_malloc_r+0x8c>
 8000acc:	2b0b      	cmp	r3, #11
 8000ace:	d903      	bls.n	8000ad8 <_malloc_r+0x68>
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	441c      	add	r4, r3
 8000ad4:	6025      	str	r5, [r4, #0]
 8000ad6:	e004      	b.n	8000ae2 <_malloc_r+0x72>
 8000ad8:	6863      	ldr	r3, [r4, #4]
 8000ada:	42a2      	cmp	r2, r4
 8000adc:	bf0c      	ite	eq
 8000ade:	600b      	streq	r3, [r1, #0]
 8000ae0:	6053      	strne	r3, [r2, #4]
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f000 f8f8 	bl	8000cd8 <__malloc_unlock>
 8000ae8:	f104 000b 	add.w	r0, r4, #11
 8000aec:	1d23      	adds	r3, r4, #4
 8000aee:	f020 0007 	bic.w	r0, r0, #7
 8000af2:	1ac2      	subs	r2, r0, r3
 8000af4:	d0cc      	beq.n	8000a90 <_malloc_r+0x20>
 8000af6:	1a1b      	subs	r3, r3, r0
 8000af8:	50a3      	str	r3, [r4, r2]
 8000afa:	e7c9      	b.n	8000a90 <_malloc_r+0x20>
 8000afc:	4622      	mov	r2, r4
 8000afe:	6864      	ldr	r4, [r4, #4]
 8000b00:	e7cc      	b.n	8000a9c <_malloc_r+0x2c>
 8000b02:	1cc4      	adds	r4, r0, #3
 8000b04:	f024 0403 	bic.w	r4, r4, #3
 8000b08:	42a0      	cmp	r0, r4
 8000b0a:	d0e3      	beq.n	8000ad4 <_malloc_r+0x64>
 8000b0c:	1a21      	subs	r1, r4, r0
 8000b0e:	4630      	mov	r0, r6
 8000b10:	f000 f808 	bl	8000b24 <_sbrk_r>
 8000b14:	3001      	adds	r0, #1
 8000b16:	d1dd      	bne.n	8000ad4 <_malloc_r+0x64>
 8000b18:	e7cf      	b.n	8000aba <_malloc_r+0x4a>
 8000b1a:	bf00      	nop
 8000b1c:	20000278 	.word	0x20000278
 8000b20:	2000027c 	.word	0x2000027c

08000b24 <_sbrk_r>:
 8000b24:	b538      	push	{r3, r4, r5, lr}
 8000b26:	4d06      	ldr	r5, [pc, #24]	; (8000b40 <_sbrk_r+0x1c>)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	602b      	str	r3, [r5, #0]
 8000b30:	f001 f986 	bl	8001e40 <_sbrk>
 8000b34:	1c43      	adds	r3, r0, #1
 8000b36:	d102      	bne.n	8000b3e <_sbrk_r+0x1a>
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	b103      	cbz	r3, 8000b3e <_sbrk_r+0x1a>
 8000b3c:	6023      	str	r3, [r4, #0]
 8000b3e:	bd38      	pop	{r3, r4, r5, pc}
 8000b40:	2000029c 	.word	0x2000029c

08000b44 <strstr>:
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	780c      	ldrb	r4, [r1, #0]
 8000b48:	b164      	cbz	r4, 8000b64 <strstr+0x20>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	1c5e      	adds	r6, r3, #1
 8000b52:	b90a      	cbnz	r2, 8000b58 <strstr+0x14>
 8000b54:	4610      	mov	r0, r2
 8000b56:	e005      	b.n	8000b64 <strstr+0x20>
 8000b58:	4294      	cmp	r4, r2
 8000b5a:	d108      	bne.n	8000b6e <strstr+0x2a>
 8000b5c:	460d      	mov	r5, r1
 8000b5e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8000b62:	b902      	cbnz	r2, 8000b66 <strstr+0x22>
 8000b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b66:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000b6a:	4297      	cmp	r7, r2
 8000b6c:	d0f7      	beq.n	8000b5e <strstr+0x1a>
 8000b6e:	4633      	mov	r3, r6
 8000b70:	e7ec      	b.n	8000b4c <strstr+0x8>
	...

08000b74 <strtok>:
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <strtok+0x5c>)
 8000b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b78:	681e      	ldr	r6, [r3, #0]
 8000b7a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8000b7c:	4605      	mov	r5, r0
 8000b7e:	b9fc      	cbnz	r4, 8000bc0 <strtok+0x4c>
 8000b80:	2050      	movs	r0, #80	; 0x50
 8000b82:	9101      	str	r1, [sp, #4]
 8000b84:	f7ff ff0c 	bl	80009a0 <malloc>
 8000b88:	9901      	ldr	r1, [sp, #4]
 8000b8a:	65b0      	str	r0, [r6, #88]	; 0x58
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	b920      	cbnz	r0, 8000b9a <strtok+0x26>
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <strtok+0x60>)
 8000b92:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <strtok+0x64>)
 8000b94:	2157      	movs	r1, #87	; 0x57
 8000b96:	f000 f869 	bl	8000c6c <__assert_func>
 8000b9a:	e9c0 4400 	strd	r4, r4, [r0]
 8000b9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000ba2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000ba6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000baa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000bae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000bb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000bb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000bba:	6184      	str	r4, [r0, #24]
 8000bbc:	7704      	strb	r4, [r0, #28]
 8000bbe:	6244      	str	r4, [r0, #36]	; 0x24
 8000bc0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	b002      	add	sp, #8
 8000bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000bcc:	f000 b806 	b.w	8000bdc <__strtok_r>
 8000bd0:	20000064 	.word	0x20000064
 8000bd4:	08001f80 	.word	0x08001f80
 8000bd8:	08001f97 	.word	0x08001f97

08000bdc <__strtok_r>:
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b908      	cbnz	r0, 8000be4 <__strtok_r+0x8>
 8000be0:	6810      	ldr	r0, [r2, #0]
 8000be2:	b188      	cbz	r0, 8000c08 <__strtok_r+0x2c>
 8000be4:	4604      	mov	r4, r0
 8000be6:	4620      	mov	r0, r4
 8000be8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000bec:	460f      	mov	r7, r1
 8000bee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000bf2:	b91e      	cbnz	r6, 8000bfc <__strtok_r+0x20>
 8000bf4:	b965      	cbnz	r5, 8000c10 <__strtok_r+0x34>
 8000bf6:	6015      	str	r5, [r2, #0]
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	e005      	b.n	8000c08 <__strtok_r+0x2c>
 8000bfc:	42b5      	cmp	r5, r6
 8000bfe:	d1f6      	bne.n	8000bee <__strtok_r+0x12>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f0      	bne.n	8000be6 <__strtok_r+0xa>
 8000c04:	6014      	str	r4, [r2, #0]
 8000c06:	7003      	strb	r3, [r0, #0]
 8000c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0a:	461c      	mov	r4, r3
 8000c0c:	e00c      	b.n	8000c28 <__strtok_r+0x4c>
 8000c0e:	b915      	cbnz	r5, 8000c16 <__strtok_r+0x3a>
 8000c10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000c14:	460e      	mov	r6, r1
 8000c16:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000c1a:	42ab      	cmp	r3, r5
 8000c1c:	d1f7      	bne.n	8000c0e <__strtok_r+0x32>
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f3      	beq.n	8000c0a <__strtok_r+0x2e>
 8000c22:	2300      	movs	r3, #0
 8000c24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000c28:	6014      	str	r4, [r2, #0]
 8000c2a:	e7ed      	b.n	8000c08 <__strtok_r+0x2c>

08000c2c <_vsiprintf_r>:
 8000c2c:	b500      	push	{lr}
 8000c2e:	b09b      	sub	sp, #108	; 0x6c
 8000c30:	9100      	str	r1, [sp, #0]
 8000c32:	9104      	str	r1, [sp, #16]
 8000c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c38:	9105      	str	r1, [sp, #20]
 8000c3a:	9102      	str	r1, [sp, #8]
 8000c3c:	4905      	ldr	r1, [pc, #20]	; (8000c54 <_vsiprintf_r+0x28>)
 8000c3e:	9103      	str	r1, [sp, #12]
 8000c40:	4669      	mov	r1, sp
 8000c42:	f000 f8ab 	bl	8000d9c <_svfiprintf_r>
 8000c46:	9b00      	ldr	r3, [sp, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	b01b      	add	sp, #108	; 0x6c
 8000c4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c52:	bf00      	nop
 8000c54:	ffff0208 	.word	0xffff0208

08000c58 <vsiprintf>:
 8000c58:	4613      	mov	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	4601      	mov	r1, r0
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <vsiprintf+0x10>)
 8000c60:	6800      	ldr	r0, [r0, #0]
 8000c62:	f7ff bfe3 	b.w	8000c2c <_vsiprintf_r>
 8000c66:	bf00      	nop
 8000c68:	20000064 	.word	0x20000064

08000c6c <__assert_func>:
 8000c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c6e:	4614      	mov	r4, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <__assert_func+0x2c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4605      	mov	r5, r0
 8000c78:	68d8      	ldr	r0, [r3, #12]
 8000c7a:	b14c      	cbz	r4, 8000c90 <__assert_func+0x24>
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <__assert_func+0x30>)
 8000c7e:	9100      	str	r1, [sp, #0]
 8000c80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <__assert_func+0x34>)
 8000c86:	462b      	mov	r3, r5
 8000c88:	f000 f80e 	bl	8000ca8 <fiprintf>
 8000c8c:	f000 fd34 	bl	80016f8 <abort>
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__assert_func+0x38>)
 8000c92:	461c      	mov	r4, r3
 8000c94:	e7f3      	b.n	8000c7e <__assert_func+0x12>
 8000c96:	bf00      	nop
 8000c98:	20000064 	.word	0x20000064
 8000c9c:	08001ff8 	.word	0x08001ff8
 8000ca0:	08002005 	.word	0x08002005
 8000ca4:	08002033 	.word	0x08002033

08000ca8 <fiprintf>:
 8000ca8:	b40e      	push	{r1, r2, r3}
 8000caa:	b503      	push	{r0, r1, lr}
 8000cac:	4601      	mov	r1, r0
 8000cae:	ab03      	add	r3, sp, #12
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <fiprintf+0x20>)
 8000cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cb6:	6800      	ldr	r0, [r0, #0]
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	f000 f999 	bl	8000ff0 <_vfiprintf_r>
 8000cbe:	b002      	add	sp, #8
 8000cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cc4:	b003      	add	sp, #12
 8000cc6:	4770      	bx	lr
 8000cc8:	20000064 	.word	0x20000064

08000ccc <__malloc_lock>:
 8000ccc:	4801      	ldr	r0, [pc, #4]	; (8000cd4 <__malloc_lock+0x8>)
 8000cce:	f000 bed3 	b.w	8001a78 <__retarget_lock_acquire_recursive>
 8000cd2:	bf00      	nop
 8000cd4:	200002a4 	.word	0x200002a4

08000cd8 <__malloc_unlock>:
 8000cd8:	4801      	ldr	r0, [pc, #4]	; (8000ce0 <__malloc_unlock+0x8>)
 8000cda:	f000 bece 	b.w	8001a7a <__retarget_lock_release_recursive>
 8000cde:	bf00      	nop
 8000ce0:	200002a4 	.word	0x200002a4

08000ce4 <__ssputs_r>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	688e      	ldr	r6, [r1, #8]
 8000cea:	429e      	cmp	r6, r3
 8000cec:	4682      	mov	sl, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	461f      	mov	r7, r3
 8000cf4:	d838      	bhi.n	8000d68 <__ssputs_r+0x84>
 8000cf6:	898a      	ldrh	r2, [r1, #12]
 8000cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000cfc:	d032      	beq.n	8000d64 <__ssputs_r+0x80>
 8000cfe:	6825      	ldr	r5, [r4, #0]
 8000d00:	6909      	ldr	r1, [r1, #16]
 8000d02:	eba5 0901 	sub.w	r9, r5, r1
 8000d06:	6965      	ldr	r5, [r4, #20]
 8000d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d10:	3301      	adds	r3, #1
 8000d12:	444b      	add	r3, r9
 8000d14:	106d      	asrs	r5, r5, #1
 8000d16:	429d      	cmp	r5, r3
 8000d18:	bf38      	it	cc
 8000d1a:	461d      	movcc	r5, r3
 8000d1c:	0553      	lsls	r3, r2, #21
 8000d1e:	d531      	bpl.n	8000d84 <__ssputs_r+0xa0>
 8000d20:	4629      	mov	r1, r5
 8000d22:	f7ff fea5 	bl	8000a70 <_malloc_r>
 8000d26:	4606      	mov	r6, r0
 8000d28:	b950      	cbnz	r0, 8000d40 <__ssputs_r+0x5c>
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	f8ca 3000 	str.w	r3, [sl]
 8000d30:	89a3      	ldrh	r3, [r4, #12]
 8000d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d36:	81a3      	strh	r3, [r4, #12]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	6921      	ldr	r1, [r4, #16]
 8000d42:	464a      	mov	r2, r9
 8000d44:	f000 fefe 	bl	8001b44 <memcpy>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d52:	81a3      	strh	r3, [r4, #12]
 8000d54:	6126      	str	r6, [r4, #16]
 8000d56:	6165      	str	r5, [r4, #20]
 8000d58:	444e      	add	r6, r9
 8000d5a:	eba5 0509 	sub.w	r5, r5, r9
 8000d5e:	6026      	str	r6, [r4, #0]
 8000d60:	60a5      	str	r5, [r4, #8]
 8000d62:	463e      	mov	r6, r7
 8000d64:	42be      	cmp	r6, r7
 8000d66:	d900      	bls.n	8000d6a <__ssputs_r+0x86>
 8000d68:	463e      	mov	r6, r7
 8000d6a:	4632      	mov	r2, r6
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	4641      	mov	r1, r8
 8000d70:	f000 fef6 	bl	8001b60 <memmove>
 8000d74:	68a3      	ldr	r3, [r4, #8]
 8000d76:	6822      	ldr	r2, [r4, #0]
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	4432      	add	r2, r6
 8000d7c:	60a3      	str	r3, [r4, #8]
 8000d7e:	6022      	str	r2, [r4, #0]
 8000d80:	2000      	movs	r0, #0
 8000d82:	e7db      	b.n	8000d3c <__ssputs_r+0x58>
 8000d84:	462a      	mov	r2, r5
 8000d86:	f000 ff05 	bl	8001b94 <_realloc_r>
 8000d8a:	4606      	mov	r6, r0
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d1e1      	bne.n	8000d54 <__ssputs_r+0x70>
 8000d90:	6921      	ldr	r1, [r4, #16]
 8000d92:	4650      	mov	r0, sl
 8000d94:	f7ff fe1c 	bl	80009d0 <_free_r>
 8000d98:	e7c7      	b.n	8000d2a <__ssputs_r+0x46>
	...

08000d9c <_svfiprintf_r>:
 8000d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da0:	4698      	mov	r8, r3
 8000da2:	898b      	ldrh	r3, [r1, #12]
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	b09d      	sub	sp, #116	; 0x74
 8000da8:	4607      	mov	r7, r0
 8000daa:	460d      	mov	r5, r1
 8000dac:	4614      	mov	r4, r2
 8000dae:	d50e      	bpl.n	8000dce <_svfiprintf_r+0x32>
 8000db0:	690b      	ldr	r3, [r1, #16]
 8000db2:	b963      	cbnz	r3, 8000dce <_svfiprintf_r+0x32>
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	f7ff fe5b 	bl	8000a70 <_malloc_r>
 8000dba:	6028      	str	r0, [r5, #0]
 8000dbc:	6128      	str	r0, [r5, #16]
 8000dbe:	b920      	cbnz	r0, 8000dca <_svfiprintf_r+0x2e>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	e0d1      	b.n	8000f6e <_svfiprintf_r+0x1d2>
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	616b      	str	r3, [r5, #20]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ddc:	2330      	movs	r3, #48	; 0x30
 8000dde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000f88 <_svfiprintf_r+0x1ec>
 8000de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000de6:	f04f 0901 	mov.w	r9, #1
 8000dea:	4623      	mov	r3, r4
 8000dec:	469a      	mov	sl, r3
 8000dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000df2:	b10a      	cbz	r2, 8000df8 <_svfiprintf_r+0x5c>
 8000df4:	2a25      	cmp	r2, #37	; 0x25
 8000df6:	d1f9      	bne.n	8000dec <_svfiprintf_r+0x50>
 8000df8:	ebba 0b04 	subs.w	fp, sl, r4
 8000dfc:	d00b      	beq.n	8000e16 <_svfiprintf_r+0x7a>
 8000dfe:	465b      	mov	r3, fp
 8000e00:	4622      	mov	r2, r4
 8000e02:	4629      	mov	r1, r5
 8000e04:	4638      	mov	r0, r7
 8000e06:	f7ff ff6d 	bl	8000ce4 <__ssputs_r>
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	f000 80aa 	beq.w	8000f64 <_svfiprintf_r+0x1c8>
 8000e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e12:	445a      	add	r2, fp
 8000e14:	9209      	str	r2, [sp, #36]	; 0x24
 8000e16:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80a2 	beq.w	8000f64 <_svfiprintf_r+0x1c8>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f04f 32ff 	mov.w	r2, #4294967295
 8000e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e2a:	f10a 0a01 	add.w	sl, sl, #1
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	9307      	str	r3, [sp, #28]
 8000e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e36:	931a      	str	r3, [sp, #104]	; 0x68
 8000e38:	4654      	mov	r4, sl
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e40:	4851      	ldr	r0, [pc, #324]	; (8000f88 <_svfiprintf_r+0x1ec>)
 8000e42:	f7ff f9cd 	bl	80001e0 <memchr>
 8000e46:	9a04      	ldr	r2, [sp, #16]
 8000e48:	b9d8      	cbnz	r0, 8000e82 <_svfiprintf_r+0xe6>
 8000e4a:	06d0      	lsls	r0, r2, #27
 8000e4c:	bf44      	itt	mi
 8000e4e:	2320      	movmi	r3, #32
 8000e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e54:	0711      	lsls	r1, r2, #28
 8000e56:	bf44      	itt	mi
 8000e58:	232b      	movmi	r3, #43	; 0x2b
 8000e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e62:	2b2a      	cmp	r3, #42	; 0x2a
 8000e64:	d015      	beq.n	8000e92 <_svfiprintf_r+0xf6>
 8000e66:	9a07      	ldr	r2, [sp, #28]
 8000e68:	4654      	mov	r4, sl
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f04f 0c0a 	mov.w	ip, #10
 8000e70:	4621      	mov	r1, r4
 8000e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e76:	3b30      	subs	r3, #48	; 0x30
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d94e      	bls.n	8000f1a <_svfiprintf_r+0x17e>
 8000e7c:	b1b0      	cbz	r0, 8000eac <_svfiprintf_r+0x110>
 8000e7e:	9207      	str	r2, [sp, #28]
 8000e80:	e014      	b.n	8000eac <_svfiprintf_r+0x110>
 8000e82:	eba0 0308 	sub.w	r3, r0, r8
 8000e86:	fa09 f303 	lsl.w	r3, r9, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	9304      	str	r3, [sp, #16]
 8000e8e:	46a2      	mov	sl, r4
 8000e90:	e7d2      	b.n	8000e38 <_svfiprintf_r+0x9c>
 8000e92:	9b03      	ldr	r3, [sp, #12]
 8000e94:	1d19      	adds	r1, r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	9103      	str	r1, [sp, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bfbb      	ittet	lt
 8000e9e:	425b      	neglt	r3, r3
 8000ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8000ea4:	9307      	strge	r3, [sp, #28]
 8000ea6:	9307      	strlt	r3, [sp, #28]
 8000ea8:	bfb8      	it	lt
 8000eaa:	9204      	strlt	r2, [sp, #16]
 8000eac:	7823      	ldrb	r3, [r4, #0]
 8000eae:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb0:	d10c      	bne.n	8000ecc <_svfiprintf_r+0x130>
 8000eb2:	7863      	ldrb	r3, [r4, #1]
 8000eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8000eb6:	d135      	bne.n	8000f24 <_svfiprintf_r+0x188>
 8000eb8:	9b03      	ldr	r3, [sp, #12]
 8000eba:	1d1a      	adds	r2, r3, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	9203      	str	r2, [sp, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bfb8      	it	lt
 8000ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ec8:	3402      	adds	r4, #2
 8000eca:	9305      	str	r3, [sp, #20]
 8000ecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f98 <_svfiprintf_r+0x1fc>
 8000ed0:	7821      	ldrb	r1, [r4, #0]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	4650      	mov	r0, sl
 8000ed6:	f7ff f983 	bl	80001e0 <memchr>
 8000eda:	b140      	cbz	r0, 8000eee <_svfiprintf_r+0x152>
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	eba0 000a 	sub.w	r0, r0, sl
 8000ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8000ee6:	9b04      	ldr	r3, [sp, #16]
 8000ee8:	4303      	orrs	r3, r0
 8000eea:	3401      	adds	r4, #1
 8000eec:	9304      	str	r3, [sp, #16]
 8000eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ef2:	4826      	ldr	r0, [pc, #152]	; (8000f8c <_svfiprintf_r+0x1f0>)
 8000ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ef8:	2206      	movs	r2, #6
 8000efa:	f7ff f971 	bl	80001e0 <memchr>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d038      	beq.n	8000f74 <_svfiprintf_r+0x1d8>
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <_svfiprintf_r+0x1f4>)
 8000f04:	bb1b      	cbnz	r3, 8000f4e <_svfiprintf_r+0x1b2>
 8000f06:	9b03      	ldr	r3, [sp, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	f023 0307 	bic.w	r3, r3, #7
 8000f0e:	3308      	adds	r3, #8
 8000f10:	9303      	str	r3, [sp, #12]
 8000f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f14:	4433      	add	r3, r6
 8000f16:	9309      	str	r3, [sp, #36]	; 0x24
 8000f18:	e767      	b.n	8000dea <_svfiprintf_r+0x4e>
 8000f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f1e:	460c      	mov	r4, r1
 8000f20:	2001      	movs	r0, #1
 8000f22:	e7a5      	b.n	8000e70 <_svfiprintf_r+0xd4>
 8000f24:	2300      	movs	r3, #0
 8000f26:	3401      	adds	r4, #1
 8000f28:	9305      	str	r3, [sp, #20]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f04f 0c0a 	mov.w	ip, #10
 8000f30:	4620      	mov	r0, r4
 8000f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f36:	3a30      	subs	r2, #48	; 0x30
 8000f38:	2a09      	cmp	r2, #9
 8000f3a:	d903      	bls.n	8000f44 <_svfiprintf_r+0x1a8>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0c5      	beq.n	8000ecc <_svfiprintf_r+0x130>
 8000f40:	9105      	str	r1, [sp, #20]
 8000f42:	e7c3      	b.n	8000ecc <_svfiprintf_r+0x130>
 8000f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f48:	4604      	mov	r4, r0
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e7f0      	b.n	8000f30 <_svfiprintf_r+0x194>
 8000f4e:	ab03      	add	r3, sp, #12
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	462a      	mov	r2, r5
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <_svfiprintf_r+0x1f8>)
 8000f56:	a904      	add	r1, sp, #16
 8000f58:	4638      	mov	r0, r7
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	1c42      	adds	r2, r0, #1
 8000f60:	4606      	mov	r6, r0
 8000f62:	d1d6      	bne.n	8000f12 <_svfiprintf_r+0x176>
 8000f64:	89ab      	ldrh	r3, [r5, #12]
 8000f66:	065b      	lsls	r3, r3, #25
 8000f68:	f53f af2c 	bmi.w	8000dc4 <_svfiprintf_r+0x28>
 8000f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f6e:	b01d      	add	sp, #116	; 0x74
 8000f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f74:	ab03      	add	r3, sp, #12
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	462a      	mov	r2, r5
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <_svfiprintf_r+0x1f8>)
 8000f7c:	a904      	add	r1, sp, #16
 8000f7e:	4638      	mov	r0, r7
 8000f80:	f000 f9d4 	bl	800132c <_printf_i>
 8000f84:	e7eb      	b.n	8000f5e <_svfiprintf_r+0x1c2>
 8000f86:	bf00      	nop
 8000f88:	08002034 	.word	0x08002034
 8000f8c:	0800203e 	.word	0x0800203e
 8000f90:	00000000 	.word	0x00000000
 8000f94:	08000ce5 	.word	0x08000ce5
 8000f98:	0800203a 	.word	0x0800203a

08000f9c <__sfputc_r>:
 8000f9c:	6893      	ldr	r3, [r2, #8]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	b410      	push	{r4}
 8000fa4:	6093      	str	r3, [r2, #8]
 8000fa6:	da08      	bge.n	8000fba <__sfputc_r+0x1e>
 8000fa8:	6994      	ldr	r4, [r2, #24]
 8000faa:	42a3      	cmp	r3, r4
 8000fac:	db01      	blt.n	8000fb2 <__sfputc_r+0x16>
 8000fae:	290a      	cmp	r1, #10
 8000fb0:	d103      	bne.n	8000fba <__sfputc_r+0x1e>
 8000fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb6:	f000 badf 	b.w	8001578 <__swbuf_r>
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	1c58      	adds	r0, r3, #1
 8000fbe:	6010      	str	r0, [r2, #0]
 8000fc0:	7019      	strb	r1, [r3, #0]
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <__sfputs_r>:
 8000fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fcc:	4606      	mov	r6, r0
 8000fce:	460f      	mov	r7, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	18d5      	adds	r5, r2, r3
 8000fd4:	42ac      	cmp	r4, r5
 8000fd6:	d101      	bne.n	8000fdc <__sfputs_r+0x12>
 8000fd8:	2000      	movs	r0, #0
 8000fda:	e007      	b.n	8000fec <__sfputs_r+0x22>
 8000fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fe0:	463a      	mov	r2, r7
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	f7ff ffda 	bl	8000f9c <__sfputc_r>
 8000fe8:	1c43      	adds	r3, r0, #1
 8000fea:	d1f3      	bne.n	8000fd4 <__sfputs_r+0xa>
 8000fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ff0 <_vfiprintf_r>:
 8000ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ff4:	460d      	mov	r5, r1
 8000ff6:	b09d      	sub	sp, #116	; 0x74
 8000ff8:	4614      	mov	r4, r2
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	b118      	cbz	r0, 8001008 <_vfiprintf_r+0x18>
 8001000:	6983      	ldr	r3, [r0, #24]
 8001002:	b90b      	cbnz	r3, 8001008 <_vfiprintf_r+0x18>
 8001004:	f000 fc9a 	bl	800193c <__sinit>
 8001008:	4b89      	ldr	r3, [pc, #548]	; (8001230 <_vfiprintf_r+0x240>)
 800100a:	429d      	cmp	r5, r3
 800100c:	d11b      	bne.n	8001046 <_vfiprintf_r+0x56>
 800100e:	6875      	ldr	r5, [r6, #4]
 8001010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001012:	07d9      	lsls	r1, r3, #31
 8001014:	d405      	bmi.n	8001022 <_vfiprintf_r+0x32>
 8001016:	89ab      	ldrh	r3, [r5, #12]
 8001018:	059a      	lsls	r2, r3, #22
 800101a:	d402      	bmi.n	8001022 <_vfiprintf_r+0x32>
 800101c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800101e:	f000 fd2b 	bl	8001a78 <__retarget_lock_acquire_recursive>
 8001022:	89ab      	ldrh	r3, [r5, #12]
 8001024:	071b      	lsls	r3, r3, #28
 8001026:	d501      	bpl.n	800102c <_vfiprintf_r+0x3c>
 8001028:	692b      	ldr	r3, [r5, #16]
 800102a:	b9eb      	cbnz	r3, 8001068 <_vfiprintf_r+0x78>
 800102c:	4629      	mov	r1, r5
 800102e:	4630      	mov	r0, r6
 8001030:	f000 faf4 	bl	800161c <__swsetup_r>
 8001034:	b1c0      	cbz	r0, 8001068 <_vfiprintf_r+0x78>
 8001036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001038:	07dc      	lsls	r4, r3, #31
 800103a:	d50e      	bpl.n	800105a <_vfiprintf_r+0x6a>
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	b01d      	add	sp, #116	; 0x74
 8001042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001046:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <_vfiprintf_r+0x244>)
 8001048:	429d      	cmp	r5, r3
 800104a:	d101      	bne.n	8001050 <_vfiprintf_r+0x60>
 800104c:	68b5      	ldr	r5, [r6, #8]
 800104e:	e7df      	b.n	8001010 <_vfiprintf_r+0x20>
 8001050:	4b79      	ldr	r3, [pc, #484]	; (8001238 <_vfiprintf_r+0x248>)
 8001052:	429d      	cmp	r5, r3
 8001054:	bf08      	it	eq
 8001056:	68f5      	ldreq	r5, [r6, #12]
 8001058:	e7da      	b.n	8001010 <_vfiprintf_r+0x20>
 800105a:	89ab      	ldrh	r3, [r5, #12]
 800105c:	0598      	lsls	r0, r3, #22
 800105e:	d4ed      	bmi.n	800103c <_vfiprintf_r+0x4c>
 8001060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001062:	f000 fd0a 	bl	8001a7a <__retarget_lock_release_recursive>
 8001066:	e7e9      	b.n	800103c <_vfiprintf_r+0x4c>
 8001068:	2300      	movs	r3, #0
 800106a:	9309      	str	r3, [sp, #36]	; 0x24
 800106c:	2320      	movs	r3, #32
 800106e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001072:	f8cd 800c 	str.w	r8, [sp, #12]
 8001076:	2330      	movs	r3, #48	; 0x30
 8001078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800123c <_vfiprintf_r+0x24c>
 800107c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001080:	f04f 0901 	mov.w	r9, #1
 8001084:	4623      	mov	r3, r4
 8001086:	469a      	mov	sl, r3
 8001088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800108c:	b10a      	cbz	r2, 8001092 <_vfiprintf_r+0xa2>
 800108e:	2a25      	cmp	r2, #37	; 0x25
 8001090:	d1f9      	bne.n	8001086 <_vfiprintf_r+0x96>
 8001092:	ebba 0b04 	subs.w	fp, sl, r4
 8001096:	d00b      	beq.n	80010b0 <_vfiprintf_r+0xc0>
 8001098:	465b      	mov	r3, fp
 800109a:	4622      	mov	r2, r4
 800109c:	4629      	mov	r1, r5
 800109e:	4630      	mov	r0, r6
 80010a0:	f7ff ff93 	bl	8000fca <__sfputs_r>
 80010a4:	3001      	adds	r0, #1
 80010a6:	f000 80aa 	beq.w	80011fe <_vfiprintf_r+0x20e>
 80010aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010ac:	445a      	add	r2, fp
 80010ae:	9209      	str	r2, [sp, #36]	; 0x24
 80010b0:	f89a 3000 	ldrb.w	r3, [sl]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80a2 	beq.w	80011fe <_vfiprintf_r+0x20e>
 80010ba:	2300      	movs	r3, #0
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010c4:	f10a 0a01 	add.w	sl, sl, #1
 80010c8:	9304      	str	r3, [sp, #16]
 80010ca:	9307      	str	r3, [sp, #28]
 80010cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010d0:	931a      	str	r3, [sp, #104]	; 0x68
 80010d2:	4654      	mov	r4, sl
 80010d4:	2205      	movs	r2, #5
 80010d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010da:	4858      	ldr	r0, [pc, #352]	; (800123c <_vfiprintf_r+0x24c>)
 80010dc:	f7ff f880 	bl	80001e0 <memchr>
 80010e0:	9a04      	ldr	r2, [sp, #16]
 80010e2:	b9d8      	cbnz	r0, 800111c <_vfiprintf_r+0x12c>
 80010e4:	06d1      	lsls	r1, r2, #27
 80010e6:	bf44      	itt	mi
 80010e8:	2320      	movmi	r3, #32
 80010ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010ee:	0713      	lsls	r3, r2, #28
 80010f0:	bf44      	itt	mi
 80010f2:	232b      	movmi	r3, #43	; 0x2b
 80010f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010f8:	f89a 3000 	ldrb.w	r3, [sl]
 80010fc:	2b2a      	cmp	r3, #42	; 0x2a
 80010fe:	d015      	beq.n	800112c <_vfiprintf_r+0x13c>
 8001100:	9a07      	ldr	r2, [sp, #28]
 8001102:	4654      	mov	r4, sl
 8001104:	2000      	movs	r0, #0
 8001106:	f04f 0c0a 	mov.w	ip, #10
 800110a:	4621      	mov	r1, r4
 800110c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001110:	3b30      	subs	r3, #48	; 0x30
 8001112:	2b09      	cmp	r3, #9
 8001114:	d94e      	bls.n	80011b4 <_vfiprintf_r+0x1c4>
 8001116:	b1b0      	cbz	r0, 8001146 <_vfiprintf_r+0x156>
 8001118:	9207      	str	r2, [sp, #28]
 800111a:	e014      	b.n	8001146 <_vfiprintf_r+0x156>
 800111c:	eba0 0308 	sub.w	r3, r0, r8
 8001120:	fa09 f303 	lsl.w	r3, r9, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	9304      	str	r3, [sp, #16]
 8001128:	46a2      	mov	sl, r4
 800112a:	e7d2      	b.n	80010d2 <_vfiprintf_r+0xe2>
 800112c:	9b03      	ldr	r3, [sp, #12]
 800112e:	1d19      	adds	r1, r3, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	9103      	str	r1, [sp, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	bfbb      	ittet	lt
 8001138:	425b      	neglt	r3, r3
 800113a:	f042 0202 	orrlt.w	r2, r2, #2
 800113e:	9307      	strge	r3, [sp, #28]
 8001140:	9307      	strlt	r3, [sp, #28]
 8001142:	bfb8      	it	lt
 8001144:	9204      	strlt	r2, [sp, #16]
 8001146:	7823      	ldrb	r3, [r4, #0]
 8001148:	2b2e      	cmp	r3, #46	; 0x2e
 800114a:	d10c      	bne.n	8001166 <_vfiprintf_r+0x176>
 800114c:	7863      	ldrb	r3, [r4, #1]
 800114e:	2b2a      	cmp	r3, #42	; 0x2a
 8001150:	d135      	bne.n	80011be <_vfiprintf_r+0x1ce>
 8001152:	9b03      	ldr	r3, [sp, #12]
 8001154:	1d1a      	adds	r2, r3, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	9203      	str	r2, [sp, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	bfb8      	it	lt
 800115e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001162:	3402      	adds	r4, #2
 8001164:	9305      	str	r3, [sp, #20]
 8001166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800124c <_vfiprintf_r+0x25c>
 800116a:	7821      	ldrb	r1, [r4, #0]
 800116c:	2203      	movs	r2, #3
 800116e:	4650      	mov	r0, sl
 8001170:	f7ff f836 	bl	80001e0 <memchr>
 8001174:	b140      	cbz	r0, 8001188 <_vfiprintf_r+0x198>
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	eba0 000a 	sub.w	r0, r0, sl
 800117c:	fa03 f000 	lsl.w	r0, r3, r0
 8001180:	9b04      	ldr	r3, [sp, #16]
 8001182:	4303      	orrs	r3, r0
 8001184:	3401      	adds	r4, #1
 8001186:	9304      	str	r3, [sp, #16]
 8001188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <_vfiprintf_r+0x250>)
 800118e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001192:	2206      	movs	r2, #6
 8001194:	f7ff f824 	bl	80001e0 <memchr>
 8001198:	2800      	cmp	r0, #0
 800119a:	d03f      	beq.n	800121c <_vfiprintf_r+0x22c>
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <_vfiprintf_r+0x254>)
 800119e:	bb1b      	cbnz	r3, 80011e8 <_vfiprintf_r+0x1f8>
 80011a0:	9b03      	ldr	r3, [sp, #12]
 80011a2:	3307      	adds	r3, #7
 80011a4:	f023 0307 	bic.w	r3, r3, #7
 80011a8:	3308      	adds	r3, #8
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011ae:	443b      	add	r3, r7
 80011b0:	9309      	str	r3, [sp, #36]	; 0x24
 80011b2:	e767      	b.n	8001084 <_vfiprintf_r+0x94>
 80011b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80011b8:	460c      	mov	r4, r1
 80011ba:	2001      	movs	r0, #1
 80011bc:	e7a5      	b.n	800110a <_vfiprintf_r+0x11a>
 80011be:	2300      	movs	r3, #0
 80011c0:	3401      	adds	r4, #1
 80011c2:	9305      	str	r3, [sp, #20]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0c0a 	mov.w	ip, #10
 80011ca:	4620      	mov	r0, r4
 80011cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011d0:	3a30      	subs	r2, #48	; 0x30
 80011d2:	2a09      	cmp	r2, #9
 80011d4:	d903      	bls.n	80011de <_vfiprintf_r+0x1ee>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0c5      	beq.n	8001166 <_vfiprintf_r+0x176>
 80011da:	9105      	str	r1, [sp, #20]
 80011dc:	e7c3      	b.n	8001166 <_vfiprintf_r+0x176>
 80011de:	fb0c 2101 	mla	r1, ip, r1, r2
 80011e2:	4604      	mov	r4, r0
 80011e4:	2301      	movs	r3, #1
 80011e6:	e7f0      	b.n	80011ca <_vfiprintf_r+0x1da>
 80011e8:	ab03      	add	r3, sp, #12
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	462a      	mov	r2, r5
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <_vfiprintf_r+0x258>)
 80011f0:	a904      	add	r1, sp, #16
 80011f2:	4630      	mov	r0, r6
 80011f4:	f3af 8000 	nop.w
 80011f8:	4607      	mov	r7, r0
 80011fa:	1c78      	adds	r0, r7, #1
 80011fc:	d1d6      	bne.n	80011ac <_vfiprintf_r+0x1bc>
 80011fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001200:	07d9      	lsls	r1, r3, #31
 8001202:	d405      	bmi.n	8001210 <_vfiprintf_r+0x220>
 8001204:	89ab      	ldrh	r3, [r5, #12]
 8001206:	059a      	lsls	r2, r3, #22
 8001208:	d402      	bmi.n	8001210 <_vfiprintf_r+0x220>
 800120a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800120c:	f000 fc35 	bl	8001a7a <__retarget_lock_release_recursive>
 8001210:	89ab      	ldrh	r3, [r5, #12]
 8001212:	065b      	lsls	r3, r3, #25
 8001214:	f53f af12 	bmi.w	800103c <_vfiprintf_r+0x4c>
 8001218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800121a:	e711      	b.n	8001040 <_vfiprintf_r+0x50>
 800121c:	ab03      	add	r3, sp, #12
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	462a      	mov	r2, r5
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <_vfiprintf_r+0x258>)
 8001224:	a904      	add	r1, sp, #16
 8001226:	4630      	mov	r0, r6
 8001228:	f000 f880 	bl	800132c <_printf_i>
 800122c:	e7e4      	b.n	80011f8 <_vfiprintf_r+0x208>
 800122e:	bf00      	nop
 8001230:	08002088 	.word	0x08002088
 8001234:	080020a8 	.word	0x080020a8
 8001238:	08002068 	.word	0x08002068
 800123c:	08002034 	.word	0x08002034
 8001240:	0800203e 	.word	0x0800203e
 8001244:	00000000 	.word	0x00000000
 8001248:	08000fcb 	.word	0x08000fcb
 800124c:	0800203a 	.word	0x0800203a

08001250 <_printf_common>:
 8001250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001254:	4616      	mov	r6, r2
 8001256:	4699      	mov	r9, r3
 8001258:	688a      	ldr	r2, [r1, #8]
 800125a:	690b      	ldr	r3, [r1, #16]
 800125c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001260:	4293      	cmp	r3, r2
 8001262:	bfb8      	it	lt
 8001264:	4613      	movlt	r3, r2
 8001266:	6033      	str	r3, [r6, #0]
 8001268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800126c:	4607      	mov	r7, r0
 800126e:	460c      	mov	r4, r1
 8001270:	b10a      	cbz	r2, 8001276 <_printf_common+0x26>
 8001272:	3301      	adds	r3, #1
 8001274:	6033      	str	r3, [r6, #0]
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	0699      	lsls	r1, r3, #26
 800127a:	bf42      	ittt	mi
 800127c:	6833      	ldrmi	r3, [r6, #0]
 800127e:	3302      	addmi	r3, #2
 8001280:	6033      	strmi	r3, [r6, #0]
 8001282:	6825      	ldr	r5, [r4, #0]
 8001284:	f015 0506 	ands.w	r5, r5, #6
 8001288:	d106      	bne.n	8001298 <_printf_common+0x48>
 800128a:	f104 0a19 	add.w	sl, r4, #25
 800128e:	68e3      	ldr	r3, [r4, #12]
 8001290:	6832      	ldr	r2, [r6, #0]
 8001292:	1a9b      	subs	r3, r3, r2
 8001294:	42ab      	cmp	r3, r5
 8001296:	dc26      	bgt.n	80012e6 <_printf_common+0x96>
 8001298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800129c:	1e13      	subs	r3, r2, #0
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	bf18      	it	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	0692      	lsls	r2, r2, #26
 80012a6:	d42b      	bmi.n	8001300 <_printf_common+0xb0>
 80012a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012ac:	4649      	mov	r1, r9
 80012ae:	4638      	mov	r0, r7
 80012b0:	47c0      	blx	r8
 80012b2:	3001      	adds	r0, #1
 80012b4:	d01e      	beq.n	80012f4 <_printf_common+0xa4>
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	68e5      	ldr	r5, [r4, #12]
 80012ba:	6832      	ldr	r2, [r6, #0]
 80012bc:	f003 0306 	and.w	r3, r3, #6
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	bf08      	it	eq
 80012c4:	1aad      	subeq	r5, r5, r2
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	6922      	ldr	r2, [r4, #16]
 80012ca:	bf0c      	ite	eq
 80012cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012d0:	2500      	movne	r5, #0
 80012d2:	4293      	cmp	r3, r2
 80012d4:	bfc4      	itt	gt
 80012d6:	1a9b      	subgt	r3, r3, r2
 80012d8:	18ed      	addgt	r5, r5, r3
 80012da:	2600      	movs	r6, #0
 80012dc:	341a      	adds	r4, #26
 80012de:	42b5      	cmp	r5, r6
 80012e0:	d11a      	bne.n	8001318 <_printf_common+0xc8>
 80012e2:	2000      	movs	r0, #0
 80012e4:	e008      	b.n	80012f8 <_printf_common+0xa8>
 80012e6:	2301      	movs	r3, #1
 80012e8:	4652      	mov	r2, sl
 80012ea:	4649      	mov	r1, r9
 80012ec:	4638      	mov	r0, r7
 80012ee:	47c0      	blx	r8
 80012f0:	3001      	adds	r0, #1
 80012f2:	d103      	bne.n	80012fc <_printf_common+0xac>
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fc:	3501      	adds	r5, #1
 80012fe:	e7c6      	b.n	800128e <_printf_common+0x3e>
 8001300:	18e1      	adds	r1, r4, r3
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	2030      	movs	r0, #48	; 0x30
 8001306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800130a:	4422      	add	r2, r4
 800130c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001314:	3302      	adds	r3, #2
 8001316:	e7c7      	b.n	80012a8 <_printf_common+0x58>
 8001318:	2301      	movs	r3, #1
 800131a:	4622      	mov	r2, r4
 800131c:	4649      	mov	r1, r9
 800131e:	4638      	mov	r0, r7
 8001320:	47c0      	blx	r8
 8001322:	3001      	adds	r0, #1
 8001324:	d0e6      	beq.n	80012f4 <_printf_common+0xa4>
 8001326:	3601      	adds	r6, #1
 8001328:	e7d9      	b.n	80012de <_printf_common+0x8e>
	...

0800132c <_printf_i>:
 800132c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001330:	460c      	mov	r4, r1
 8001332:	4691      	mov	r9, r2
 8001334:	7e27      	ldrb	r7, [r4, #24]
 8001336:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001338:	2f78      	cmp	r7, #120	; 0x78
 800133a:	4680      	mov	r8, r0
 800133c:	469a      	mov	sl, r3
 800133e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001342:	d807      	bhi.n	8001354 <_printf_i+0x28>
 8001344:	2f62      	cmp	r7, #98	; 0x62
 8001346:	d80a      	bhi.n	800135e <_printf_i+0x32>
 8001348:	2f00      	cmp	r7, #0
 800134a:	f000 80d8 	beq.w	80014fe <_printf_i+0x1d2>
 800134e:	2f58      	cmp	r7, #88	; 0x58
 8001350:	f000 80a3 	beq.w	800149a <_printf_i+0x16e>
 8001354:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800135c:	e03a      	b.n	80013d4 <_printf_i+0xa8>
 800135e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001362:	2b15      	cmp	r3, #21
 8001364:	d8f6      	bhi.n	8001354 <_printf_i+0x28>
 8001366:	a001      	add	r0, pc, #4	; (adr r0, 800136c <_printf_i+0x40>)
 8001368:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800136c:	080013c5 	.word	0x080013c5
 8001370:	080013d9 	.word	0x080013d9
 8001374:	08001355 	.word	0x08001355
 8001378:	08001355 	.word	0x08001355
 800137c:	08001355 	.word	0x08001355
 8001380:	08001355 	.word	0x08001355
 8001384:	080013d9 	.word	0x080013d9
 8001388:	08001355 	.word	0x08001355
 800138c:	08001355 	.word	0x08001355
 8001390:	08001355 	.word	0x08001355
 8001394:	08001355 	.word	0x08001355
 8001398:	080014e5 	.word	0x080014e5
 800139c:	08001409 	.word	0x08001409
 80013a0:	080014c7 	.word	0x080014c7
 80013a4:	08001355 	.word	0x08001355
 80013a8:	08001355 	.word	0x08001355
 80013ac:	08001507 	.word	0x08001507
 80013b0:	08001355 	.word	0x08001355
 80013b4:	08001409 	.word	0x08001409
 80013b8:	08001355 	.word	0x08001355
 80013bc:	08001355 	.word	0x08001355
 80013c0:	080014cf 	.word	0x080014cf
 80013c4:	680b      	ldr	r3, [r1, #0]
 80013c6:	1d1a      	adds	r2, r3, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	600a      	str	r2, [r1, #0]
 80013cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0a3      	b.n	8001520 <_printf_i+0x1f4>
 80013d8:	6825      	ldr	r5, [r4, #0]
 80013da:	6808      	ldr	r0, [r1, #0]
 80013dc:	062e      	lsls	r6, r5, #24
 80013de:	f100 0304 	add.w	r3, r0, #4
 80013e2:	d50a      	bpl.n	80013fa <_printf_i+0xce>
 80013e4:	6805      	ldr	r5, [r0, #0]
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	da03      	bge.n	80013f4 <_printf_i+0xc8>
 80013ec:	232d      	movs	r3, #45	; 0x2d
 80013ee:	426d      	negs	r5, r5
 80013f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013f4:	485e      	ldr	r0, [pc, #376]	; (8001570 <_printf_i+0x244>)
 80013f6:	230a      	movs	r3, #10
 80013f8:	e019      	b.n	800142e <_printf_i+0x102>
 80013fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80013fe:	6805      	ldr	r5, [r0, #0]
 8001400:	600b      	str	r3, [r1, #0]
 8001402:	bf18      	it	ne
 8001404:	b22d      	sxthne	r5, r5
 8001406:	e7ef      	b.n	80013e8 <_printf_i+0xbc>
 8001408:	680b      	ldr	r3, [r1, #0]
 800140a:	6825      	ldr	r5, [r4, #0]
 800140c:	1d18      	adds	r0, r3, #4
 800140e:	6008      	str	r0, [r1, #0]
 8001410:	0628      	lsls	r0, r5, #24
 8001412:	d501      	bpl.n	8001418 <_printf_i+0xec>
 8001414:	681d      	ldr	r5, [r3, #0]
 8001416:	e002      	b.n	800141e <_printf_i+0xf2>
 8001418:	0669      	lsls	r1, r5, #25
 800141a:	d5fb      	bpl.n	8001414 <_printf_i+0xe8>
 800141c:	881d      	ldrh	r5, [r3, #0]
 800141e:	4854      	ldr	r0, [pc, #336]	; (8001570 <_printf_i+0x244>)
 8001420:	2f6f      	cmp	r7, #111	; 0x6f
 8001422:	bf0c      	ite	eq
 8001424:	2308      	moveq	r3, #8
 8001426:	230a      	movne	r3, #10
 8001428:	2100      	movs	r1, #0
 800142a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800142e:	6866      	ldr	r6, [r4, #4]
 8001430:	60a6      	str	r6, [r4, #8]
 8001432:	2e00      	cmp	r6, #0
 8001434:	bfa2      	ittt	ge
 8001436:	6821      	ldrge	r1, [r4, #0]
 8001438:	f021 0104 	bicge.w	r1, r1, #4
 800143c:	6021      	strge	r1, [r4, #0]
 800143e:	b90d      	cbnz	r5, 8001444 <_printf_i+0x118>
 8001440:	2e00      	cmp	r6, #0
 8001442:	d04d      	beq.n	80014e0 <_printf_i+0x1b4>
 8001444:	4616      	mov	r6, r2
 8001446:	fbb5 f1f3 	udiv	r1, r5, r3
 800144a:	fb03 5711 	mls	r7, r3, r1, r5
 800144e:	5dc7      	ldrb	r7, [r0, r7]
 8001450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001454:	462f      	mov	r7, r5
 8001456:	42bb      	cmp	r3, r7
 8001458:	460d      	mov	r5, r1
 800145a:	d9f4      	bls.n	8001446 <_printf_i+0x11a>
 800145c:	2b08      	cmp	r3, #8
 800145e:	d10b      	bne.n	8001478 <_printf_i+0x14c>
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	07df      	lsls	r7, r3, #31
 8001464:	d508      	bpl.n	8001478 <_printf_i+0x14c>
 8001466:	6923      	ldr	r3, [r4, #16]
 8001468:	6861      	ldr	r1, [r4, #4]
 800146a:	4299      	cmp	r1, r3
 800146c:	bfde      	ittt	le
 800146e:	2330      	movle	r3, #48	; 0x30
 8001470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001478:	1b92      	subs	r2, r2, r6
 800147a:	6122      	str	r2, [r4, #16]
 800147c:	f8cd a000 	str.w	sl, [sp]
 8001480:	464b      	mov	r3, r9
 8001482:	aa03      	add	r2, sp, #12
 8001484:	4621      	mov	r1, r4
 8001486:	4640      	mov	r0, r8
 8001488:	f7ff fee2 	bl	8001250 <_printf_common>
 800148c:	3001      	adds	r0, #1
 800148e:	d14c      	bne.n	800152a <_printf_i+0x1fe>
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	b004      	add	sp, #16
 8001496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800149a:	4835      	ldr	r0, [pc, #212]	; (8001570 <_printf_i+0x244>)
 800149c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	680e      	ldr	r6, [r1, #0]
 80014a4:	061f      	lsls	r7, r3, #24
 80014a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80014aa:	600e      	str	r6, [r1, #0]
 80014ac:	d514      	bpl.n	80014d8 <_printf_i+0x1ac>
 80014ae:	07d9      	lsls	r1, r3, #31
 80014b0:	bf44      	itt	mi
 80014b2:	f043 0320 	orrmi.w	r3, r3, #32
 80014b6:	6023      	strmi	r3, [r4, #0]
 80014b8:	b91d      	cbnz	r5, 80014c2 <_printf_i+0x196>
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	f023 0320 	bic.w	r3, r3, #32
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	2310      	movs	r3, #16
 80014c4:	e7b0      	b.n	8001428 <_printf_i+0xfc>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	2378      	movs	r3, #120	; 0x78
 80014d0:	4828      	ldr	r0, [pc, #160]	; (8001574 <_printf_i+0x248>)
 80014d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014d6:	e7e3      	b.n	80014a0 <_printf_i+0x174>
 80014d8:	065e      	lsls	r6, r3, #25
 80014da:	bf48      	it	mi
 80014dc:	b2ad      	uxthmi	r5, r5
 80014de:	e7e6      	b.n	80014ae <_printf_i+0x182>
 80014e0:	4616      	mov	r6, r2
 80014e2:	e7bb      	b.n	800145c <_printf_i+0x130>
 80014e4:	680b      	ldr	r3, [r1, #0]
 80014e6:	6826      	ldr	r6, [r4, #0]
 80014e8:	6960      	ldr	r0, [r4, #20]
 80014ea:	1d1d      	adds	r5, r3, #4
 80014ec:	600d      	str	r5, [r1, #0]
 80014ee:	0635      	lsls	r5, r6, #24
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	d501      	bpl.n	80014f8 <_printf_i+0x1cc>
 80014f4:	6018      	str	r0, [r3, #0]
 80014f6:	e002      	b.n	80014fe <_printf_i+0x1d2>
 80014f8:	0671      	lsls	r1, r6, #25
 80014fa:	d5fb      	bpl.n	80014f4 <_printf_i+0x1c8>
 80014fc:	8018      	strh	r0, [r3, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	6123      	str	r3, [r4, #16]
 8001502:	4616      	mov	r6, r2
 8001504:	e7ba      	b.n	800147c <_printf_i+0x150>
 8001506:	680b      	ldr	r3, [r1, #0]
 8001508:	1d1a      	adds	r2, r3, #4
 800150a:	600a      	str	r2, [r1, #0]
 800150c:	681e      	ldr	r6, [r3, #0]
 800150e:	6862      	ldr	r2, [r4, #4]
 8001510:	2100      	movs	r1, #0
 8001512:	4630      	mov	r0, r6
 8001514:	f7fe fe64 	bl	80001e0 <memchr>
 8001518:	b108      	cbz	r0, 800151e <_printf_i+0x1f2>
 800151a:	1b80      	subs	r0, r0, r6
 800151c:	6060      	str	r0, [r4, #4]
 800151e:	6863      	ldr	r3, [r4, #4]
 8001520:	6123      	str	r3, [r4, #16]
 8001522:	2300      	movs	r3, #0
 8001524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001528:	e7a8      	b.n	800147c <_printf_i+0x150>
 800152a:	6923      	ldr	r3, [r4, #16]
 800152c:	4632      	mov	r2, r6
 800152e:	4649      	mov	r1, r9
 8001530:	4640      	mov	r0, r8
 8001532:	47d0      	blx	sl
 8001534:	3001      	adds	r0, #1
 8001536:	d0ab      	beq.n	8001490 <_printf_i+0x164>
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	079b      	lsls	r3, r3, #30
 800153c:	d413      	bmi.n	8001566 <_printf_i+0x23a>
 800153e:	68e0      	ldr	r0, [r4, #12]
 8001540:	9b03      	ldr	r3, [sp, #12]
 8001542:	4298      	cmp	r0, r3
 8001544:	bfb8      	it	lt
 8001546:	4618      	movlt	r0, r3
 8001548:	e7a4      	b.n	8001494 <_printf_i+0x168>
 800154a:	2301      	movs	r3, #1
 800154c:	4632      	mov	r2, r6
 800154e:	4649      	mov	r1, r9
 8001550:	4640      	mov	r0, r8
 8001552:	47d0      	blx	sl
 8001554:	3001      	adds	r0, #1
 8001556:	d09b      	beq.n	8001490 <_printf_i+0x164>
 8001558:	3501      	adds	r5, #1
 800155a:	68e3      	ldr	r3, [r4, #12]
 800155c:	9903      	ldr	r1, [sp, #12]
 800155e:	1a5b      	subs	r3, r3, r1
 8001560:	42ab      	cmp	r3, r5
 8001562:	dcf2      	bgt.n	800154a <_printf_i+0x21e>
 8001564:	e7eb      	b.n	800153e <_printf_i+0x212>
 8001566:	2500      	movs	r5, #0
 8001568:	f104 0619 	add.w	r6, r4, #25
 800156c:	e7f5      	b.n	800155a <_printf_i+0x22e>
 800156e:	bf00      	nop
 8001570:	08002045 	.word	0x08002045
 8001574:	08002056 	.word	0x08002056

08001578 <__swbuf_r>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	460e      	mov	r6, r1
 800157c:	4614      	mov	r4, r2
 800157e:	4605      	mov	r5, r0
 8001580:	b118      	cbz	r0, 800158a <__swbuf_r+0x12>
 8001582:	6983      	ldr	r3, [r0, #24]
 8001584:	b90b      	cbnz	r3, 800158a <__swbuf_r+0x12>
 8001586:	f000 f9d9 	bl	800193c <__sinit>
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <__swbuf_r+0x98>)
 800158c:	429c      	cmp	r4, r3
 800158e:	d12b      	bne.n	80015e8 <__swbuf_r+0x70>
 8001590:	686c      	ldr	r4, [r5, #4]
 8001592:	69a3      	ldr	r3, [r4, #24]
 8001594:	60a3      	str	r3, [r4, #8]
 8001596:	89a3      	ldrh	r3, [r4, #12]
 8001598:	071a      	lsls	r2, r3, #28
 800159a:	d52f      	bpl.n	80015fc <__swbuf_r+0x84>
 800159c:	6923      	ldr	r3, [r4, #16]
 800159e:	b36b      	cbz	r3, 80015fc <__swbuf_r+0x84>
 80015a0:	6923      	ldr	r3, [r4, #16]
 80015a2:	6820      	ldr	r0, [r4, #0]
 80015a4:	1ac0      	subs	r0, r0, r3
 80015a6:	6963      	ldr	r3, [r4, #20]
 80015a8:	b2f6      	uxtb	r6, r6
 80015aa:	4283      	cmp	r3, r0
 80015ac:	4637      	mov	r7, r6
 80015ae:	dc04      	bgt.n	80015ba <__swbuf_r+0x42>
 80015b0:	4621      	mov	r1, r4
 80015b2:	4628      	mov	r0, r5
 80015b4:	f000 f92e 	bl	8001814 <_fflush_r>
 80015b8:	bb30      	cbnz	r0, 8001608 <__swbuf_r+0x90>
 80015ba:	68a3      	ldr	r3, [r4, #8]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60a3      	str	r3, [r4, #8]
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	6022      	str	r2, [r4, #0]
 80015c6:	701e      	strb	r6, [r3, #0]
 80015c8:	6963      	ldr	r3, [r4, #20]
 80015ca:	3001      	adds	r0, #1
 80015cc:	4283      	cmp	r3, r0
 80015ce:	d004      	beq.n	80015da <__swbuf_r+0x62>
 80015d0:	89a3      	ldrh	r3, [r4, #12]
 80015d2:	07db      	lsls	r3, r3, #31
 80015d4:	d506      	bpl.n	80015e4 <__swbuf_r+0x6c>
 80015d6:	2e0a      	cmp	r6, #10
 80015d8:	d104      	bne.n	80015e4 <__swbuf_r+0x6c>
 80015da:	4621      	mov	r1, r4
 80015dc:	4628      	mov	r0, r5
 80015de:	f000 f919 	bl	8001814 <_fflush_r>
 80015e2:	b988      	cbnz	r0, 8001608 <__swbuf_r+0x90>
 80015e4:	4638      	mov	r0, r7
 80015e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <__swbuf_r+0x9c>)
 80015ea:	429c      	cmp	r4, r3
 80015ec:	d101      	bne.n	80015f2 <__swbuf_r+0x7a>
 80015ee:	68ac      	ldr	r4, [r5, #8]
 80015f0:	e7cf      	b.n	8001592 <__swbuf_r+0x1a>
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <__swbuf_r+0xa0>)
 80015f4:	429c      	cmp	r4, r3
 80015f6:	bf08      	it	eq
 80015f8:	68ec      	ldreq	r4, [r5, #12]
 80015fa:	e7ca      	b.n	8001592 <__swbuf_r+0x1a>
 80015fc:	4621      	mov	r1, r4
 80015fe:	4628      	mov	r0, r5
 8001600:	f000 f80c 	bl	800161c <__swsetup_r>
 8001604:	2800      	cmp	r0, #0
 8001606:	d0cb      	beq.n	80015a0 <__swbuf_r+0x28>
 8001608:	f04f 37ff 	mov.w	r7, #4294967295
 800160c:	e7ea      	b.n	80015e4 <__swbuf_r+0x6c>
 800160e:	bf00      	nop
 8001610:	08002088 	.word	0x08002088
 8001614:	080020a8 	.word	0x080020a8
 8001618:	08002068 	.word	0x08002068

0800161c <__swsetup_r>:
 800161c:	4b32      	ldr	r3, [pc, #200]	; (80016e8 <__swsetup_r+0xcc>)
 800161e:	b570      	push	{r4, r5, r6, lr}
 8001620:	681d      	ldr	r5, [r3, #0]
 8001622:	4606      	mov	r6, r0
 8001624:	460c      	mov	r4, r1
 8001626:	b125      	cbz	r5, 8001632 <__swsetup_r+0x16>
 8001628:	69ab      	ldr	r3, [r5, #24]
 800162a:	b913      	cbnz	r3, 8001632 <__swsetup_r+0x16>
 800162c:	4628      	mov	r0, r5
 800162e:	f000 f985 	bl	800193c <__sinit>
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <__swsetup_r+0xd0>)
 8001634:	429c      	cmp	r4, r3
 8001636:	d10f      	bne.n	8001658 <__swsetup_r+0x3c>
 8001638:	686c      	ldr	r4, [r5, #4]
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001640:	0719      	lsls	r1, r3, #28
 8001642:	d42c      	bmi.n	800169e <__swsetup_r+0x82>
 8001644:	06dd      	lsls	r5, r3, #27
 8001646:	d411      	bmi.n	800166c <__swsetup_r+0x50>
 8001648:	2309      	movs	r3, #9
 800164a:	6033      	str	r3, [r6, #0]
 800164c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001650:	81a3      	strh	r3, [r4, #12]
 8001652:	f04f 30ff 	mov.w	r0, #4294967295
 8001656:	e03e      	b.n	80016d6 <__swsetup_r+0xba>
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <__swsetup_r+0xd4>)
 800165a:	429c      	cmp	r4, r3
 800165c:	d101      	bne.n	8001662 <__swsetup_r+0x46>
 800165e:	68ac      	ldr	r4, [r5, #8]
 8001660:	e7eb      	b.n	800163a <__swsetup_r+0x1e>
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <__swsetup_r+0xd8>)
 8001664:	429c      	cmp	r4, r3
 8001666:	bf08      	it	eq
 8001668:	68ec      	ldreq	r4, [r5, #12]
 800166a:	e7e6      	b.n	800163a <__swsetup_r+0x1e>
 800166c:	0758      	lsls	r0, r3, #29
 800166e:	d512      	bpl.n	8001696 <__swsetup_r+0x7a>
 8001670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001672:	b141      	cbz	r1, 8001686 <__swsetup_r+0x6a>
 8001674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001678:	4299      	cmp	r1, r3
 800167a:	d002      	beq.n	8001682 <__swsetup_r+0x66>
 800167c:	4630      	mov	r0, r6
 800167e:	f7ff f9a7 	bl	80009d0 <_free_r>
 8001682:	2300      	movs	r3, #0
 8001684:	6363      	str	r3, [r4, #52]	; 0x34
 8001686:	89a3      	ldrh	r3, [r4, #12]
 8001688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800168c:	81a3      	strh	r3, [r4, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	6063      	str	r3, [r4, #4]
 8001692:	6923      	ldr	r3, [r4, #16]
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	89a3      	ldrh	r3, [r4, #12]
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	81a3      	strh	r3, [r4, #12]
 800169e:	6923      	ldr	r3, [r4, #16]
 80016a0:	b94b      	cbnz	r3, 80016b6 <__swsetup_r+0x9a>
 80016a2:	89a3      	ldrh	r3, [r4, #12]
 80016a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ac:	d003      	beq.n	80016b6 <__swsetup_r+0x9a>
 80016ae:	4621      	mov	r1, r4
 80016b0:	4630      	mov	r0, r6
 80016b2:	f000 fa07 	bl	8001ac4 <__smakebuf_r>
 80016b6:	89a0      	ldrh	r0, [r4, #12]
 80016b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016bc:	f010 0301 	ands.w	r3, r0, #1
 80016c0:	d00a      	beq.n	80016d8 <__swsetup_r+0xbc>
 80016c2:	2300      	movs	r3, #0
 80016c4:	60a3      	str	r3, [r4, #8]
 80016c6:	6963      	ldr	r3, [r4, #20]
 80016c8:	425b      	negs	r3, r3
 80016ca:	61a3      	str	r3, [r4, #24]
 80016cc:	6923      	ldr	r3, [r4, #16]
 80016ce:	b943      	cbnz	r3, 80016e2 <__swsetup_r+0xc6>
 80016d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80016d4:	d1ba      	bne.n	800164c <__swsetup_r+0x30>
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
 80016d8:	0781      	lsls	r1, r0, #30
 80016da:	bf58      	it	pl
 80016dc:	6963      	ldrpl	r3, [r4, #20]
 80016de:	60a3      	str	r3, [r4, #8]
 80016e0:	e7f4      	b.n	80016cc <__swsetup_r+0xb0>
 80016e2:	2000      	movs	r0, #0
 80016e4:	e7f7      	b.n	80016d6 <__swsetup_r+0xba>
 80016e6:	bf00      	nop
 80016e8:	20000064 	.word	0x20000064
 80016ec:	08002088 	.word	0x08002088
 80016f0:	080020a8 	.word	0x080020a8
 80016f4:	08002068 	.word	0x08002068

080016f8 <abort>:
 80016f8:	b508      	push	{r3, lr}
 80016fa:	2006      	movs	r0, #6
 80016fc:	f000 fa98 	bl	8001c30 <raise>
 8001700:	2001      	movs	r0, #1
 8001702:	f000 fbb3 	bl	8001e6c <_exit>
	...

08001708 <__sflush_r>:
 8001708:	898a      	ldrh	r2, [r1, #12]
 800170a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800170e:	4605      	mov	r5, r0
 8001710:	0710      	lsls	r0, r2, #28
 8001712:	460c      	mov	r4, r1
 8001714:	d458      	bmi.n	80017c8 <__sflush_r+0xc0>
 8001716:	684b      	ldr	r3, [r1, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dc05      	bgt.n	8001728 <__sflush_r+0x20>
 800171c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	dc02      	bgt.n	8001728 <__sflush_r+0x20>
 8001722:	2000      	movs	r0, #0
 8001724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800172a:	2e00      	cmp	r6, #0
 800172c:	d0f9      	beq.n	8001722 <__sflush_r+0x1a>
 800172e:	2300      	movs	r3, #0
 8001730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001734:	682f      	ldr	r7, [r5, #0]
 8001736:	602b      	str	r3, [r5, #0]
 8001738:	d032      	beq.n	80017a0 <__sflush_r+0x98>
 800173a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800173c:	89a3      	ldrh	r3, [r4, #12]
 800173e:	075a      	lsls	r2, r3, #29
 8001740:	d505      	bpl.n	800174e <__sflush_r+0x46>
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	1ac0      	subs	r0, r0, r3
 8001746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001748:	b10b      	cbz	r3, 800174e <__sflush_r+0x46>
 800174a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800174c:	1ac0      	subs	r0, r0, r3
 800174e:	2300      	movs	r3, #0
 8001750:	4602      	mov	r2, r0
 8001752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001754:	6a21      	ldr	r1, [r4, #32]
 8001756:	4628      	mov	r0, r5
 8001758:	47b0      	blx	r6
 800175a:	1c43      	adds	r3, r0, #1
 800175c:	89a3      	ldrh	r3, [r4, #12]
 800175e:	d106      	bne.n	800176e <__sflush_r+0x66>
 8001760:	6829      	ldr	r1, [r5, #0]
 8001762:	291d      	cmp	r1, #29
 8001764:	d82c      	bhi.n	80017c0 <__sflush_r+0xb8>
 8001766:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <__sflush_r+0x108>)
 8001768:	40ca      	lsrs	r2, r1
 800176a:	07d6      	lsls	r6, r2, #31
 800176c:	d528      	bpl.n	80017c0 <__sflush_r+0xb8>
 800176e:	2200      	movs	r2, #0
 8001770:	6062      	str	r2, [r4, #4]
 8001772:	04d9      	lsls	r1, r3, #19
 8001774:	6922      	ldr	r2, [r4, #16]
 8001776:	6022      	str	r2, [r4, #0]
 8001778:	d504      	bpl.n	8001784 <__sflush_r+0x7c>
 800177a:	1c42      	adds	r2, r0, #1
 800177c:	d101      	bne.n	8001782 <__sflush_r+0x7a>
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	b903      	cbnz	r3, 8001784 <__sflush_r+0x7c>
 8001782:	6560      	str	r0, [r4, #84]	; 0x54
 8001784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001786:	602f      	str	r7, [r5, #0]
 8001788:	2900      	cmp	r1, #0
 800178a:	d0ca      	beq.n	8001722 <__sflush_r+0x1a>
 800178c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001790:	4299      	cmp	r1, r3
 8001792:	d002      	beq.n	800179a <__sflush_r+0x92>
 8001794:	4628      	mov	r0, r5
 8001796:	f7ff f91b 	bl	80009d0 <_free_r>
 800179a:	2000      	movs	r0, #0
 800179c:	6360      	str	r0, [r4, #52]	; 0x34
 800179e:	e7c1      	b.n	8001724 <__sflush_r+0x1c>
 80017a0:	6a21      	ldr	r1, [r4, #32]
 80017a2:	2301      	movs	r3, #1
 80017a4:	4628      	mov	r0, r5
 80017a6:	47b0      	blx	r6
 80017a8:	1c41      	adds	r1, r0, #1
 80017aa:	d1c7      	bne.n	800173c <__sflush_r+0x34>
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0c4      	beq.n	800173c <__sflush_r+0x34>
 80017b2:	2b1d      	cmp	r3, #29
 80017b4:	d001      	beq.n	80017ba <__sflush_r+0xb2>
 80017b6:	2b16      	cmp	r3, #22
 80017b8:	d101      	bne.n	80017be <__sflush_r+0xb6>
 80017ba:	602f      	str	r7, [r5, #0]
 80017bc:	e7b1      	b.n	8001722 <__sflush_r+0x1a>
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c4:	81a3      	strh	r3, [r4, #12]
 80017c6:	e7ad      	b.n	8001724 <__sflush_r+0x1c>
 80017c8:	690f      	ldr	r7, [r1, #16]
 80017ca:	2f00      	cmp	r7, #0
 80017cc:	d0a9      	beq.n	8001722 <__sflush_r+0x1a>
 80017ce:	0793      	lsls	r3, r2, #30
 80017d0:	680e      	ldr	r6, [r1, #0]
 80017d2:	bf08      	it	eq
 80017d4:	694b      	ldreq	r3, [r1, #20]
 80017d6:	600f      	str	r7, [r1, #0]
 80017d8:	bf18      	it	ne
 80017da:	2300      	movne	r3, #0
 80017dc:	eba6 0807 	sub.w	r8, r6, r7
 80017e0:	608b      	str	r3, [r1, #8]
 80017e2:	f1b8 0f00 	cmp.w	r8, #0
 80017e6:	dd9c      	ble.n	8001722 <__sflush_r+0x1a>
 80017e8:	6a21      	ldr	r1, [r4, #32]
 80017ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017ec:	4643      	mov	r3, r8
 80017ee:	463a      	mov	r2, r7
 80017f0:	4628      	mov	r0, r5
 80017f2:	47b0      	blx	r6
 80017f4:	2800      	cmp	r0, #0
 80017f6:	dc06      	bgt.n	8001806 <__sflush_r+0xfe>
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017fe:	81a3      	strh	r3, [r4, #12]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	e78e      	b.n	8001724 <__sflush_r+0x1c>
 8001806:	4407      	add	r7, r0
 8001808:	eba8 0800 	sub.w	r8, r8, r0
 800180c:	e7e9      	b.n	80017e2 <__sflush_r+0xda>
 800180e:	bf00      	nop
 8001810:	20400001 	.word	0x20400001

08001814 <_fflush_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	690b      	ldr	r3, [r1, #16]
 8001818:	4605      	mov	r5, r0
 800181a:	460c      	mov	r4, r1
 800181c:	b913      	cbnz	r3, 8001824 <_fflush_r+0x10>
 800181e:	2500      	movs	r5, #0
 8001820:	4628      	mov	r0, r5
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	b118      	cbz	r0, 800182e <_fflush_r+0x1a>
 8001826:	6983      	ldr	r3, [r0, #24]
 8001828:	b90b      	cbnz	r3, 800182e <_fflush_r+0x1a>
 800182a:	f000 f887 	bl	800193c <__sinit>
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <_fflush_r+0x6c>)
 8001830:	429c      	cmp	r4, r3
 8001832:	d11b      	bne.n	800186c <_fflush_r+0x58>
 8001834:	686c      	ldr	r4, [r5, #4]
 8001836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ef      	beq.n	800181e <_fflush_r+0xa>
 800183e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001840:	07d0      	lsls	r0, r2, #31
 8001842:	d404      	bmi.n	800184e <_fflush_r+0x3a>
 8001844:	0599      	lsls	r1, r3, #22
 8001846:	d402      	bmi.n	800184e <_fflush_r+0x3a>
 8001848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800184a:	f000 f915 	bl	8001a78 <__retarget_lock_acquire_recursive>
 800184e:	4628      	mov	r0, r5
 8001850:	4621      	mov	r1, r4
 8001852:	f7ff ff59 	bl	8001708 <__sflush_r>
 8001856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001858:	07da      	lsls	r2, r3, #31
 800185a:	4605      	mov	r5, r0
 800185c:	d4e0      	bmi.n	8001820 <_fflush_r+0xc>
 800185e:	89a3      	ldrh	r3, [r4, #12]
 8001860:	059b      	lsls	r3, r3, #22
 8001862:	d4dd      	bmi.n	8001820 <_fflush_r+0xc>
 8001864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001866:	f000 f908 	bl	8001a7a <__retarget_lock_release_recursive>
 800186a:	e7d9      	b.n	8001820 <_fflush_r+0xc>
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <_fflush_r+0x70>)
 800186e:	429c      	cmp	r4, r3
 8001870:	d101      	bne.n	8001876 <_fflush_r+0x62>
 8001872:	68ac      	ldr	r4, [r5, #8]
 8001874:	e7df      	b.n	8001836 <_fflush_r+0x22>
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <_fflush_r+0x74>)
 8001878:	429c      	cmp	r4, r3
 800187a:	bf08      	it	eq
 800187c:	68ec      	ldreq	r4, [r5, #12]
 800187e:	e7da      	b.n	8001836 <_fflush_r+0x22>
 8001880:	08002088 	.word	0x08002088
 8001884:	080020a8 	.word	0x080020a8
 8001888:	08002068 	.word	0x08002068

0800188c <std>:
 800188c:	2300      	movs	r3, #0
 800188e:	b510      	push	{r4, lr}
 8001890:	4604      	mov	r4, r0
 8001892:	e9c0 3300 	strd	r3, r3, [r0]
 8001896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800189a:	6083      	str	r3, [r0, #8]
 800189c:	8181      	strh	r1, [r0, #12]
 800189e:	6643      	str	r3, [r0, #100]	; 0x64
 80018a0:	81c2      	strh	r2, [r0, #14]
 80018a2:	6183      	str	r3, [r0, #24]
 80018a4:	4619      	mov	r1, r3
 80018a6:	2208      	movs	r2, #8
 80018a8:	305c      	adds	r0, #92	; 0x5c
 80018aa:	f7ff f889 	bl	80009c0 <memset>
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <std+0x38>)
 80018b0:	6263      	str	r3, [r4, #36]	; 0x24
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <std+0x3c>)
 80018b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <std+0x40>)
 80018b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <std+0x44>)
 80018bc:	6224      	str	r4, [r4, #32]
 80018be:	6323      	str	r3, [r4, #48]	; 0x30
 80018c0:	bd10      	pop	{r4, pc}
 80018c2:	bf00      	nop
 80018c4:	08001c69 	.word	0x08001c69
 80018c8:	08001c8b 	.word	0x08001c8b
 80018cc:	08001cc3 	.word	0x08001cc3
 80018d0:	08001ce7 	.word	0x08001ce7

080018d4 <_cleanup_r>:
 80018d4:	4901      	ldr	r1, [pc, #4]	; (80018dc <_cleanup_r+0x8>)
 80018d6:	f000 b8af 	b.w	8001a38 <_fwalk_reent>
 80018da:	bf00      	nop
 80018dc:	08001815 	.word	0x08001815

080018e0 <__sfmoreglue>:
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	1e4a      	subs	r2, r1, #1
 80018e4:	2568      	movs	r5, #104	; 0x68
 80018e6:	4355      	muls	r5, r2
 80018e8:	460e      	mov	r6, r1
 80018ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018ee:	f7ff f8bf 	bl	8000a70 <_malloc_r>
 80018f2:	4604      	mov	r4, r0
 80018f4:	b140      	cbz	r0, 8001908 <__sfmoreglue+0x28>
 80018f6:	2100      	movs	r1, #0
 80018f8:	e9c0 1600 	strd	r1, r6, [r0]
 80018fc:	300c      	adds	r0, #12
 80018fe:	60a0      	str	r0, [r4, #8]
 8001900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001904:	f7ff f85c 	bl	80009c0 <memset>
 8001908:	4620      	mov	r0, r4
 800190a:	bd70      	pop	{r4, r5, r6, pc}

0800190c <__sfp_lock_acquire>:
 800190c:	4801      	ldr	r0, [pc, #4]	; (8001914 <__sfp_lock_acquire+0x8>)
 800190e:	f000 b8b3 	b.w	8001a78 <__retarget_lock_acquire_recursive>
 8001912:	bf00      	nop
 8001914:	200002a8 	.word	0x200002a8

08001918 <__sfp_lock_release>:
 8001918:	4801      	ldr	r0, [pc, #4]	; (8001920 <__sfp_lock_release+0x8>)
 800191a:	f000 b8ae 	b.w	8001a7a <__retarget_lock_release_recursive>
 800191e:	bf00      	nop
 8001920:	200002a8 	.word	0x200002a8

08001924 <__sinit_lock_acquire>:
 8001924:	4801      	ldr	r0, [pc, #4]	; (800192c <__sinit_lock_acquire+0x8>)
 8001926:	f000 b8a7 	b.w	8001a78 <__retarget_lock_acquire_recursive>
 800192a:	bf00      	nop
 800192c:	200002a3 	.word	0x200002a3

08001930 <__sinit_lock_release>:
 8001930:	4801      	ldr	r0, [pc, #4]	; (8001938 <__sinit_lock_release+0x8>)
 8001932:	f000 b8a2 	b.w	8001a7a <__retarget_lock_release_recursive>
 8001936:	bf00      	nop
 8001938:	200002a3 	.word	0x200002a3

0800193c <__sinit>:
 800193c:	b510      	push	{r4, lr}
 800193e:	4604      	mov	r4, r0
 8001940:	f7ff fff0 	bl	8001924 <__sinit_lock_acquire>
 8001944:	69a3      	ldr	r3, [r4, #24]
 8001946:	b11b      	cbz	r3, 8001950 <__sinit+0x14>
 8001948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800194c:	f7ff bff0 	b.w	8001930 <__sinit_lock_release>
 8001950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001954:	6523      	str	r3, [r4, #80]	; 0x50
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <__sinit+0x68>)
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <__sinit+0x6c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	62a2      	str	r2, [r4, #40]	; 0x28
 800195e:	42a3      	cmp	r3, r4
 8001960:	bf04      	itt	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	61a3      	streq	r3, [r4, #24]
 8001966:	4620      	mov	r0, r4
 8001968:	f000 f820 	bl	80019ac <__sfp>
 800196c:	6060      	str	r0, [r4, #4]
 800196e:	4620      	mov	r0, r4
 8001970:	f000 f81c 	bl	80019ac <__sfp>
 8001974:	60a0      	str	r0, [r4, #8]
 8001976:	4620      	mov	r0, r4
 8001978:	f000 f818 	bl	80019ac <__sfp>
 800197c:	2200      	movs	r2, #0
 800197e:	60e0      	str	r0, [r4, #12]
 8001980:	2104      	movs	r1, #4
 8001982:	6860      	ldr	r0, [r4, #4]
 8001984:	f7ff ff82 	bl	800188c <std>
 8001988:	68a0      	ldr	r0, [r4, #8]
 800198a:	2201      	movs	r2, #1
 800198c:	2109      	movs	r1, #9
 800198e:	f7ff ff7d 	bl	800188c <std>
 8001992:	68e0      	ldr	r0, [r4, #12]
 8001994:	2202      	movs	r2, #2
 8001996:	2112      	movs	r1, #18
 8001998:	f7ff ff78 	bl	800188c <std>
 800199c:	2301      	movs	r3, #1
 800199e:	61a3      	str	r3, [r4, #24]
 80019a0:	e7d2      	b.n	8001948 <__sinit+0xc>
 80019a2:	bf00      	nop
 80019a4:	08001f7c 	.word	0x08001f7c
 80019a8:	080018d5 	.word	0x080018d5

080019ac <__sfp>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	4607      	mov	r7, r0
 80019b0:	f7ff ffac 	bl	800190c <__sfp_lock_acquire>
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <__sfp+0x84>)
 80019b6:	681e      	ldr	r6, [r3, #0]
 80019b8:	69b3      	ldr	r3, [r6, #24]
 80019ba:	b913      	cbnz	r3, 80019c2 <__sfp+0x16>
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff ffbd 	bl	800193c <__sinit>
 80019c2:	3648      	adds	r6, #72	; 0x48
 80019c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	d503      	bpl.n	80019d4 <__sfp+0x28>
 80019cc:	6833      	ldr	r3, [r6, #0]
 80019ce:	b30b      	cbz	r3, 8001a14 <__sfp+0x68>
 80019d0:	6836      	ldr	r6, [r6, #0]
 80019d2:	e7f7      	b.n	80019c4 <__sfp+0x18>
 80019d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019d8:	b9d5      	cbnz	r5, 8001a10 <__sfp+0x64>
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <__sfp+0x88>)
 80019dc:	60e3      	str	r3, [r4, #12]
 80019de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019e2:	6665      	str	r5, [r4, #100]	; 0x64
 80019e4:	f000 f847 	bl	8001a76 <__retarget_lock_init_recursive>
 80019e8:	f7ff ff96 	bl	8001918 <__sfp_lock_release>
 80019ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80019f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019f4:	6025      	str	r5, [r4, #0]
 80019f6:	61a5      	str	r5, [r4, #24]
 80019f8:	2208      	movs	r2, #8
 80019fa:	4629      	mov	r1, r5
 80019fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a00:	f7fe ffde 	bl	80009c0 <memset>
 8001a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a10:	3468      	adds	r4, #104	; 0x68
 8001a12:	e7d9      	b.n	80019c8 <__sfp+0x1c>
 8001a14:	2104      	movs	r1, #4
 8001a16:	4638      	mov	r0, r7
 8001a18:	f7ff ff62 	bl	80018e0 <__sfmoreglue>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	6030      	str	r0, [r6, #0]
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1d5      	bne.n	80019d0 <__sfp+0x24>
 8001a24:	f7ff ff78 	bl	8001918 <__sfp_lock_release>
 8001a28:	230c      	movs	r3, #12
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	e7ee      	b.n	8001a0c <__sfp+0x60>
 8001a2e:	bf00      	nop
 8001a30:	08001f7c 	.word	0x08001f7c
 8001a34:	ffff0001 	.word	0xffff0001

08001a38 <_fwalk_reent>:
 8001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	4688      	mov	r8, r1
 8001a40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a44:	2700      	movs	r7, #0
 8001a46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a4a:	f1b9 0901 	subs.w	r9, r9, #1
 8001a4e:	d505      	bpl.n	8001a5c <_fwalk_reent+0x24>
 8001a50:	6824      	ldr	r4, [r4, #0]
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	d1f7      	bne.n	8001a46 <_fwalk_reent+0xe>
 8001a56:	4638      	mov	r0, r7
 8001a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a5c:	89ab      	ldrh	r3, [r5, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d907      	bls.n	8001a72 <_fwalk_reent+0x3a>
 8001a62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a66:	3301      	adds	r3, #1
 8001a68:	d003      	beq.n	8001a72 <_fwalk_reent+0x3a>
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	47c0      	blx	r8
 8001a70:	4307      	orrs	r7, r0
 8001a72:	3568      	adds	r5, #104	; 0x68
 8001a74:	e7e9      	b.n	8001a4a <_fwalk_reent+0x12>

08001a76 <__retarget_lock_init_recursive>:
 8001a76:	4770      	bx	lr

08001a78 <__retarget_lock_acquire_recursive>:
 8001a78:	4770      	bx	lr

08001a7a <__retarget_lock_release_recursive>:
 8001a7a:	4770      	bx	lr

08001a7c <__swhatbuf_r>:
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	460e      	mov	r6, r1
 8001a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a84:	2900      	cmp	r1, #0
 8001a86:	b096      	sub	sp, #88	; 0x58
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	da07      	bge.n	8001a9e <__swhatbuf_r+0x22>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	89b3      	ldrh	r3, [r6, #12]
 8001a94:	061a      	lsls	r2, r3, #24
 8001a96:	d410      	bmi.n	8001aba <__swhatbuf_r+0x3e>
 8001a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9c:	e00e      	b.n	8001abc <__swhatbuf_r+0x40>
 8001a9e:	466a      	mov	r2, sp
 8001aa0:	f000 f948 	bl	8001d34 <_fstat_r>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	dbf2      	blt.n	8001a8e <__swhatbuf_r+0x12>
 8001aa8:	9a01      	ldr	r2, [sp, #4]
 8001aaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001aae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ab2:	425a      	negs	r2, r3
 8001ab4:	415a      	adcs	r2, r3
 8001ab6:	602a      	str	r2, [r5, #0]
 8001ab8:	e7ee      	b.n	8001a98 <__swhatbuf_r+0x1c>
 8001aba:	2340      	movs	r3, #64	; 0x40
 8001abc:	2000      	movs	r0, #0
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	b016      	add	sp, #88	; 0x58
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}

08001ac4 <__smakebuf_r>:
 8001ac4:	898b      	ldrh	r3, [r1, #12]
 8001ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ac8:	079d      	lsls	r5, r3, #30
 8001aca:	4606      	mov	r6, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	d507      	bpl.n	8001ae0 <__smakebuf_r+0x1c>
 8001ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ad4:	6023      	str	r3, [r4, #0]
 8001ad6:	6123      	str	r3, [r4, #16]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	6163      	str	r3, [r4, #20]
 8001adc:	b002      	add	sp, #8
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
 8001ae0:	ab01      	add	r3, sp, #4
 8001ae2:	466a      	mov	r2, sp
 8001ae4:	f7ff ffca 	bl	8001a7c <__swhatbuf_r>
 8001ae8:	9900      	ldr	r1, [sp, #0]
 8001aea:	4605      	mov	r5, r0
 8001aec:	4630      	mov	r0, r6
 8001aee:	f7fe ffbf 	bl	8000a70 <_malloc_r>
 8001af2:	b948      	cbnz	r0, 8001b08 <__smakebuf_r+0x44>
 8001af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001af8:	059a      	lsls	r2, r3, #22
 8001afa:	d4ef      	bmi.n	8001adc <__smakebuf_r+0x18>
 8001afc:	f023 0303 	bic.w	r3, r3, #3
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	81a3      	strh	r3, [r4, #12]
 8001b06:	e7e3      	b.n	8001ad0 <__smakebuf_r+0xc>
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <__smakebuf_r+0x7c>)
 8001b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	6020      	str	r0, [r4, #0]
 8001b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	6163      	str	r3, [r4, #20]
 8001b1a:	9b01      	ldr	r3, [sp, #4]
 8001b1c:	6120      	str	r0, [r4, #16]
 8001b1e:	b15b      	cbz	r3, 8001b38 <__smakebuf_r+0x74>
 8001b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b24:	4630      	mov	r0, r6
 8001b26:	f000 f917 	bl	8001d58 <_isatty_r>
 8001b2a:	b128      	cbz	r0, 8001b38 <__smakebuf_r+0x74>
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	f023 0303 	bic.w	r3, r3, #3
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	81a3      	strh	r3, [r4, #12]
 8001b38:	89a0      	ldrh	r0, [r4, #12]
 8001b3a:	4305      	orrs	r5, r0
 8001b3c:	81a5      	strh	r5, [r4, #12]
 8001b3e:	e7cd      	b.n	8001adc <__smakebuf_r+0x18>
 8001b40:	080018d5 	.word	0x080018d5

08001b44 <memcpy>:
 8001b44:	440a      	add	r2, r1
 8001b46:	4291      	cmp	r1, r2
 8001b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b4c:	d100      	bne.n	8001b50 <memcpy+0xc>
 8001b4e:	4770      	bx	lr
 8001b50:	b510      	push	{r4, lr}
 8001b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b5a:	4291      	cmp	r1, r2
 8001b5c:	d1f9      	bne.n	8001b52 <memcpy+0xe>
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <memmove>:
 8001b60:	4288      	cmp	r0, r1
 8001b62:	b510      	push	{r4, lr}
 8001b64:	eb01 0402 	add.w	r4, r1, r2
 8001b68:	d902      	bls.n	8001b70 <memmove+0x10>
 8001b6a:	4284      	cmp	r4, r0
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	d807      	bhi.n	8001b80 <memmove+0x20>
 8001b70:	1e43      	subs	r3, r0, #1
 8001b72:	42a1      	cmp	r1, r4
 8001b74:	d008      	beq.n	8001b88 <memmove+0x28>
 8001b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b7e:	e7f8      	b.n	8001b72 <memmove+0x12>
 8001b80:	4402      	add	r2, r0
 8001b82:	4601      	mov	r1, r0
 8001b84:	428a      	cmp	r2, r1
 8001b86:	d100      	bne.n	8001b8a <memmove+0x2a>
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b92:	e7f7      	b.n	8001b84 <memmove+0x24>

08001b94 <_realloc_r>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	4607      	mov	r7, r0
 8001b98:	4614      	mov	r4, r2
 8001b9a:	460e      	mov	r6, r1
 8001b9c:	b921      	cbnz	r1, 8001ba8 <_realloc_r+0x14>
 8001b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	f7fe bf64 	b.w	8000a70 <_malloc_r>
 8001ba8:	b922      	cbnz	r2, 8001bb4 <_realloc_r+0x20>
 8001baa:	f7fe ff11 	bl	80009d0 <_free_r>
 8001bae:	4625      	mov	r5, r4
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb4:	f000 f8f2 	bl	8001d9c <_malloc_usable_size_r>
 8001bb8:	42a0      	cmp	r0, r4
 8001bba:	d20f      	bcs.n	8001bdc <_realloc_r+0x48>
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	f7fe ff56 	bl	8000a70 <_malloc_r>
 8001bc4:	4605      	mov	r5, r0
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d0f2      	beq.n	8001bb0 <_realloc_r+0x1c>
 8001bca:	4631      	mov	r1, r6
 8001bcc:	4622      	mov	r2, r4
 8001bce:	f7ff ffb9 	bl	8001b44 <memcpy>
 8001bd2:	4631      	mov	r1, r6
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	f7fe fefb 	bl	80009d0 <_free_r>
 8001bda:	e7e9      	b.n	8001bb0 <_realloc_r+0x1c>
 8001bdc:	4635      	mov	r5, r6
 8001bde:	e7e7      	b.n	8001bb0 <_realloc_r+0x1c>

08001be0 <_raise_r>:
 8001be0:	291f      	cmp	r1, #31
 8001be2:	b538      	push	{r3, r4, r5, lr}
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	d904      	bls.n	8001bf4 <_raise_r+0x14>
 8001bea:	2316      	movs	r3, #22
 8001bec:	6003      	str	r3, [r0, #0]
 8001bee:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}
 8001bf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001bf6:	b112      	cbz	r2, 8001bfe <_raise_r+0x1e>
 8001bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001bfc:	b94b      	cbnz	r3, 8001c12 <_raise_r+0x32>
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f000 f830 	bl	8001c64 <_getpid_r>
 8001c04:	462a      	mov	r2, r5
 8001c06:	4601      	mov	r1, r0
 8001c08:	4620      	mov	r0, r4
 8001c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c0e:	f000 b817 	b.w	8001c40 <_kill_r>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d00a      	beq.n	8001c2c <_raise_r+0x4c>
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	d103      	bne.n	8001c22 <_raise_r+0x42>
 8001c1a:	2316      	movs	r3, #22
 8001c1c:	6003      	str	r3, [r0, #0]
 8001c1e:	2001      	movs	r0, #1
 8001c20:	e7e7      	b.n	8001bf2 <_raise_r+0x12>
 8001c22:	2400      	movs	r4, #0
 8001c24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001c28:	4628      	mov	r0, r5
 8001c2a:	4798      	blx	r3
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e7e0      	b.n	8001bf2 <_raise_r+0x12>

08001c30 <raise>:
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <raise+0xc>)
 8001c32:	4601      	mov	r1, r0
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	f7ff bfd3 	b.w	8001be0 <_raise_r>
 8001c3a:	bf00      	nop
 8001c3c:	20000064 	.word	0x20000064

08001c40 <_kill_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4d07      	ldr	r5, [pc, #28]	; (8001c60 <_kill_r+0x20>)
 8001c44:	2300      	movs	r3, #0
 8001c46:	4604      	mov	r4, r0
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	f000 f8df 	bl	8001e10 <_kill>
 8001c52:	1c43      	adds	r3, r0, #1
 8001c54:	d102      	bne.n	8001c5c <_kill_r+0x1c>
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	b103      	cbz	r3, 8001c5c <_kill_r+0x1c>
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	bd38      	pop	{r3, r4, r5, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000029c 	.word	0x2000029c

08001c64 <_getpid_r>:
 8001c64:	f000 b8c4 	b.w	8001df0 <_getpid>

08001c68 <__sread>:
 8001c68:	b510      	push	{r4, lr}
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c70:	f000 f89c 	bl	8001dac <_read_r>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	bfab      	itete	ge
 8001c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c7c:	181b      	addge	r3, r3, r0
 8001c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c82:	bfac      	ite	ge
 8001c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c86:	81a3      	strhlt	r3, [r4, #12]
 8001c88:	bd10      	pop	{r4, pc}

08001c8a <__swrite>:
 8001c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8e:	461f      	mov	r7, r3
 8001c90:	898b      	ldrh	r3, [r1, #12]
 8001c92:	05db      	lsls	r3, r3, #23
 8001c94:	4605      	mov	r5, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4616      	mov	r6, r2
 8001c9a:	d505      	bpl.n	8001ca8 <__swrite+0x1e>
 8001c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f000 f868 	bl	8001d78 <_lseek_r>
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb2:	81a3      	strh	r3, [r4, #12]
 8001cb4:	4632      	mov	r2, r6
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4628      	mov	r0, r5
 8001cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cbe:	f000 b817 	b.w	8001cf0 <_write_r>

08001cc2 <__sseek>:
 8001cc2:	b510      	push	{r4, lr}
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cca:	f000 f855 	bl	8001d78 <_lseek_r>
 8001cce:	1c43      	adds	r3, r0, #1
 8001cd0:	89a3      	ldrh	r3, [r4, #12]
 8001cd2:	bf15      	itete	ne
 8001cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cde:	81a3      	strheq	r3, [r4, #12]
 8001ce0:	bf18      	it	ne
 8001ce2:	81a3      	strhne	r3, [r4, #12]
 8001ce4:	bd10      	pop	{r4, pc}

08001ce6 <__sclose>:
 8001ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cea:	f000 b813 	b.w	8001d14 <_close_r>
	...

08001cf0 <_write_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4d07      	ldr	r5, [pc, #28]	; (8001d10 <_write_r+0x20>)
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4608      	mov	r0, r1
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	602a      	str	r2, [r5, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f000 f8ac 	bl	8001e5c <_write>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d102      	bne.n	8001d0e <_write_r+0x1e>
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	b103      	cbz	r3, 8001d0e <_write_r+0x1e>
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	2000029c 	.word	0x2000029c

08001d14 <_close_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4d06      	ldr	r5, [pc, #24]	; (8001d30 <_close_r+0x1c>)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	602b      	str	r3, [r5, #0]
 8001d20:	f000 f856 	bl	8001dd0 <_close>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d102      	bne.n	8001d2e <_close_r+0x1a>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	b103      	cbz	r3, 8001d2e <_close_r+0x1a>
 8001d2c:	6023      	str	r3, [r4, #0]
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	2000029c 	.word	0x2000029c

08001d34 <_fstat_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4d07      	ldr	r5, [pc, #28]	; (8001d54 <_fstat_r+0x20>)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4611      	mov	r1, r2
 8001d40:	602b      	str	r3, [r5, #0]
 8001d42:	f000 f84d 	bl	8001de0 <_fstat>
 8001d46:	1c43      	adds	r3, r0, #1
 8001d48:	d102      	bne.n	8001d50 <_fstat_r+0x1c>
 8001d4a:	682b      	ldr	r3, [r5, #0]
 8001d4c:	b103      	cbz	r3, 8001d50 <_fstat_r+0x1c>
 8001d4e:	6023      	str	r3, [r4, #0]
 8001d50:	bd38      	pop	{r3, r4, r5, pc}
 8001d52:	bf00      	nop
 8001d54:	2000029c 	.word	0x2000029c

08001d58 <_isatty_r>:
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d06      	ldr	r5, [pc, #24]	; (8001d74 <_isatty_r+0x1c>)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4604      	mov	r4, r0
 8001d60:	4608      	mov	r0, r1
 8001d62:	602b      	str	r3, [r5, #0]
 8001d64:	f000 f84c 	bl	8001e00 <_isatty>
 8001d68:	1c43      	adds	r3, r0, #1
 8001d6a:	d102      	bne.n	8001d72 <_isatty_r+0x1a>
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	b103      	cbz	r3, 8001d72 <_isatty_r+0x1a>
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
 8001d74:	2000029c 	.word	0x2000029c

08001d78 <_lseek_r>:
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	4d07      	ldr	r5, [pc, #28]	; (8001d98 <_lseek_r+0x20>)
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	602a      	str	r2, [r5, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	f000 f84a 	bl	8001e20 <_lseek>
 8001d8c:	1c43      	adds	r3, r0, #1
 8001d8e:	d102      	bne.n	8001d96 <_lseek_r+0x1e>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	b103      	cbz	r3, 8001d96 <_lseek_r+0x1e>
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	bd38      	pop	{r3, r4, r5, pc}
 8001d98:	2000029c 	.word	0x2000029c

08001d9c <_malloc_usable_size_r>:
 8001d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001da0:	1f18      	subs	r0, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bfbc      	itt	lt
 8001da6:	580b      	ldrlt	r3, [r1, r0]
 8001da8:	18c0      	addlt	r0, r0, r3
 8001daa:	4770      	bx	lr

08001dac <_read_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	4d07      	ldr	r5, [pc, #28]	; (8001dcc <_read_r+0x20>)
 8001db0:	4604      	mov	r4, r0
 8001db2:	4608      	mov	r0, r1
 8001db4:	4611      	mov	r1, r2
 8001db6:	2200      	movs	r2, #0
 8001db8:	602a      	str	r2, [r5, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f000 f838 	bl	8001e30 <_read>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	d102      	bne.n	8001dca <_read_r+0x1e>
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	b103      	cbz	r3, 8001dca <_read_r+0x1e>
 8001dc8:	6023      	str	r3, [r4, #0]
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	2000029c 	.word	0x2000029c

08001dd0 <_close>:
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <_close+0xc>)
 8001dd2:	2258      	movs	r2, #88	; 0x58
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	4770      	bx	lr
 8001ddc:	2000029c 	.word	0x2000029c

08001de0 <_fstat>:
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <_fstat+0xc>)
 8001de2:	2258      	movs	r2, #88	; 0x58
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dea:	4770      	bx	lr
 8001dec:	2000029c 	.word	0x2000029c

08001df0 <_getpid>:
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <_getpid+0xc>)
 8001df2:	2258      	movs	r2, #88	; 0x58
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfa:	4770      	bx	lr
 8001dfc:	2000029c 	.word	0x2000029c

08001e00 <_isatty>:
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <_isatty+0xc>)
 8001e02:	2258      	movs	r2, #88	; 0x58
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	2000      	movs	r0, #0
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000029c 	.word	0x2000029c

08001e10 <_kill>:
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <_kill+0xc>)
 8001e12:	2258      	movs	r2, #88	; 0x58
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1a:	4770      	bx	lr
 8001e1c:	2000029c 	.word	0x2000029c

08001e20 <_lseek>:
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <_lseek+0xc>)
 8001e22:	2258      	movs	r2, #88	; 0x58
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2a:	4770      	bx	lr
 8001e2c:	2000029c 	.word	0x2000029c

08001e30 <_read>:
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <_read+0xc>)
 8001e32:	2258      	movs	r2, #88	; 0x58
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	4770      	bx	lr
 8001e3c:	2000029c 	.word	0x2000029c

08001e40 <_sbrk>:
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <_sbrk+0x14>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	4602      	mov	r2, r0
 8001e46:	b909      	cbnz	r1, 8001e4c <_sbrk+0xc>
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <_sbrk+0x18>)
 8001e4a:	6019      	str	r1, [r3, #0]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	4402      	add	r2, r0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	4770      	bx	lr
 8001e54:	20000280 	.word	0x20000280
 8001e58:	200002b0 	.word	0x200002b0

08001e5c <_write>:
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <_write+0xc>)
 8001e5e:	2258      	movs	r2, #88	; 0x58
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f04f 30ff 	mov.w	r0, #4294967295
 8001e66:	4770      	bx	lr
 8001e68:	2000029c 	.word	0x2000029c

08001e6c <_exit>:
 8001e6c:	e7fe      	b.n	8001e6c <_exit>
	...

08001e70 <_init>:
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	bf00      	nop
 8001e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e76:	bc08      	pop	{r3}
 8001e78:	469e      	mov	lr, r3
 8001e7a:	4770      	bx	lr

08001e7c <_fini>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	bf00      	nop
 8001e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e82:	bc08      	pop	{r3}
 8001e84:	469e      	mov	lr, r3
 8001e86:	4770      	bx	lr
