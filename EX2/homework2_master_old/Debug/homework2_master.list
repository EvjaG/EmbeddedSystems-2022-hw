
homework2_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002148  08002148  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08002148  08002148  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002148  08002148  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08002150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200000c8  08002218  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08002218  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030ab  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e0  00000000  00000000  000231a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00023988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00023a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aff  00000000  00000000  00023b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000181c  00000000  00000000  0003c62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008741b  00000000  00000000  0003de4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f58  00000000  00000000  000c52bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000c6214  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000c62e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ed0 	.word	0x08001ed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	08001ed0 	.word	0x08001ed0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <power>:
 *
 * */
char format[100] = "-time HH:MM:SS\nWhere:\n\t0<=HH<=24\n\t0<=MM<60\n\t0<=SS<60";

// power function
int power(int a,int b){
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	int toReturn=1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	e007      	b.n	80002e0 <power+0x24>
		toReturn*=a;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	3301      	adds	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	dbf3      	blt.n	80002d0 <power+0x14>
	return toReturn;
 80002e8:	68fb      	ldr	r3, [r7, #12]
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
	...

080002f8 <validateTime>:

int validateTime(char* input){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b092      	sub	sp, #72	; 0x48
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	//parse string - check for correct format
	int len;
	int colon_count=0;
 8000300:	2300      	movs	r3, #0
 8000302:	643b      	str	r3, [r7, #64]	; 0x40
	int func_count=0;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
	int space_count=0;
 8000308:	2300      	movs	r3, #0
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
	for (len = 0; input[len] != '\0'; len++){ // were checking to see what punctual the user used in the hour he put inside
 800030c:	2300      	movs	r3, #0
 800030e:	647b      	str	r3, [r7, #68]	; 0x44
 8000310:	e025      	b.n	800035e <validateTime+0x66>
		if(input[len]==':') colon_count++;
 8000312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b3a      	cmp	r3, #58	; 0x3a
 800031c:	d102      	bne.n	8000324 <validateTime+0x2c>
 800031e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000320:	3301      	adds	r3, #1
 8000322:	643b      	str	r3, [r7, #64]	; 0x40
		if(input[len]==' ') space_count++;
 8000324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b20      	cmp	r3, #32
 800032e:	d102      	bne.n	8000336 <validateTime+0x3e>
 8000330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000332:	3301      	adds	r3, #1
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
		if(input[len]=='-'){
 8000336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b2d      	cmp	r3, #45	; 0x2d
 8000340:	d10a      	bne.n	8000358 <validateTime+0x60>
			if(len>0 || func_count)
 8000342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000344:	2b00      	cmp	r3, #0
 8000346:	dc02      	bgt.n	800034e <validateTime+0x56>
 8000348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <validateTime+0x5a>
				return 0;
 800034e:	2300      	movs	r3, #0
 8000350:	e087      	b.n	8000462 <validateTime+0x16a>
			func_count++;
 8000352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000354:	3301      	adds	r3, #1
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (len = 0; input[len] != '\0'; len++){ // were checking to see what punctual the user used in the hour he put inside
 8000358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800035a:	3301      	adds	r3, #1
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
 800035e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1d3      	bne.n	8000312 <validateTime+0x1a>
		}

	}
	if(colon_count != 2 || func_count != 1 || input[0] != '-') return -1; // we check if the input stands in the format we want if not we return a msg.
 800036a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800036c:	2b02      	cmp	r3, #2
 800036e:	d106      	bne.n	800037e <validateTime+0x86>
 8000370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000372:	2b01      	cmp	r3, #1
 8000374:	d103      	bne.n	800037e <validateTime+0x86>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b2d      	cmp	r3, #45	; 0x2d
 800037c:	d002      	beq.n	8000384 <validateTime+0x8c>
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	e06e      	b.n	8000462 <validateTime+0x16a>
	//if func call not in system
	if(strstr(input,"-time")==NULL)
 8000384:	4939      	ldr	r1, [pc, #228]	; (800046c <validateTime+0x174>)
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 fc0c 	bl	8000ba4 <strstr>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d102      	bne.n	8000398 <validateTime+0xa0>
		return -1;
 8000392:	f04f 33ff 	mov.w	r3, #4294967295
 8000396:	e064      	b.n	8000462 <validateTime+0x16a>

	//check string inputs
	char *token = strtok(input, " "); // doin manipulation over the string we recieved. (swaping all the panctual to " ")
 8000398:	4935      	ldr	r1, [pc, #212]	; (8000470 <validateTime+0x178>)
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 fc1a 	bl	8000bd4 <strtok>
 80003a0:	6378      	str	r0, [r7, #52]	; 0x34
	token = strtok(NULL, ":");
 80003a2:	4934      	ldr	r1, [pc, #208]	; (8000474 <validateTime+0x17c>)
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fc15 	bl	8000bd4 <strtok>
 80003aa:	6378      	str	r0, [r7, #52]	; 0x34

	int j=0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	633b      	str	r3, [r7, #48]	; 0x30
	int modArr[3]={24,60,60}; // we put each digit in the right place in our array and perfrmoing MOD action to make sure the hour is in bounds
 80003b0:	4a31      	ldr	r2, [pc, #196]	; (8000478 <validateTime+0x180>)
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80003b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int timeArr[3]={0,0,0};
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

	while (token != NULL)
 80003c8:	e047      	b.n	800045a <validateTime+0x162>
	{
        int sum=0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 80003ce:	2300      	movs	r3, #0
 80003d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80003d2:	e020      	b.n	8000416 <validateTime+0x11e>
			int c = token[i];
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003d8:	4413      	add	r3, r2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
			if(c<48 || c>57) //check if char is digit
 80003de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e0:	2b2f      	cmp	r3, #47	; 0x2f
 80003e2:	dd02      	ble.n	80003ea <validateTime+0xf2>
 80003e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e6:	2b39      	cmp	r3, #57	; 0x39
 80003e8:	dd01      	ble.n	80003ee <validateTime+0xf6>
				return 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	e039      	b.n	8000462 <validateTime+0x16a>
			c-=48;
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	3b30      	subs	r3, #48	; 0x30
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
			sum+=c*power(10, 2-(i+1));
 80003f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f6:	f1c3 0301 	rsb	r3, r3, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	200a      	movs	r0, #10
 80003fe:	f7ff ff5d 	bl	80002bc <power>
 8000402:	4602      	mov	r2, r0
 8000404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000406:	fb03 f302 	mul.w	r3, r3, r2
 800040a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800040c:	4413      	add	r3, r2
 800040e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 8000410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000412:	3301      	adds	r3, #1
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
 8000416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000418:	2b01      	cmp	r3, #1
 800041a:	dddb      	ble.n	80003d4 <validateTime+0xdc>
		}
		if(sum<0 || sum>=modArr[j])
 800041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800041e:	2b00      	cmp	r3, #0
 8000420:	db09      	blt.n	8000436 <validateTime+0x13e>
 8000422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800042a:	4413      	add	r3, r2
 800042c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000432:	429a      	cmp	r2, r3
 8000434:	db01      	blt.n	800043a <validateTime+0x142>
			return 0;
 8000436:	2300      	movs	r3, #0
 8000438:	e013      	b.n	8000462 <validateTime+0x16a>
//		printf("sum:\t%d\n",sum);
		timeArr[j]=sum;
 800043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000442:	4413      	add	r3, r2
 8000444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000446:	f843 2c3c 	str.w	r2, [r3, #-60]

		token = strtok(NULL, ":");
 800044a:	490a      	ldr	r1, [pc, #40]	; (8000474 <validateTime+0x17c>)
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fbc1 	bl	8000bd4 <strtok>
 8000452:	6378      	str	r0, [r7, #52]	; 0x34
		j++;
 8000454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000456:	3301      	adds	r3, #1
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
	while (token != NULL)
 800045a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1b4      	bne.n	80003ca <validateTime+0xd2>
	}
	return 1;
 8000460:	2301      	movs	r3, #1
}
 8000462:	4618      	mov	r0, r3
 8000464:	3748      	adds	r7, #72	; 0x48
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	08001ee8 	.word	0x08001ee8
 8000470:	08001ef0 	.word	0x08001ef0
 8000474:	08001ef4 	.word	0x08001ef4
 8000478:	08001ef8 	.word	0x08001ef8

0800047c <returnHour>:



//this will be the button interrupt function
char* returnHour(){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	char timeFromSlave[8];
    SPI_Receive(timeFromSlave,8);
 8000482:	463b      	mov	r3, r7
 8000484:	2108      	movs	r1, #8
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f9ce 	bl	8000828 <SPI_Receive>
	return timeFromSlave;
 800048c:	2300      	movs	r3, #0
}
 800048e:	4618      	mov	r0, r3
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <inputTime>:
//this will be the function from reading the input from the user
//return 0 if fail, otherwise return 1
int inputTime(char* input){
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	char * tosend = (char*) malloc((sizeof(char)*7));
 80004a0:	2007      	movs	r0, #7
 80004a2:	f000 faad 	bl	8000a00 <malloc>
 80004a6:	4603      	mov	r3, r0
 80004a8:	60fb      	str	r3, [r7, #12]
	for(int i = 0,j=6;i<6;j++){
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	2306      	movs	r3, #6
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	e013      	b.n	80004dc <inputTime+0x44>
		if(input[j]!= ':'){
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b3a      	cmp	r3, #58	; 0x3a
 80004be:	d00a      	beq.n	80004d6 <inputTime+0x3e>
			tosend[i] = input[j];
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	441a      	add	r2, r3
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	68f9      	ldr	r1, [r7, #12]
 80004ca:	440b      	add	r3, r1
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	701a      	strb	r2, [r3, #0]
			i++;
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	3301      	adds	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
	for(int i = 0,j=6;i<6;j++){
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	3301      	adds	r3, #1
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	2b05      	cmp	r3, #5
 80004e0:	dde8      	ble.n	80004b4 <inputTime+0x1c>
		}
	}
	tosend[6] = '\0';
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3306      	adds	r3, #6
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	print("in inputTime tosend is = %s\n",tosend);
 80004ea:	68f9      	ldr	r1, [r7, #12]
 80004ec:	480a      	ldr	r0, [pc, #40]	; (8000518 <inputTime+0x80>)
 80004ee:	f000 f9c1 	bl	8000874 <print>
	if(validateTime(input) == 1){
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ff00 	bl	80002f8 <validateTime>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d105      	bne.n	800050a <inputTime+0x72>
		SPI_Transmit(tosend,6);
 80004fe:	2106      	movs	r1, #6
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f000 f959 	bl	80007b8 <SPI_Transmit>
		return 1;
 8000506:	2301      	movs	r3, #1
 8000508:	e001      	b.n	800050e <inputTime+0x76>
	}
	else{
//		print("in inputTime validation failed\n");
		return -1;
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	08001f04 	.word	0x08001f04

0800051c <EXTI15_10_IRQHandler>:


//// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <EXTI15_10_IRQHandler+0x30>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <EXTI15_10_IRQHandler+0x30>)
 8000528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800052c:	6153      	str	r3, [r2, #20]
	// TODO - function to retrieve time from secondary machine
	char* toPrint = returnHour();
 800052e:	f7ff ffa5 	bl	800047c <returnHour>
 8000532:	6078      	str	r0, [r7, #4]
	print("%s\n",toPrint);
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <EXTI15_10_IRQHandler+0x34>)
 8000538:	f000 f99c 	bl	8000874 <print>
	free(toPrint);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 fa67 	bl	8000a10 <free>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010400 	.word	0x40010400
 8000550:	08001f24 	.word	0x08001f24

08000554 <USART2_EXTI26_IRQHandler>:

//--------------------------------------------------------UART input handler function
void USART2_EXTI26_IRQHandler(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

	if(RX_BUF_PLACE >= RX_BUF_SIZE)
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <USART2_EXTI26_IRQHandler+0x6c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b13      	cmp	r3, #19
 8000560:	dd02      	ble.n	8000568 <USART2_EXTI26_IRQHandler+0x14>
		RX_BUF_PLACE=0;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <USART2_EXTI26_IRQHandler+0x6c>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
	char newChar = (uint8_t)USART2->RDR;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <USART2_EXTI26_IRQHandler+0x70>)
 800056a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800056c:	b29b      	uxth	r3, r3
 800056e:	71fb      	strb	r3, [r7, #7]
	if(newChar==(uint8_t)'\0' || newChar==(uint8_t)'\n' || newChar==(uint8_t)'\r'){
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d005      	beq.n	8000582 <USART2_EXTI26_IRQHandler+0x2e>
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b0a      	cmp	r3, #10
 800057a:	d002      	beq.n	8000582 <USART2_EXTI26_IRQHandler+0x2e>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b0d      	cmp	r3, #13
 8000580:	d112      	bne.n	80005a8 <USART2_EXTI26_IRQHandler+0x54>
		if (inputTime(RX_BUF)!=1)
 8000582:	4811      	ldr	r0, [pc, #68]	; (80005c8 <USART2_EXTI26_IRQHandler+0x74>)
 8000584:	f7ff ff88 	bl	8000498 <inputTime>
 8000588:	4603      	mov	r3, r0
 800058a:	2b01      	cmp	r3, #1
 800058c:	d003      	beq.n	8000596 <USART2_EXTI26_IRQHandler+0x42>
			print("To change time please input in the following format  it:\t%s\n",format);
 800058e:	490f      	ldr	r1, [pc, #60]	; (80005cc <USART2_EXTI26_IRQHandler+0x78>)
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <USART2_EXTI26_IRQHandler+0x7c>)
 8000592:	f000 f96f 	bl	8000874 <print>
		RX_BUF_PLACE=0;
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <USART2_EXTI26_IRQHandler+0x6c>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
		memset(RX_BUF,'\0',RX_BUF_SIZE);
 800059c:	2214      	movs	r2, #20
 800059e:	2100      	movs	r1, #0
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <USART2_EXTI26_IRQHandler+0x74>)
 80005a2:	f000 fa3d 	bl	8000a20 <memset>
		return;
 80005a6:	e007      	b.n	80005b8 <USART2_EXTI26_IRQHandler+0x64>
	}
	RX_BUF[RX_BUF_PLACE++]=newChar;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <USART2_EXTI26_IRQHandler+0x6c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <USART2_EXTI26_IRQHandler+0x6c>)
 80005b0:	600a      	str	r2, [r1, #0]
 80005b2:	4905      	ldr	r1, [pc, #20]	; (80005c8 <USART2_EXTI26_IRQHandler+0x74>)
 80005b4:	79fa      	ldrb	r2, [r7, #7]
 80005b6:	54ca      	strb	r2, [r1, r3]

}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000298 	.word	0x20000298
 80005c4:	40004400 	.word	0x40004400
 80005c8:	20000284 	.word	0x20000284
 80005cc:	20000000 	.word	0x20000000
 80005d0:	08001f28 	.word	0x08001f28

080005d4 <SPI1_IRQHandler>:


//--------------------------------------------------------SPI1 interrupt handler function
void SPI1_IRQHandler(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	memset(timeFromSlave,'\0',9);
 80005d8:	2209      	movs	r2, #9
 80005da:	2100      	movs	r1, #0
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <SPI1_IRQHandler+0x1c>)
 80005de:	f000 fa1f 	bl	8000a20 <memset>
	SPI_Receive(timeFromSlave,8);
 80005e2:	2108      	movs	r1, #8
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <SPI1_IRQHandler+0x1c>)
 80005e6:	f000 f91f 	bl	8000828 <SPI_Receive>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <main>:


// ------------------------------------------------------ Main
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000E0000;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <main+0x104>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a3e      	ldr	r2, [pc, #248]	; (80006f8 <main+0x104>)
 80005fe:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000602:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 8000604:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <main+0x104>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a3b      	ldr	r2, [pc, #236]	; (80006f8 <main+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 8000610:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <main+0x104>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a38      	ldr	r2, [pc, #224]	; (80006f8 <main+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 800061c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <main+0x108>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <main+0x108>)
 8000632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000636:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <main+0x108>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <main+0x108>)
 800063e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000642:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <main+0x10c>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a2d      	ldr	r2, [pc, #180]	; (8000700 <main+0x10c>)
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	6153      	str	r3, [r2, #20]
//    NVIC_EnableIRQ(EXTI15_10_IRQn); // enable button - core interrupt
// ------------------------------------------------------
    // Configure GPIOA pin 5 as output, 0 as input.
    GPIOA->MODER |= 0x00000400;
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065e:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 0 as input.
//    GPIOA->MODER &= ~0x00000003;
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000021; // (1 << 5);
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 800066e:	6053      	str	r3, [r2, #4]
//    GPIOA->ODR &= ~0x1;

    USART2_init();
 8000670:	f000 f918 	bl	80008a4 <USART2_init>
	SPI1_init();
 8000674:	f000 f854 	bl	8000720 <SPI1_init>
    NVIC_EnableIRQ(USART2_IRQn); //usart2 rx interrupt function enable
 8000678:	2026      	movs	r0, #38	; 0x26
 800067a:	f7ff fe01 	bl	8000280 <__NVIC_EnableIRQ>
    print("Hello!\nThis is the primary machine in the 2-machine exercise you are running!\n");
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <main+0x110>)
 8000680:	f000 f8f8 	bl	8000874 <print>
    print("To change time please input in the following format  it:\t%s\n",format);
 8000684:	4920      	ldr	r1, [pc, #128]	; (8000708 <main+0x114>)
 8000686:	4821      	ldr	r0, [pc, #132]	; (800070c <main+0x118>)
 8000688:	f000 f8f4 	bl	8000874 <print>
	memset(timeFromSlave,'\0',9);
 800068c:	2209      	movs	r2, #9
 800068e:	2100      	movs	r1, #0
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <main+0x11c>)
 8000692:	f000 f9c5 	bl	8000a20 <memset>

	while(1){
		memset(timeFromSlave,'\0',9);
 8000696:	2209      	movs	r2, #9
 8000698:	2100      	movs	r1, #0
 800069a:	481d      	ldr	r0, [pc, #116]	; (8000710 <main+0x11c>)
 800069c:	f000 f9c0 	bl	8000a20 <memset>
		if((GPIOA->IDR&0x100)==0x100){
 80006a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ae:	d103      	bne.n	80006b8 <main+0xc4>
			kdet = 1;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <main+0x120>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e002      	b.n	80006be <main+0xca>
		}
		else{
			kdet = 0;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <main+0x120>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
		}
		if(kdet_prev != kdet){
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <main+0x124>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <main+0x120>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d0e5      	beq.n	8000696 <main+0xa2>
			SPI_Receive(timeFromSlave, 8);
 80006ca:	2108      	movs	r1, #8
 80006cc:	4810      	ldr	r0, [pc, #64]	; (8000710 <main+0x11c>)
 80006ce:	f000 f8ab 	bl	8000828 <SPI_Receive>
			if(timeFromSlave[2] == ':'){
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <main+0x11c>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	2b3a      	cmp	r3, #58	; 0x3a
 80006d8:	d108      	bne.n	80006ec <main+0xf8>
				print("We just detect a movement at %s\n",timeFromSlave);
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <main+0x11c>)
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x128>)
 80006de:	f000 f8c9 	bl	8000874 <print>
				memset(timeFromSlave,'\0',9);
 80006e2:	2209      	movs	r2, #9
 80006e4:	2100      	movs	r1, #0
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <main+0x11c>)
 80006e8:	f000 f99a 	bl	8000a20 <memset>
			}
			kdet_prev = kdet;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <main+0x120>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <main+0x124>)
 80006f2:	6013      	str	r3, [r2, #0]
		memset(timeFromSlave,'\0',9);
 80006f4:	e7cf      	b.n	8000696 <main+0xa2>
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010400 	.word	0x40010400
 8000700:	40010000 	.word	0x40010000
 8000704:	08001f68 	.word	0x08001f68
 8000708:	20000000 	.word	0x20000000
 800070c:	08001f28 	.word	0x08001f28
 8000710:	200000e4 	.word	0x200000e4
 8000714:	200000f0 	.word	0x200000f0
 8000718:	200000f4 	.word	0x200000f4
 800071c:	08001fb8 	.word	0x08001fb8

08000720 <SPI1_init>:
int A_Buffer_PLACE=0;



void SPI1_init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	//TODO - initialize SPI values (page 962 of user manual)
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	2100      	movs	r1, #0
 8000728:	481e      	ldr	r0, [pc, #120]	; (80007a4 <SPI1_init+0x84>)
 800072a:	f000 f979 	bl	8000a20 <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	2100      	movs	r1, #0
 8000732:	481d      	ldr	r0, [pc, #116]	; (80007a8 <SPI1_init+0x88>)
 8000734:	f000 f974 	bl	8000a20 <memset>
	*SPI_B_Buffer='\0';
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <SPI1_init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]

	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <SPI1_init+0x8c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <SPI1_init+0x8c>)
 8000744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000748:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 800074a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000754:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 8000758:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 800075a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000764:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000768:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800076c:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000080; // Configure GPIOB pins 3  as alternate function 5, which is SPI1.
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <SPI1_init+0x90>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <SPI1_init+0x90>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PB3
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <SPI1_init+0x90>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <SPI1_init+0x90>)
 8000780:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000784:	6213      	str	r3, [r2, #32]
	SPI1->CR2 |= 0x000000044;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <SPI1_init+0x94>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SPI1_init+0x94>)
 800078c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000790:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x00000007C;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <SPI1_init+0x94>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <SPI1_init+0x94>)
 8000798:	f043 037c 	orr.w	r3, r3, #124	; 0x7c
 800079c:	6013      	str	r3, [r2, #0]

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000f8 	.word	0x200000f8
 80007a8:	20000178 	.word	0x20000178
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400
 80007b4:	40013000 	.word	0x40013000

080007b8 <SPI_Transmit>:


void SPI_Transmit (char *data, int size)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]

	int i=0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
	while (i<size){
 80007c6:	e021      	b.n	800080c <SPI_Transmit+0x54>
	   SPI1->DR = (uint8_t)data[i];  // load the data into the Data Register
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <SPI_Transmit+0x68>)
 80007d2:	60da      	str	r2, [r3, #12]
	   print("in SPI_Transmit data[%d] = %c\n",i,data[i]);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	68f9      	ldr	r1, [r7, #12]
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <SPI_Transmit+0x6c>)
 80007e2:	f000 f847 	bl	8000874 <print>
	   while((SPI1->SR&0x3)!=0x3 && (SPI1->SR&0x80)!=0x80){}
 80007e6:	bf00      	nop
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <SPI_Transmit+0x68>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 0303 	and.w	r3, r3, #3
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d005      	beq.n	8000800 <SPI_Transmit+0x48>
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <SPI_Transmit+0x68>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fc:	2b80      	cmp	r3, #128	; 0x80
 80007fe:	d1f3      	bne.n	80007e8 <SPI_Transmit+0x30>
	   uint8_t temp = SPI1->DR;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <SPI_Transmit+0x68>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	72fb      	strb	r3, [r7, #11]
	   i++;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
	while (i<size){
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbd9      	blt.n	80007c8 <SPI_Transmit+0x10>
	}

}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40013000 	.word	0x40013000
 8000824:	08001fdc 	.word	0x08001fdc

08000828 <SPI_Receive>:

void SPI_Receive (char *data, int size)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
//	print("in SPI_Receive\n");
	while (size){
 8000832:	e013      	b.n	800085c <SPI_Receive+0x34>
//		print("in SPI_Receive size = %d\n",size);
		SPI1->DR = 0;  // send dummy data
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <SPI_Receive+0x48>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
		while((SPI1->SR&0x3)!=0x3){}
 800083a:	bf00      	nop
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <SPI_Receive+0x48>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	2b03      	cmp	r3, #3
 8000846:	d1f9      	bne.n	800083c <SPI_Receive+0x14>
		*data++ = (SPI1->DR);
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <SPI_Receive+0x48>)
 800084a:	68d9      	ldr	r1, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
		size--;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	603b      	str	r3, [r7, #0]
	while (size){
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1e8      	bne.n	8000834 <SPI_Receive+0xc>
	}
//	print("in SPI_Receive data recived = %s\n",data);

}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40013000 	.word	0x40013000

08000874 <print>:
 8000874:	b40f      	push	{r0, r1, r2, r3}
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6939      	ldr	r1, [r7, #16]
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <print+0x2c>)
 8000888:	f000 fa16 	bl	8000cb8 <vsiprintf>
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <print+0x2c>)
 800088e:	f000 f847 	bl	8000920 <USART2_print>
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800089c:	b004      	add	sp, #16
 800089e:	4770      	bx	lr
 80008a0:	200001f8 	.word	0x200001f8

080008a4 <USART2_init>:
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <USART2_init+0x6c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <USART2_init+0x6c>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b2:	6153      	str	r3, [r2, #20]
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <USART2_init+0x6c>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	4a15      	ldr	r2, [pc, #84]	; (8000910 <USART2_init+0x6c>)
 80008ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ca:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d4:	6a1b      	ldr	r3, [r3, #32]
 80008d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008da:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80008de:	6213      	str	r3, [r2, #32]
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <USART2_init+0x70>)
 80008e2:	f240 3241 	movw	r2, #833	; 0x341
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <USART2_init+0x70>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	2214      	movs	r2, #20
 80008f0:	2100      	movs	r1, #0
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <USART2_init+0x74>)
 80008f4:	f000 f894 	bl	8000a20 <memset>
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <USART2_init+0x78>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <USART2_init+0x70>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <USART2_init+0x70>)
 8000904:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	40004400 	.word	0x40004400
 8000918:	20000284 	.word	0x20000284
 800091c:	20000298 	.word	0x20000298

08000920 <USART2_print>:
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	e00e      	b.n	8000948 <USART2_print+0x28>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <USART2_print+0x40>)
 8000930:	b292      	uxth	r2, r2
 8000932:	851a      	strh	r2, [r3, #40]	; 0x28
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3301      	adds	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	bf00      	nop
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <USART2_print+0x40>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f9      	beq.n	800093c <USART2_print+0x1c>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1ec      	bne.n	800092a <USART2_print+0xa>
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40004400 	.word	0x40004400

08000964 <Reset_Handler>:
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
 8000966:	4685      	mov	sp, r0
 8000968:	f3af 8000 	nop.w
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopForever+0x6>)
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopForever+0xa>)
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopForever+0xe>)
 8000972:	2300      	movs	r3, #0
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:
 8000976:	58d4      	ldr	r4, [r2, r3]
 8000978:	50c4      	str	r4, [r0, r3]
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:
 800097c:	18c4      	adds	r4, r0, r3
 800097e:	428c      	cmp	r4, r1
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopForever+0x12>)
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopForever+0x16>)
 8000986:	2300      	movs	r3, #0
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:
 800098e:	42a2      	cmp	r2, r4
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>
 8000992:	f000 f811 	bl	80009b8 <__libc_init_array>
 8000996:	f7ff fe2d 	bl	80005f4 <main>

0800099a <LoopForever>:
 800099a:	e7fe      	b.n	800099a <LoopForever>
 800099c:	20010000 	.word	0x20010000
 80009a0:	20000000 	.word	0x20000000
 80009a4:	200000c8 	.word	0x200000c8
 80009a8:	08002150 	.word	0x08002150
 80009ac:	200000c8 	.word	0x200000c8
 80009b0:	200002ac 	.word	0x200002ac

080009b4 <ADC1_2_IRQHandler>:
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>
	...

080009b8 <__libc_init_array>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	4d0d      	ldr	r5, [pc, #52]	; (80009f0 <__libc_init_array+0x38>)
 80009bc:	4c0d      	ldr	r4, [pc, #52]	; (80009f4 <__libc_init_array+0x3c>)
 80009be:	1b64      	subs	r4, r4, r5
 80009c0:	10a4      	asrs	r4, r4, #2
 80009c2:	2600      	movs	r6, #0
 80009c4:	42a6      	cmp	r6, r4
 80009c6:	d109      	bne.n	80009dc <__libc_init_array+0x24>
 80009c8:	4d0b      	ldr	r5, [pc, #44]	; (80009f8 <__libc_init_array+0x40>)
 80009ca:	4c0c      	ldr	r4, [pc, #48]	; (80009fc <__libc_init_array+0x44>)
 80009cc:	f001 fa80 	bl	8001ed0 <_init>
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	10a4      	asrs	r4, r4, #2
 80009d4:	2600      	movs	r6, #0
 80009d6:	42a6      	cmp	r6, r4
 80009d8:	d105      	bne.n	80009e6 <__libc_init_array+0x2e>
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e0:	4798      	blx	r3
 80009e2:	3601      	adds	r6, #1
 80009e4:	e7ee      	b.n	80009c4 <__libc_init_array+0xc>
 80009e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ea:	4798      	blx	r3
 80009ec:	3601      	adds	r6, #1
 80009ee:	e7f2      	b.n	80009d6 <__libc_init_array+0x1e>
 80009f0:	08002148 	.word	0x08002148
 80009f4:	08002148 	.word	0x08002148
 80009f8:	08002148 	.word	0x08002148
 80009fc:	0800214c 	.word	0x0800214c

08000a00 <malloc>:
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <malloc+0xc>)
 8000a02:	4601      	mov	r1, r0
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	f000 b863 	b.w	8000ad0 <_malloc_r>
 8000a0a:	bf00      	nop
 8000a0c:	20000064 	.word	0x20000064

08000a10 <free>:
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <free+0xc>)
 8000a12:	4601      	mov	r1, r0
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	f000 b80b 	b.w	8000a30 <_free_r>
 8000a1a:	bf00      	nop
 8000a1c:	20000064 	.word	0x20000064

08000a20 <memset>:
 8000a20:	4402      	add	r2, r0
 8000a22:	4603      	mov	r3, r0
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d100      	bne.n	8000a2a <memset+0xa>
 8000a28:	4770      	bx	lr
 8000a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a2e:	e7f9      	b.n	8000a24 <memset+0x4>

08000a30 <_free_r>:
 8000a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d048      	beq.n	8000ac8 <_free_r+0x98>
 8000a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a3a:	9001      	str	r0, [sp, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8000a42:	bfb8      	it	lt
 8000a44:	18e4      	addlt	r4, r4, r3
 8000a46:	f000 f971 	bl	8000d2c <__malloc_lock>
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <_free_r+0x9c>)
 8000a4c:	9801      	ldr	r0, [sp, #4]
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	4615      	mov	r5, r2
 8000a52:	b933      	cbnz	r3, 8000a62 <_free_r+0x32>
 8000a54:	6063      	str	r3, [r4, #4]
 8000a56:	6014      	str	r4, [r2, #0]
 8000a58:	b003      	add	sp, #12
 8000a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a5e:	f000 b96b 	b.w	8000d38 <__malloc_unlock>
 8000a62:	42a3      	cmp	r3, r4
 8000a64:	d90b      	bls.n	8000a7e <_free_r+0x4e>
 8000a66:	6821      	ldr	r1, [r4, #0]
 8000a68:	1862      	adds	r2, r4, r1
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	bf04      	itt	eq
 8000a6e:	681a      	ldreq	r2, [r3, #0]
 8000a70:	685b      	ldreq	r3, [r3, #4]
 8000a72:	6063      	str	r3, [r4, #4]
 8000a74:	bf04      	itt	eq
 8000a76:	1852      	addeq	r2, r2, r1
 8000a78:	6022      	streq	r2, [r4, #0]
 8000a7a:	602c      	str	r4, [r5, #0]
 8000a7c:	e7ec      	b.n	8000a58 <_free_r+0x28>
 8000a7e:	461a      	mov	r2, r3
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	b10b      	cbz	r3, 8000a88 <_free_r+0x58>
 8000a84:	42a3      	cmp	r3, r4
 8000a86:	d9fa      	bls.n	8000a7e <_free_r+0x4e>
 8000a88:	6811      	ldr	r1, [r2, #0]
 8000a8a:	1855      	adds	r5, r2, r1
 8000a8c:	42a5      	cmp	r5, r4
 8000a8e:	d10b      	bne.n	8000aa8 <_free_r+0x78>
 8000a90:	6824      	ldr	r4, [r4, #0]
 8000a92:	4421      	add	r1, r4
 8000a94:	1854      	adds	r4, r2, r1
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	6011      	str	r1, [r2, #0]
 8000a9a:	d1dd      	bne.n	8000a58 <_free_r+0x28>
 8000a9c:	681c      	ldr	r4, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	6053      	str	r3, [r2, #4]
 8000aa2:	4421      	add	r1, r4
 8000aa4:	6011      	str	r1, [r2, #0]
 8000aa6:	e7d7      	b.n	8000a58 <_free_r+0x28>
 8000aa8:	d902      	bls.n	8000ab0 <_free_r+0x80>
 8000aaa:	230c      	movs	r3, #12
 8000aac:	6003      	str	r3, [r0, #0]
 8000aae:	e7d3      	b.n	8000a58 <_free_r+0x28>
 8000ab0:	6825      	ldr	r5, [r4, #0]
 8000ab2:	1961      	adds	r1, r4, r5
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	bf04      	itt	eq
 8000ab8:	6819      	ldreq	r1, [r3, #0]
 8000aba:	685b      	ldreq	r3, [r3, #4]
 8000abc:	6063      	str	r3, [r4, #4]
 8000abe:	bf04      	itt	eq
 8000ac0:	1949      	addeq	r1, r1, r5
 8000ac2:	6021      	streq	r1, [r4, #0]
 8000ac4:	6054      	str	r4, [r2, #4]
 8000ac6:	e7c7      	b.n	8000a58 <_free_r+0x28>
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd30      	pop	{r4, r5, pc}
 8000acc:	20000278 	.word	0x20000278

08000ad0 <_malloc_r>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	1ccd      	adds	r5, r1, #3
 8000ad4:	f025 0503 	bic.w	r5, r5, #3
 8000ad8:	3508      	adds	r5, #8
 8000ada:	2d0c      	cmp	r5, #12
 8000adc:	bf38      	it	cc
 8000ade:	250c      	movcc	r5, #12
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	4606      	mov	r6, r0
 8000ae4:	db01      	blt.n	8000aea <_malloc_r+0x1a>
 8000ae6:	42a9      	cmp	r1, r5
 8000ae8:	d903      	bls.n	8000af2 <_malloc_r+0x22>
 8000aea:	230c      	movs	r3, #12
 8000aec:	6033      	str	r3, [r6, #0]
 8000aee:	2000      	movs	r0, #0
 8000af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af2:	f000 f91b 	bl	8000d2c <__malloc_lock>
 8000af6:	4921      	ldr	r1, [pc, #132]	; (8000b7c <_malloc_r+0xac>)
 8000af8:	680a      	ldr	r2, [r1, #0]
 8000afa:	4614      	mov	r4, r2
 8000afc:	b99c      	cbnz	r4, 8000b26 <_malloc_r+0x56>
 8000afe:	4f20      	ldr	r7, [pc, #128]	; (8000b80 <_malloc_r+0xb0>)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b923      	cbnz	r3, 8000b0e <_malloc_r+0x3e>
 8000b04:	4621      	mov	r1, r4
 8000b06:	4630      	mov	r0, r6
 8000b08:	f000 f83c 	bl	8000b84 <_sbrk_r>
 8000b0c:	6038      	str	r0, [r7, #0]
 8000b0e:	4629      	mov	r1, r5
 8000b10:	4630      	mov	r0, r6
 8000b12:	f000 f837 	bl	8000b84 <_sbrk_r>
 8000b16:	1c43      	adds	r3, r0, #1
 8000b18:	d123      	bne.n	8000b62 <_malloc_r+0x92>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	6033      	str	r3, [r6, #0]
 8000b1e:	4630      	mov	r0, r6
 8000b20:	f000 f90a 	bl	8000d38 <__malloc_unlock>
 8000b24:	e7e3      	b.n	8000aee <_malloc_r+0x1e>
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	1b5b      	subs	r3, r3, r5
 8000b2a:	d417      	bmi.n	8000b5c <_malloc_r+0x8c>
 8000b2c:	2b0b      	cmp	r3, #11
 8000b2e:	d903      	bls.n	8000b38 <_malloc_r+0x68>
 8000b30:	6023      	str	r3, [r4, #0]
 8000b32:	441c      	add	r4, r3
 8000b34:	6025      	str	r5, [r4, #0]
 8000b36:	e004      	b.n	8000b42 <_malloc_r+0x72>
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	42a2      	cmp	r2, r4
 8000b3c:	bf0c      	ite	eq
 8000b3e:	600b      	streq	r3, [r1, #0]
 8000b40:	6053      	strne	r3, [r2, #4]
 8000b42:	4630      	mov	r0, r6
 8000b44:	f000 f8f8 	bl	8000d38 <__malloc_unlock>
 8000b48:	f104 000b 	add.w	r0, r4, #11
 8000b4c:	1d23      	adds	r3, r4, #4
 8000b4e:	f020 0007 	bic.w	r0, r0, #7
 8000b52:	1ac2      	subs	r2, r0, r3
 8000b54:	d0cc      	beq.n	8000af0 <_malloc_r+0x20>
 8000b56:	1a1b      	subs	r3, r3, r0
 8000b58:	50a3      	str	r3, [r4, r2]
 8000b5a:	e7c9      	b.n	8000af0 <_malloc_r+0x20>
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	6864      	ldr	r4, [r4, #4]
 8000b60:	e7cc      	b.n	8000afc <_malloc_r+0x2c>
 8000b62:	1cc4      	adds	r4, r0, #3
 8000b64:	f024 0403 	bic.w	r4, r4, #3
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d0e3      	beq.n	8000b34 <_malloc_r+0x64>
 8000b6c:	1a21      	subs	r1, r4, r0
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f000 f808 	bl	8000b84 <_sbrk_r>
 8000b74:	3001      	adds	r0, #1
 8000b76:	d1dd      	bne.n	8000b34 <_malloc_r+0x64>
 8000b78:	e7cf      	b.n	8000b1a <_malloc_r+0x4a>
 8000b7a:	bf00      	nop
 8000b7c:	20000278 	.word	0x20000278
 8000b80:	2000027c 	.word	0x2000027c

08000b84 <_sbrk_r>:
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4d06      	ldr	r5, [pc, #24]	; (8000ba0 <_sbrk_r+0x1c>)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	602b      	str	r3, [r5, #0]
 8000b90:	f001 f986 	bl	8001ea0 <_sbrk>
 8000b94:	1c43      	adds	r3, r0, #1
 8000b96:	d102      	bne.n	8000b9e <_sbrk_r+0x1a>
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	b103      	cbz	r3, 8000b9e <_sbrk_r+0x1a>
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ba0:	2000029c 	.word	0x2000029c

08000ba4 <strstr>:
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	780c      	ldrb	r4, [r1, #0]
 8000ba8:	b164      	cbz	r4, 8000bc4 <strstr+0x20>
 8000baa:	4603      	mov	r3, r0
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	1c5e      	adds	r6, r3, #1
 8000bb2:	b90a      	cbnz	r2, 8000bb8 <strstr+0x14>
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	e005      	b.n	8000bc4 <strstr+0x20>
 8000bb8:	4294      	cmp	r4, r2
 8000bba:	d108      	bne.n	8000bce <strstr+0x2a>
 8000bbc:	460d      	mov	r5, r1
 8000bbe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8000bc2:	b902      	cbnz	r2, 8000bc6 <strstr+0x22>
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000bca:	4297      	cmp	r7, r2
 8000bcc:	d0f7      	beq.n	8000bbe <strstr+0x1a>
 8000bce:	4633      	mov	r3, r6
 8000bd0:	e7ec      	b.n	8000bac <strstr+0x8>
	...

08000bd4 <strtok>:
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <strtok+0x5c>)
 8000bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bd8:	681e      	ldr	r6, [r3, #0]
 8000bda:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8000bdc:	4605      	mov	r5, r0
 8000bde:	b9fc      	cbnz	r4, 8000c20 <strtok+0x4c>
 8000be0:	2050      	movs	r0, #80	; 0x50
 8000be2:	9101      	str	r1, [sp, #4]
 8000be4:	f7ff ff0c 	bl	8000a00 <malloc>
 8000be8:	9901      	ldr	r1, [sp, #4]
 8000bea:	65b0      	str	r0, [r6, #88]	; 0x58
 8000bec:	4602      	mov	r2, r0
 8000bee:	b920      	cbnz	r0, 8000bfa <strtok+0x26>
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <strtok+0x60>)
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <strtok+0x64>)
 8000bf4:	2157      	movs	r1, #87	; 0x57
 8000bf6:	f000 f869 	bl	8000ccc <__assert_func>
 8000bfa:	e9c0 4400 	strd	r4, r4, [r0]
 8000bfe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000c02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000c06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000c0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000c0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000c12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000c16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000c1a:	6184      	str	r4, [r0, #24]
 8000c1c:	7704      	strb	r4, [r0, #28]
 8000c1e:	6244      	str	r4, [r0, #36]	; 0x24
 8000c20:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8000c22:	2301      	movs	r3, #1
 8000c24:	4628      	mov	r0, r5
 8000c26:	b002      	add	sp, #8
 8000c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000c2c:	f000 b806 	b.w	8000c3c <__strtok_r>
 8000c30:	20000064 	.word	0x20000064
 8000c34:	08002000 	.word	0x08002000
 8000c38:	08002017 	.word	0x08002017

08000c3c <__strtok_r>:
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	b908      	cbnz	r0, 8000c44 <__strtok_r+0x8>
 8000c40:	6810      	ldr	r0, [r2, #0]
 8000c42:	b188      	cbz	r0, 8000c68 <__strtok_r+0x2c>
 8000c44:	4604      	mov	r4, r0
 8000c46:	4620      	mov	r0, r4
 8000c48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000c4c:	460f      	mov	r7, r1
 8000c4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000c52:	b91e      	cbnz	r6, 8000c5c <__strtok_r+0x20>
 8000c54:	b965      	cbnz	r5, 8000c70 <__strtok_r+0x34>
 8000c56:	6015      	str	r5, [r2, #0]
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e005      	b.n	8000c68 <__strtok_r+0x2c>
 8000c5c:	42b5      	cmp	r5, r6
 8000c5e:	d1f6      	bne.n	8000c4e <__strtok_r+0x12>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f0      	bne.n	8000c46 <__strtok_r+0xa>
 8000c64:	6014      	str	r4, [r2, #0]
 8000c66:	7003      	strb	r3, [r0, #0]
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	461c      	mov	r4, r3
 8000c6c:	e00c      	b.n	8000c88 <__strtok_r+0x4c>
 8000c6e:	b915      	cbnz	r5, 8000c76 <__strtok_r+0x3a>
 8000c70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000c74:	460e      	mov	r6, r1
 8000c76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000c7a:	42ab      	cmp	r3, r5
 8000c7c:	d1f7      	bne.n	8000c6e <__strtok_r+0x32>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f3      	beq.n	8000c6a <__strtok_r+0x2e>
 8000c82:	2300      	movs	r3, #0
 8000c84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000c88:	6014      	str	r4, [r2, #0]
 8000c8a:	e7ed      	b.n	8000c68 <__strtok_r+0x2c>

08000c8c <_vsiprintf_r>:
 8000c8c:	b500      	push	{lr}
 8000c8e:	b09b      	sub	sp, #108	; 0x6c
 8000c90:	9100      	str	r1, [sp, #0]
 8000c92:	9104      	str	r1, [sp, #16]
 8000c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c98:	9105      	str	r1, [sp, #20]
 8000c9a:	9102      	str	r1, [sp, #8]
 8000c9c:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <_vsiprintf_r+0x28>)
 8000c9e:	9103      	str	r1, [sp, #12]
 8000ca0:	4669      	mov	r1, sp
 8000ca2:	f000 f8ab 	bl	8000dfc <_svfiprintf_r>
 8000ca6:	9b00      	ldr	r3, [sp, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	b01b      	add	sp, #108	; 0x6c
 8000cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cb2:	bf00      	nop
 8000cb4:	ffff0208 	.word	0xffff0208

08000cb8 <vsiprintf>:
 8000cb8:	4613      	mov	r3, r2
 8000cba:	460a      	mov	r2, r1
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <vsiprintf+0x10>)
 8000cc0:	6800      	ldr	r0, [r0, #0]
 8000cc2:	f7ff bfe3 	b.w	8000c8c <_vsiprintf_r>
 8000cc6:	bf00      	nop
 8000cc8:	20000064 	.word	0x20000064

08000ccc <__assert_func>:
 8000ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cce:	4614      	mov	r4, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <__assert_func+0x2c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	68d8      	ldr	r0, [r3, #12]
 8000cda:	b14c      	cbz	r4, 8000cf0 <__assert_func+0x24>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__assert_func+0x30>)
 8000cde:	9100      	str	r1, [sp, #0]
 8000ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000ce4:	4906      	ldr	r1, [pc, #24]	; (8000d00 <__assert_func+0x34>)
 8000ce6:	462b      	mov	r3, r5
 8000ce8:	f000 f80e 	bl	8000d08 <fiprintf>
 8000cec:	f000 fd34 	bl	8001758 <abort>
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__assert_func+0x38>)
 8000cf2:	461c      	mov	r4, r3
 8000cf4:	e7f3      	b.n	8000cde <__assert_func+0x12>
 8000cf6:	bf00      	nop
 8000cf8:	20000064 	.word	0x20000064
 8000cfc:	08002078 	.word	0x08002078
 8000d00:	08002085 	.word	0x08002085
 8000d04:	080020b3 	.word	0x080020b3

08000d08 <fiprintf>:
 8000d08:	b40e      	push	{r1, r2, r3}
 8000d0a:	b503      	push	{r0, r1, lr}
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	ab03      	add	r3, sp, #12
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <fiprintf+0x20>)
 8000d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d16:	6800      	ldr	r0, [r0, #0]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f000 f999 	bl	8001050 <_vfiprintf_r>
 8000d1e:	b002      	add	sp, #8
 8000d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d24:	b003      	add	sp, #12
 8000d26:	4770      	bx	lr
 8000d28:	20000064 	.word	0x20000064

08000d2c <__malloc_lock>:
 8000d2c:	4801      	ldr	r0, [pc, #4]	; (8000d34 <__malloc_lock+0x8>)
 8000d2e:	f000 bed3 	b.w	8001ad8 <__retarget_lock_acquire_recursive>
 8000d32:	bf00      	nop
 8000d34:	200002a4 	.word	0x200002a4

08000d38 <__malloc_unlock>:
 8000d38:	4801      	ldr	r0, [pc, #4]	; (8000d40 <__malloc_unlock+0x8>)
 8000d3a:	f000 bece 	b.w	8001ada <__retarget_lock_release_recursive>
 8000d3e:	bf00      	nop
 8000d40:	200002a4 	.word	0x200002a4

08000d44 <__ssputs_r>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	688e      	ldr	r6, [r1, #8]
 8000d4a:	429e      	cmp	r6, r3
 8000d4c:	4682      	mov	sl, r0
 8000d4e:	460c      	mov	r4, r1
 8000d50:	4690      	mov	r8, r2
 8000d52:	461f      	mov	r7, r3
 8000d54:	d838      	bhi.n	8000dc8 <__ssputs_r+0x84>
 8000d56:	898a      	ldrh	r2, [r1, #12]
 8000d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d5c:	d032      	beq.n	8000dc4 <__ssputs_r+0x80>
 8000d5e:	6825      	ldr	r5, [r4, #0]
 8000d60:	6909      	ldr	r1, [r1, #16]
 8000d62:	eba5 0901 	sub.w	r9, r5, r1
 8000d66:	6965      	ldr	r5, [r4, #20]
 8000d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d70:	3301      	adds	r3, #1
 8000d72:	444b      	add	r3, r9
 8000d74:	106d      	asrs	r5, r5, #1
 8000d76:	429d      	cmp	r5, r3
 8000d78:	bf38      	it	cc
 8000d7a:	461d      	movcc	r5, r3
 8000d7c:	0553      	lsls	r3, r2, #21
 8000d7e:	d531      	bpl.n	8000de4 <__ssputs_r+0xa0>
 8000d80:	4629      	mov	r1, r5
 8000d82:	f7ff fea5 	bl	8000ad0 <_malloc_r>
 8000d86:	4606      	mov	r6, r0
 8000d88:	b950      	cbnz	r0, 8000da0 <__ssputs_r+0x5c>
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	f8ca 3000 	str.w	r3, [sl]
 8000d90:	89a3      	ldrh	r3, [r4, #12]
 8000d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d96:	81a3      	strh	r3, [r4, #12]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	6921      	ldr	r1, [r4, #16]
 8000da2:	464a      	mov	r2, r9
 8000da4:	f000 fefe 	bl	8001ba4 <memcpy>
 8000da8:	89a3      	ldrh	r3, [r4, #12]
 8000daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	81a3      	strh	r3, [r4, #12]
 8000db4:	6126      	str	r6, [r4, #16]
 8000db6:	6165      	str	r5, [r4, #20]
 8000db8:	444e      	add	r6, r9
 8000dba:	eba5 0509 	sub.w	r5, r5, r9
 8000dbe:	6026      	str	r6, [r4, #0]
 8000dc0:	60a5      	str	r5, [r4, #8]
 8000dc2:	463e      	mov	r6, r7
 8000dc4:	42be      	cmp	r6, r7
 8000dc6:	d900      	bls.n	8000dca <__ssputs_r+0x86>
 8000dc8:	463e      	mov	r6, r7
 8000dca:	4632      	mov	r2, r6
 8000dcc:	6820      	ldr	r0, [r4, #0]
 8000dce:	4641      	mov	r1, r8
 8000dd0:	f000 fef6 	bl	8001bc0 <memmove>
 8000dd4:	68a3      	ldr	r3, [r4, #8]
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	4432      	add	r2, r6
 8000ddc:	60a3      	str	r3, [r4, #8]
 8000dde:	6022      	str	r2, [r4, #0]
 8000de0:	2000      	movs	r0, #0
 8000de2:	e7db      	b.n	8000d9c <__ssputs_r+0x58>
 8000de4:	462a      	mov	r2, r5
 8000de6:	f000 ff05 	bl	8001bf4 <_realloc_r>
 8000dea:	4606      	mov	r6, r0
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d1e1      	bne.n	8000db4 <__ssputs_r+0x70>
 8000df0:	6921      	ldr	r1, [r4, #16]
 8000df2:	4650      	mov	r0, sl
 8000df4:	f7ff fe1c 	bl	8000a30 <_free_r>
 8000df8:	e7c7      	b.n	8000d8a <__ssputs_r+0x46>
	...

08000dfc <_svfiprintf_r>:
 8000dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e00:	4698      	mov	r8, r3
 8000e02:	898b      	ldrh	r3, [r1, #12]
 8000e04:	061b      	lsls	r3, r3, #24
 8000e06:	b09d      	sub	sp, #116	; 0x74
 8000e08:	4607      	mov	r7, r0
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4614      	mov	r4, r2
 8000e0e:	d50e      	bpl.n	8000e2e <_svfiprintf_r+0x32>
 8000e10:	690b      	ldr	r3, [r1, #16]
 8000e12:	b963      	cbnz	r3, 8000e2e <_svfiprintf_r+0x32>
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	f7ff fe5b 	bl	8000ad0 <_malloc_r>
 8000e1a:	6028      	str	r0, [r5, #0]
 8000e1c:	6128      	str	r0, [r5, #16]
 8000e1e:	b920      	cbnz	r0, 8000e2a <_svfiprintf_r+0x2e>
 8000e20:	230c      	movs	r3, #12
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	e0d1      	b.n	8000fce <_svfiprintf_r+0x1d2>
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	616b      	str	r3, [r5, #20]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9309      	str	r3, [sp, #36]	; 0x24
 8000e32:	2320      	movs	r3, #32
 8000e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e3c:	2330      	movs	r3, #48	; 0x30
 8000e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000fe8 <_svfiprintf_r+0x1ec>
 8000e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e46:	f04f 0901 	mov.w	r9, #1
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e52:	b10a      	cbz	r2, 8000e58 <_svfiprintf_r+0x5c>
 8000e54:	2a25      	cmp	r2, #37	; 0x25
 8000e56:	d1f9      	bne.n	8000e4c <_svfiprintf_r+0x50>
 8000e58:	ebba 0b04 	subs.w	fp, sl, r4
 8000e5c:	d00b      	beq.n	8000e76 <_svfiprintf_r+0x7a>
 8000e5e:	465b      	mov	r3, fp
 8000e60:	4622      	mov	r2, r4
 8000e62:	4629      	mov	r1, r5
 8000e64:	4638      	mov	r0, r7
 8000e66:	f7ff ff6d 	bl	8000d44 <__ssputs_r>
 8000e6a:	3001      	adds	r0, #1
 8000e6c:	f000 80aa 	beq.w	8000fc4 <_svfiprintf_r+0x1c8>
 8000e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e72:	445a      	add	r2, fp
 8000e74:	9209      	str	r2, [sp, #36]	; 0x24
 8000e76:	f89a 3000 	ldrb.w	r3, [sl]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80a2 	beq.w	8000fc4 <_svfiprintf_r+0x1c8>
 8000e80:	2300      	movs	r3, #0
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295
 8000e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e8a:	f10a 0a01 	add.w	sl, sl, #1
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	9307      	str	r3, [sp, #28]
 8000e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e96:	931a      	str	r3, [sp, #104]	; 0x68
 8000e98:	4654      	mov	r4, sl
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ea0:	4851      	ldr	r0, [pc, #324]	; (8000fe8 <_svfiprintf_r+0x1ec>)
 8000ea2:	f7ff f99d 	bl	80001e0 <memchr>
 8000ea6:	9a04      	ldr	r2, [sp, #16]
 8000ea8:	b9d8      	cbnz	r0, 8000ee2 <_svfiprintf_r+0xe6>
 8000eaa:	06d0      	lsls	r0, r2, #27
 8000eac:	bf44      	itt	mi
 8000eae:	2320      	movmi	r3, #32
 8000eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000eb4:	0711      	lsls	r1, r2, #28
 8000eb6:	bf44      	itt	mi
 8000eb8:	232b      	movmi	r3, #43	; 0x2b
 8000eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8000ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ec4:	d015      	beq.n	8000ef2 <_svfiprintf_r+0xf6>
 8000ec6:	9a07      	ldr	r2, [sp, #28]
 8000ec8:	4654      	mov	r4, sl
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f04f 0c0a 	mov.w	ip, #10
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ed6:	3b30      	subs	r3, #48	; 0x30
 8000ed8:	2b09      	cmp	r3, #9
 8000eda:	d94e      	bls.n	8000f7a <_svfiprintf_r+0x17e>
 8000edc:	b1b0      	cbz	r0, 8000f0c <_svfiprintf_r+0x110>
 8000ede:	9207      	str	r2, [sp, #28]
 8000ee0:	e014      	b.n	8000f0c <_svfiprintf_r+0x110>
 8000ee2:	eba0 0308 	sub.w	r3, r0, r8
 8000ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	9304      	str	r3, [sp, #16]
 8000eee:	46a2      	mov	sl, r4
 8000ef0:	e7d2      	b.n	8000e98 <_svfiprintf_r+0x9c>
 8000ef2:	9b03      	ldr	r3, [sp, #12]
 8000ef4:	1d19      	adds	r1, r3, #4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	9103      	str	r1, [sp, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bfbb      	ittet	lt
 8000efe:	425b      	neglt	r3, r3
 8000f00:	f042 0202 	orrlt.w	r2, r2, #2
 8000f04:	9307      	strge	r3, [sp, #28]
 8000f06:	9307      	strlt	r3, [sp, #28]
 8000f08:	bfb8      	it	lt
 8000f0a:	9204      	strlt	r2, [sp, #16]
 8000f0c:	7823      	ldrb	r3, [r4, #0]
 8000f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8000f10:	d10c      	bne.n	8000f2c <_svfiprintf_r+0x130>
 8000f12:	7863      	ldrb	r3, [r4, #1]
 8000f14:	2b2a      	cmp	r3, #42	; 0x2a
 8000f16:	d135      	bne.n	8000f84 <_svfiprintf_r+0x188>
 8000f18:	9b03      	ldr	r3, [sp, #12]
 8000f1a:	1d1a      	adds	r2, r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	9203      	str	r2, [sp, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bfb8      	it	lt
 8000f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f28:	3402      	adds	r4, #2
 8000f2a:	9305      	str	r3, [sp, #20]
 8000f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ff8 <_svfiprintf_r+0x1fc>
 8000f30:	7821      	ldrb	r1, [r4, #0]
 8000f32:	2203      	movs	r2, #3
 8000f34:	4650      	mov	r0, sl
 8000f36:	f7ff f953 	bl	80001e0 <memchr>
 8000f3a:	b140      	cbz	r0, 8000f4e <_svfiprintf_r+0x152>
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	eba0 000a 	sub.w	r0, r0, sl
 8000f42:	fa03 f000 	lsl.w	r0, r3, r0
 8000f46:	9b04      	ldr	r3, [sp, #16]
 8000f48:	4303      	orrs	r3, r0
 8000f4a:	3401      	adds	r4, #1
 8000f4c:	9304      	str	r3, [sp, #16]
 8000f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f52:	4826      	ldr	r0, [pc, #152]	; (8000fec <_svfiprintf_r+0x1f0>)
 8000f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f58:	2206      	movs	r2, #6
 8000f5a:	f7ff f941 	bl	80001e0 <memchr>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d038      	beq.n	8000fd4 <_svfiprintf_r+0x1d8>
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <_svfiprintf_r+0x1f4>)
 8000f64:	bb1b      	cbnz	r3, 8000fae <_svfiprintf_r+0x1b2>
 8000f66:	9b03      	ldr	r3, [sp, #12]
 8000f68:	3307      	adds	r3, #7
 8000f6a:	f023 0307 	bic.w	r3, r3, #7
 8000f6e:	3308      	adds	r3, #8
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f74:	4433      	add	r3, r6
 8000f76:	9309      	str	r3, [sp, #36]	; 0x24
 8000f78:	e767      	b.n	8000e4a <_svfiprintf_r+0x4e>
 8000f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f7e:	460c      	mov	r4, r1
 8000f80:	2001      	movs	r0, #1
 8000f82:	e7a5      	b.n	8000ed0 <_svfiprintf_r+0xd4>
 8000f84:	2300      	movs	r3, #0
 8000f86:	3401      	adds	r4, #1
 8000f88:	9305      	str	r3, [sp, #20]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0c0a 	mov.w	ip, #10
 8000f90:	4620      	mov	r0, r4
 8000f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f96:	3a30      	subs	r2, #48	; 0x30
 8000f98:	2a09      	cmp	r2, #9
 8000f9a:	d903      	bls.n	8000fa4 <_svfiprintf_r+0x1a8>
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0c5      	beq.n	8000f2c <_svfiprintf_r+0x130>
 8000fa0:	9105      	str	r1, [sp, #20]
 8000fa2:	e7c3      	b.n	8000f2c <_svfiprintf_r+0x130>
 8000fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fa8:	4604      	mov	r4, r0
 8000faa:	2301      	movs	r3, #1
 8000fac:	e7f0      	b.n	8000f90 <_svfiprintf_r+0x194>
 8000fae:	ab03      	add	r3, sp, #12
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	462a      	mov	r2, r5
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <_svfiprintf_r+0x1f8>)
 8000fb6:	a904      	add	r1, sp, #16
 8000fb8:	4638      	mov	r0, r7
 8000fba:	f3af 8000 	nop.w
 8000fbe:	1c42      	adds	r2, r0, #1
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	d1d6      	bne.n	8000f72 <_svfiprintf_r+0x176>
 8000fc4:	89ab      	ldrh	r3, [r5, #12]
 8000fc6:	065b      	lsls	r3, r3, #25
 8000fc8:	f53f af2c 	bmi.w	8000e24 <_svfiprintf_r+0x28>
 8000fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000fce:	b01d      	add	sp, #116	; 0x74
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd4:	ab03      	add	r3, sp, #12
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	462a      	mov	r2, r5
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <_svfiprintf_r+0x1f8>)
 8000fdc:	a904      	add	r1, sp, #16
 8000fde:	4638      	mov	r0, r7
 8000fe0:	f000 f9d4 	bl	800138c <_printf_i>
 8000fe4:	e7eb      	b.n	8000fbe <_svfiprintf_r+0x1c2>
 8000fe6:	bf00      	nop
 8000fe8:	080020b4 	.word	0x080020b4
 8000fec:	080020be 	.word	0x080020be
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	08000d45 	.word	0x08000d45
 8000ff8:	080020ba 	.word	0x080020ba

08000ffc <__sfputc_r>:
 8000ffc:	6893      	ldr	r3, [r2, #8]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	b410      	push	{r4}
 8001004:	6093      	str	r3, [r2, #8]
 8001006:	da08      	bge.n	800101a <__sfputc_r+0x1e>
 8001008:	6994      	ldr	r4, [r2, #24]
 800100a:	42a3      	cmp	r3, r4
 800100c:	db01      	blt.n	8001012 <__sfputc_r+0x16>
 800100e:	290a      	cmp	r1, #10
 8001010:	d103      	bne.n	800101a <__sfputc_r+0x1e>
 8001012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001016:	f000 badf 	b.w	80015d8 <__swbuf_r>
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	1c58      	adds	r0, r3, #1
 800101e:	6010      	str	r0, [r2, #0]
 8001020:	7019      	strb	r1, [r3, #0]
 8001022:	4608      	mov	r0, r1
 8001024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001028:	4770      	bx	lr

0800102a <__sfputs_r>:
 800102a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102c:	4606      	mov	r6, r0
 800102e:	460f      	mov	r7, r1
 8001030:	4614      	mov	r4, r2
 8001032:	18d5      	adds	r5, r2, r3
 8001034:	42ac      	cmp	r4, r5
 8001036:	d101      	bne.n	800103c <__sfputs_r+0x12>
 8001038:	2000      	movs	r0, #0
 800103a:	e007      	b.n	800104c <__sfputs_r+0x22>
 800103c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001040:	463a      	mov	r2, r7
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff ffda 	bl	8000ffc <__sfputc_r>
 8001048:	1c43      	adds	r3, r0, #1
 800104a:	d1f3      	bne.n	8001034 <__sfputs_r+0xa>
 800104c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001050 <_vfiprintf_r>:
 8001050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001054:	460d      	mov	r5, r1
 8001056:	b09d      	sub	sp, #116	; 0x74
 8001058:	4614      	mov	r4, r2
 800105a:	4698      	mov	r8, r3
 800105c:	4606      	mov	r6, r0
 800105e:	b118      	cbz	r0, 8001068 <_vfiprintf_r+0x18>
 8001060:	6983      	ldr	r3, [r0, #24]
 8001062:	b90b      	cbnz	r3, 8001068 <_vfiprintf_r+0x18>
 8001064:	f000 fc9a 	bl	800199c <__sinit>
 8001068:	4b89      	ldr	r3, [pc, #548]	; (8001290 <_vfiprintf_r+0x240>)
 800106a:	429d      	cmp	r5, r3
 800106c:	d11b      	bne.n	80010a6 <_vfiprintf_r+0x56>
 800106e:	6875      	ldr	r5, [r6, #4]
 8001070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001072:	07d9      	lsls	r1, r3, #31
 8001074:	d405      	bmi.n	8001082 <_vfiprintf_r+0x32>
 8001076:	89ab      	ldrh	r3, [r5, #12]
 8001078:	059a      	lsls	r2, r3, #22
 800107a:	d402      	bmi.n	8001082 <_vfiprintf_r+0x32>
 800107c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800107e:	f000 fd2b 	bl	8001ad8 <__retarget_lock_acquire_recursive>
 8001082:	89ab      	ldrh	r3, [r5, #12]
 8001084:	071b      	lsls	r3, r3, #28
 8001086:	d501      	bpl.n	800108c <_vfiprintf_r+0x3c>
 8001088:	692b      	ldr	r3, [r5, #16]
 800108a:	b9eb      	cbnz	r3, 80010c8 <_vfiprintf_r+0x78>
 800108c:	4629      	mov	r1, r5
 800108e:	4630      	mov	r0, r6
 8001090:	f000 faf4 	bl	800167c <__swsetup_r>
 8001094:	b1c0      	cbz	r0, 80010c8 <_vfiprintf_r+0x78>
 8001096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001098:	07dc      	lsls	r4, r3, #31
 800109a:	d50e      	bpl.n	80010ba <_vfiprintf_r+0x6a>
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	b01d      	add	sp, #116	; 0x74
 80010a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <_vfiprintf_r+0x244>)
 80010a8:	429d      	cmp	r5, r3
 80010aa:	d101      	bne.n	80010b0 <_vfiprintf_r+0x60>
 80010ac:	68b5      	ldr	r5, [r6, #8]
 80010ae:	e7df      	b.n	8001070 <_vfiprintf_r+0x20>
 80010b0:	4b79      	ldr	r3, [pc, #484]	; (8001298 <_vfiprintf_r+0x248>)
 80010b2:	429d      	cmp	r5, r3
 80010b4:	bf08      	it	eq
 80010b6:	68f5      	ldreq	r5, [r6, #12]
 80010b8:	e7da      	b.n	8001070 <_vfiprintf_r+0x20>
 80010ba:	89ab      	ldrh	r3, [r5, #12]
 80010bc:	0598      	lsls	r0, r3, #22
 80010be:	d4ed      	bmi.n	800109c <_vfiprintf_r+0x4c>
 80010c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010c2:	f000 fd0a 	bl	8001ada <__retarget_lock_release_recursive>
 80010c6:	e7e9      	b.n	800109c <_vfiprintf_r+0x4c>
 80010c8:	2300      	movs	r3, #0
 80010ca:	9309      	str	r3, [sp, #36]	; 0x24
 80010cc:	2320      	movs	r3, #32
 80010ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80010d6:	2330      	movs	r3, #48	; 0x30
 80010d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800129c <_vfiprintf_r+0x24c>
 80010dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010e0:	f04f 0901 	mov.w	r9, #1
 80010e4:	4623      	mov	r3, r4
 80010e6:	469a      	mov	sl, r3
 80010e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010ec:	b10a      	cbz	r2, 80010f2 <_vfiprintf_r+0xa2>
 80010ee:	2a25      	cmp	r2, #37	; 0x25
 80010f0:	d1f9      	bne.n	80010e6 <_vfiprintf_r+0x96>
 80010f2:	ebba 0b04 	subs.w	fp, sl, r4
 80010f6:	d00b      	beq.n	8001110 <_vfiprintf_r+0xc0>
 80010f8:	465b      	mov	r3, fp
 80010fa:	4622      	mov	r2, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	4630      	mov	r0, r6
 8001100:	f7ff ff93 	bl	800102a <__sfputs_r>
 8001104:	3001      	adds	r0, #1
 8001106:	f000 80aa 	beq.w	800125e <_vfiprintf_r+0x20e>
 800110a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800110c:	445a      	add	r2, fp
 800110e:	9209      	str	r2, [sp, #36]	; 0x24
 8001110:	f89a 3000 	ldrb.w	r3, [sl]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a2 	beq.w	800125e <_vfiprintf_r+0x20e>
 800111a:	2300      	movs	r3, #0
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001124:	f10a 0a01 	add.w	sl, sl, #1
 8001128:	9304      	str	r3, [sp, #16]
 800112a:	9307      	str	r3, [sp, #28]
 800112c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001130:	931a      	str	r3, [sp, #104]	; 0x68
 8001132:	4654      	mov	r4, sl
 8001134:	2205      	movs	r2, #5
 8001136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800113a:	4858      	ldr	r0, [pc, #352]	; (800129c <_vfiprintf_r+0x24c>)
 800113c:	f7ff f850 	bl	80001e0 <memchr>
 8001140:	9a04      	ldr	r2, [sp, #16]
 8001142:	b9d8      	cbnz	r0, 800117c <_vfiprintf_r+0x12c>
 8001144:	06d1      	lsls	r1, r2, #27
 8001146:	bf44      	itt	mi
 8001148:	2320      	movmi	r3, #32
 800114a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800114e:	0713      	lsls	r3, r2, #28
 8001150:	bf44      	itt	mi
 8001152:	232b      	movmi	r3, #43	; 0x2b
 8001154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001158:	f89a 3000 	ldrb.w	r3, [sl]
 800115c:	2b2a      	cmp	r3, #42	; 0x2a
 800115e:	d015      	beq.n	800118c <_vfiprintf_r+0x13c>
 8001160:	9a07      	ldr	r2, [sp, #28]
 8001162:	4654      	mov	r4, sl
 8001164:	2000      	movs	r0, #0
 8001166:	f04f 0c0a 	mov.w	ip, #10
 800116a:	4621      	mov	r1, r4
 800116c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001170:	3b30      	subs	r3, #48	; 0x30
 8001172:	2b09      	cmp	r3, #9
 8001174:	d94e      	bls.n	8001214 <_vfiprintf_r+0x1c4>
 8001176:	b1b0      	cbz	r0, 80011a6 <_vfiprintf_r+0x156>
 8001178:	9207      	str	r2, [sp, #28]
 800117a:	e014      	b.n	80011a6 <_vfiprintf_r+0x156>
 800117c:	eba0 0308 	sub.w	r3, r0, r8
 8001180:	fa09 f303 	lsl.w	r3, r9, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	9304      	str	r3, [sp, #16]
 8001188:	46a2      	mov	sl, r4
 800118a:	e7d2      	b.n	8001132 <_vfiprintf_r+0xe2>
 800118c:	9b03      	ldr	r3, [sp, #12]
 800118e:	1d19      	adds	r1, r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	9103      	str	r1, [sp, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	bfbb      	ittet	lt
 8001198:	425b      	neglt	r3, r3
 800119a:	f042 0202 	orrlt.w	r2, r2, #2
 800119e:	9307      	strge	r3, [sp, #28]
 80011a0:	9307      	strlt	r3, [sp, #28]
 80011a2:	bfb8      	it	lt
 80011a4:	9204      	strlt	r2, [sp, #16]
 80011a6:	7823      	ldrb	r3, [r4, #0]
 80011a8:	2b2e      	cmp	r3, #46	; 0x2e
 80011aa:	d10c      	bne.n	80011c6 <_vfiprintf_r+0x176>
 80011ac:	7863      	ldrb	r3, [r4, #1]
 80011ae:	2b2a      	cmp	r3, #42	; 0x2a
 80011b0:	d135      	bne.n	800121e <_vfiprintf_r+0x1ce>
 80011b2:	9b03      	ldr	r3, [sp, #12]
 80011b4:	1d1a      	adds	r2, r3, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	9203      	str	r2, [sp, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bfb8      	it	lt
 80011be:	f04f 33ff 	movlt.w	r3, #4294967295
 80011c2:	3402      	adds	r4, #2
 80011c4:	9305      	str	r3, [sp, #20]
 80011c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80012ac <_vfiprintf_r+0x25c>
 80011ca:	7821      	ldrb	r1, [r4, #0]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4650      	mov	r0, sl
 80011d0:	f7ff f806 	bl	80001e0 <memchr>
 80011d4:	b140      	cbz	r0, 80011e8 <_vfiprintf_r+0x198>
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	eba0 000a 	sub.w	r0, r0, sl
 80011dc:	fa03 f000 	lsl.w	r0, r3, r0
 80011e0:	9b04      	ldr	r3, [sp, #16]
 80011e2:	4303      	orrs	r3, r0
 80011e4:	3401      	adds	r4, #1
 80011e6:	9304      	str	r3, [sp, #16]
 80011e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <_vfiprintf_r+0x250>)
 80011ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011f2:	2206      	movs	r2, #6
 80011f4:	f7fe fff4 	bl	80001e0 <memchr>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d03f      	beq.n	800127c <_vfiprintf_r+0x22c>
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <_vfiprintf_r+0x254>)
 80011fe:	bb1b      	cbnz	r3, 8001248 <_vfiprintf_r+0x1f8>
 8001200:	9b03      	ldr	r3, [sp, #12]
 8001202:	3307      	adds	r3, #7
 8001204:	f023 0307 	bic.w	r3, r3, #7
 8001208:	3308      	adds	r3, #8
 800120a:	9303      	str	r3, [sp, #12]
 800120c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800120e:	443b      	add	r3, r7
 8001210:	9309      	str	r3, [sp, #36]	; 0x24
 8001212:	e767      	b.n	80010e4 <_vfiprintf_r+0x94>
 8001214:	fb0c 3202 	mla	r2, ip, r2, r3
 8001218:	460c      	mov	r4, r1
 800121a:	2001      	movs	r0, #1
 800121c:	e7a5      	b.n	800116a <_vfiprintf_r+0x11a>
 800121e:	2300      	movs	r3, #0
 8001220:	3401      	adds	r4, #1
 8001222:	9305      	str	r3, [sp, #20]
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 0c0a 	mov.w	ip, #10
 800122a:	4620      	mov	r0, r4
 800122c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001230:	3a30      	subs	r2, #48	; 0x30
 8001232:	2a09      	cmp	r2, #9
 8001234:	d903      	bls.n	800123e <_vfiprintf_r+0x1ee>
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0c5      	beq.n	80011c6 <_vfiprintf_r+0x176>
 800123a:	9105      	str	r1, [sp, #20]
 800123c:	e7c3      	b.n	80011c6 <_vfiprintf_r+0x176>
 800123e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001242:	4604      	mov	r4, r0
 8001244:	2301      	movs	r3, #1
 8001246:	e7f0      	b.n	800122a <_vfiprintf_r+0x1da>
 8001248:	ab03      	add	r3, sp, #12
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	462a      	mov	r2, r5
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <_vfiprintf_r+0x258>)
 8001250:	a904      	add	r1, sp, #16
 8001252:	4630      	mov	r0, r6
 8001254:	f3af 8000 	nop.w
 8001258:	4607      	mov	r7, r0
 800125a:	1c78      	adds	r0, r7, #1
 800125c:	d1d6      	bne.n	800120c <_vfiprintf_r+0x1bc>
 800125e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001260:	07d9      	lsls	r1, r3, #31
 8001262:	d405      	bmi.n	8001270 <_vfiprintf_r+0x220>
 8001264:	89ab      	ldrh	r3, [r5, #12]
 8001266:	059a      	lsls	r2, r3, #22
 8001268:	d402      	bmi.n	8001270 <_vfiprintf_r+0x220>
 800126a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800126c:	f000 fc35 	bl	8001ada <__retarget_lock_release_recursive>
 8001270:	89ab      	ldrh	r3, [r5, #12]
 8001272:	065b      	lsls	r3, r3, #25
 8001274:	f53f af12 	bmi.w	800109c <_vfiprintf_r+0x4c>
 8001278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800127a:	e711      	b.n	80010a0 <_vfiprintf_r+0x50>
 800127c:	ab03      	add	r3, sp, #12
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	462a      	mov	r2, r5
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <_vfiprintf_r+0x258>)
 8001284:	a904      	add	r1, sp, #16
 8001286:	4630      	mov	r0, r6
 8001288:	f000 f880 	bl	800138c <_printf_i>
 800128c:	e7e4      	b.n	8001258 <_vfiprintf_r+0x208>
 800128e:	bf00      	nop
 8001290:	08002108 	.word	0x08002108
 8001294:	08002128 	.word	0x08002128
 8001298:	080020e8 	.word	0x080020e8
 800129c:	080020b4 	.word	0x080020b4
 80012a0:	080020be 	.word	0x080020be
 80012a4:	00000000 	.word	0x00000000
 80012a8:	0800102b 	.word	0x0800102b
 80012ac:	080020ba 	.word	0x080020ba

080012b0 <_printf_common>:
 80012b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012b4:	4616      	mov	r6, r2
 80012b6:	4699      	mov	r9, r3
 80012b8:	688a      	ldr	r2, [r1, #8]
 80012ba:	690b      	ldr	r3, [r1, #16]
 80012bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012c0:	4293      	cmp	r3, r2
 80012c2:	bfb8      	it	lt
 80012c4:	4613      	movlt	r3, r2
 80012c6:	6033      	str	r3, [r6, #0]
 80012c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012cc:	4607      	mov	r7, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	b10a      	cbz	r2, 80012d6 <_printf_common+0x26>
 80012d2:	3301      	adds	r3, #1
 80012d4:	6033      	str	r3, [r6, #0]
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	0699      	lsls	r1, r3, #26
 80012da:	bf42      	ittt	mi
 80012dc:	6833      	ldrmi	r3, [r6, #0]
 80012de:	3302      	addmi	r3, #2
 80012e0:	6033      	strmi	r3, [r6, #0]
 80012e2:	6825      	ldr	r5, [r4, #0]
 80012e4:	f015 0506 	ands.w	r5, r5, #6
 80012e8:	d106      	bne.n	80012f8 <_printf_common+0x48>
 80012ea:	f104 0a19 	add.w	sl, r4, #25
 80012ee:	68e3      	ldr	r3, [r4, #12]
 80012f0:	6832      	ldr	r2, [r6, #0]
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	42ab      	cmp	r3, r5
 80012f6:	dc26      	bgt.n	8001346 <_printf_common+0x96>
 80012f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012fc:	1e13      	subs	r3, r2, #0
 80012fe:	6822      	ldr	r2, [r4, #0]
 8001300:	bf18      	it	ne
 8001302:	2301      	movne	r3, #1
 8001304:	0692      	lsls	r2, r2, #26
 8001306:	d42b      	bmi.n	8001360 <_printf_common+0xb0>
 8001308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800130c:	4649      	mov	r1, r9
 800130e:	4638      	mov	r0, r7
 8001310:	47c0      	blx	r8
 8001312:	3001      	adds	r0, #1
 8001314:	d01e      	beq.n	8001354 <_printf_common+0xa4>
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	68e5      	ldr	r5, [r4, #12]
 800131a:	6832      	ldr	r2, [r6, #0]
 800131c:	f003 0306 	and.w	r3, r3, #6
 8001320:	2b04      	cmp	r3, #4
 8001322:	bf08      	it	eq
 8001324:	1aad      	subeq	r5, r5, r2
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	6922      	ldr	r2, [r4, #16]
 800132a:	bf0c      	ite	eq
 800132c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001330:	2500      	movne	r5, #0
 8001332:	4293      	cmp	r3, r2
 8001334:	bfc4      	itt	gt
 8001336:	1a9b      	subgt	r3, r3, r2
 8001338:	18ed      	addgt	r5, r5, r3
 800133a:	2600      	movs	r6, #0
 800133c:	341a      	adds	r4, #26
 800133e:	42b5      	cmp	r5, r6
 8001340:	d11a      	bne.n	8001378 <_printf_common+0xc8>
 8001342:	2000      	movs	r0, #0
 8001344:	e008      	b.n	8001358 <_printf_common+0xa8>
 8001346:	2301      	movs	r3, #1
 8001348:	4652      	mov	r2, sl
 800134a:	4649      	mov	r1, r9
 800134c:	4638      	mov	r0, r7
 800134e:	47c0      	blx	r8
 8001350:	3001      	adds	r0, #1
 8001352:	d103      	bne.n	800135c <_printf_common+0xac>
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135c:	3501      	adds	r5, #1
 800135e:	e7c6      	b.n	80012ee <_printf_common+0x3e>
 8001360:	18e1      	adds	r1, r4, r3
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	2030      	movs	r0, #48	; 0x30
 8001366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800136a:	4422      	add	r2, r4
 800136c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001374:	3302      	adds	r3, #2
 8001376:	e7c7      	b.n	8001308 <_printf_common+0x58>
 8001378:	2301      	movs	r3, #1
 800137a:	4622      	mov	r2, r4
 800137c:	4649      	mov	r1, r9
 800137e:	4638      	mov	r0, r7
 8001380:	47c0      	blx	r8
 8001382:	3001      	adds	r0, #1
 8001384:	d0e6      	beq.n	8001354 <_printf_common+0xa4>
 8001386:	3601      	adds	r6, #1
 8001388:	e7d9      	b.n	800133e <_printf_common+0x8e>
	...

0800138c <_printf_i>:
 800138c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001390:	460c      	mov	r4, r1
 8001392:	4691      	mov	r9, r2
 8001394:	7e27      	ldrb	r7, [r4, #24]
 8001396:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001398:	2f78      	cmp	r7, #120	; 0x78
 800139a:	4680      	mov	r8, r0
 800139c:	469a      	mov	sl, r3
 800139e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013a2:	d807      	bhi.n	80013b4 <_printf_i+0x28>
 80013a4:	2f62      	cmp	r7, #98	; 0x62
 80013a6:	d80a      	bhi.n	80013be <_printf_i+0x32>
 80013a8:	2f00      	cmp	r7, #0
 80013aa:	f000 80d8 	beq.w	800155e <_printf_i+0x1d2>
 80013ae:	2f58      	cmp	r7, #88	; 0x58
 80013b0:	f000 80a3 	beq.w	80014fa <_printf_i+0x16e>
 80013b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013bc:	e03a      	b.n	8001434 <_printf_i+0xa8>
 80013be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013c2:	2b15      	cmp	r3, #21
 80013c4:	d8f6      	bhi.n	80013b4 <_printf_i+0x28>
 80013c6:	a001      	add	r0, pc, #4	; (adr r0, 80013cc <_printf_i+0x40>)
 80013c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80013cc:	08001425 	.word	0x08001425
 80013d0:	08001439 	.word	0x08001439
 80013d4:	080013b5 	.word	0x080013b5
 80013d8:	080013b5 	.word	0x080013b5
 80013dc:	080013b5 	.word	0x080013b5
 80013e0:	080013b5 	.word	0x080013b5
 80013e4:	08001439 	.word	0x08001439
 80013e8:	080013b5 	.word	0x080013b5
 80013ec:	080013b5 	.word	0x080013b5
 80013f0:	080013b5 	.word	0x080013b5
 80013f4:	080013b5 	.word	0x080013b5
 80013f8:	08001545 	.word	0x08001545
 80013fc:	08001469 	.word	0x08001469
 8001400:	08001527 	.word	0x08001527
 8001404:	080013b5 	.word	0x080013b5
 8001408:	080013b5 	.word	0x080013b5
 800140c:	08001567 	.word	0x08001567
 8001410:	080013b5 	.word	0x080013b5
 8001414:	08001469 	.word	0x08001469
 8001418:	080013b5 	.word	0x080013b5
 800141c:	080013b5 	.word	0x080013b5
 8001420:	0800152f 	.word	0x0800152f
 8001424:	680b      	ldr	r3, [r1, #0]
 8001426:	1d1a      	adds	r2, r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	600a      	str	r2, [r1, #0]
 800142c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001434:	2301      	movs	r3, #1
 8001436:	e0a3      	b.n	8001580 <_printf_i+0x1f4>
 8001438:	6825      	ldr	r5, [r4, #0]
 800143a:	6808      	ldr	r0, [r1, #0]
 800143c:	062e      	lsls	r6, r5, #24
 800143e:	f100 0304 	add.w	r3, r0, #4
 8001442:	d50a      	bpl.n	800145a <_printf_i+0xce>
 8001444:	6805      	ldr	r5, [r0, #0]
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	2d00      	cmp	r5, #0
 800144a:	da03      	bge.n	8001454 <_printf_i+0xc8>
 800144c:	232d      	movs	r3, #45	; 0x2d
 800144e:	426d      	negs	r5, r5
 8001450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001454:	485e      	ldr	r0, [pc, #376]	; (80015d0 <_printf_i+0x244>)
 8001456:	230a      	movs	r3, #10
 8001458:	e019      	b.n	800148e <_printf_i+0x102>
 800145a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800145e:	6805      	ldr	r5, [r0, #0]
 8001460:	600b      	str	r3, [r1, #0]
 8001462:	bf18      	it	ne
 8001464:	b22d      	sxthne	r5, r5
 8001466:	e7ef      	b.n	8001448 <_printf_i+0xbc>
 8001468:	680b      	ldr	r3, [r1, #0]
 800146a:	6825      	ldr	r5, [r4, #0]
 800146c:	1d18      	adds	r0, r3, #4
 800146e:	6008      	str	r0, [r1, #0]
 8001470:	0628      	lsls	r0, r5, #24
 8001472:	d501      	bpl.n	8001478 <_printf_i+0xec>
 8001474:	681d      	ldr	r5, [r3, #0]
 8001476:	e002      	b.n	800147e <_printf_i+0xf2>
 8001478:	0669      	lsls	r1, r5, #25
 800147a:	d5fb      	bpl.n	8001474 <_printf_i+0xe8>
 800147c:	881d      	ldrh	r5, [r3, #0]
 800147e:	4854      	ldr	r0, [pc, #336]	; (80015d0 <_printf_i+0x244>)
 8001480:	2f6f      	cmp	r7, #111	; 0x6f
 8001482:	bf0c      	ite	eq
 8001484:	2308      	moveq	r3, #8
 8001486:	230a      	movne	r3, #10
 8001488:	2100      	movs	r1, #0
 800148a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800148e:	6866      	ldr	r6, [r4, #4]
 8001490:	60a6      	str	r6, [r4, #8]
 8001492:	2e00      	cmp	r6, #0
 8001494:	bfa2      	ittt	ge
 8001496:	6821      	ldrge	r1, [r4, #0]
 8001498:	f021 0104 	bicge.w	r1, r1, #4
 800149c:	6021      	strge	r1, [r4, #0]
 800149e:	b90d      	cbnz	r5, 80014a4 <_printf_i+0x118>
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d04d      	beq.n	8001540 <_printf_i+0x1b4>
 80014a4:	4616      	mov	r6, r2
 80014a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80014aa:	fb03 5711 	mls	r7, r3, r1, r5
 80014ae:	5dc7      	ldrb	r7, [r0, r7]
 80014b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014b4:	462f      	mov	r7, r5
 80014b6:	42bb      	cmp	r3, r7
 80014b8:	460d      	mov	r5, r1
 80014ba:	d9f4      	bls.n	80014a6 <_printf_i+0x11a>
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d10b      	bne.n	80014d8 <_printf_i+0x14c>
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	07df      	lsls	r7, r3, #31
 80014c4:	d508      	bpl.n	80014d8 <_printf_i+0x14c>
 80014c6:	6923      	ldr	r3, [r4, #16]
 80014c8:	6861      	ldr	r1, [r4, #4]
 80014ca:	4299      	cmp	r1, r3
 80014cc:	bfde      	ittt	le
 80014ce:	2330      	movle	r3, #48	; 0x30
 80014d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014d8:	1b92      	subs	r2, r2, r6
 80014da:	6122      	str	r2, [r4, #16]
 80014dc:	f8cd a000 	str.w	sl, [sp]
 80014e0:	464b      	mov	r3, r9
 80014e2:	aa03      	add	r2, sp, #12
 80014e4:	4621      	mov	r1, r4
 80014e6:	4640      	mov	r0, r8
 80014e8:	f7ff fee2 	bl	80012b0 <_printf_common>
 80014ec:	3001      	adds	r0, #1
 80014ee:	d14c      	bne.n	800158a <_printf_i+0x1fe>
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	b004      	add	sp, #16
 80014f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014fa:	4835      	ldr	r0, [pc, #212]	; (80015d0 <_printf_i+0x244>)
 80014fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	680e      	ldr	r6, [r1, #0]
 8001504:	061f      	lsls	r7, r3, #24
 8001506:	f856 5b04 	ldr.w	r5, [r6], #4
 800150a:	600e      	str	r6, [r1, #0]
 800150c:	d514      	bpl.n	8001538 <_printf_i+0x1ac>
 800150e:	07d9      	lsls	r1, r3, #31
 8001510:	bf44      	itt	mi
 8001512:	f043 0320 	orrmi.w	r3, r3, #32
 8001516:	6023      	strmi	r3, [r4, #0]
 8001518:	b91d      	cbnz	r5, 8001522 <_printf_i+0x196>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	f023 0320 	bic.w	r3, r3, #32
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	2310      	movs	r3, #16
 8001524:	e7b0      	b.n	8001488 <_printf_i+0xfc>
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	f043 0320 	orr.w	r3, r3, #32
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	2378      	movs	r3, #120	; 0x78
 8001530:	4828      	ldr	r0, [pc, #160]	; (80015d4 <_printf_i+0x248>)
 8001532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001536:	e7e3      	b.n	8001500 <_printf_i+0x174>
 8001538:	065e      	lsls	r6, r3, #25
 800153a:	bf48      	it	mi
 800153c:	b2ad      	uxthmi	r5, r5
 800153e:	e7e6      	b.n	800150e <_printf_i+0x182>
 8001540:	4616      	mov	r6, r2
 8001542:	e7bb      	b.n	80014bc <_printf_i+0x130>
 8001544:	680b      	ldr	r3, [r1, #0]
 8001546:	6826      	ldr	r6, [r4, #0]
 8001548:	6960      	ldr	r0, [r4, #20]
 800154a:	1d1d      	adds	r5, r3, #4
 800154c:	600d      	str	r5, [r1, #0]
 800154e:	0635      	lsls	r5, r6, #24
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	d501      	bpl.n	8001558 <_printf_i+0x1cc>
 8001554:	6018      	str	r0, [r3, #0]
 8001556:	e002      	b.n	800155e <_printf_i+0x1d2>
 8001558:	0671      	lsls	r1, r6, #25
 800155a:	d5fb      	bpl.n	8001554 <_printf_i+0x1c8>
 800155c:	8018      	strh	r0, [r3, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	6123      	str	r3, [r4, #16]
 8001562:	4616      	mov	r6, r2
 8001564:	e7ba      	b.n	80014dc <_printf_i+0x150>
 8001566:	680b      	ldr	r3, [r1, #0]
 8001568:	1d1a      	adds	r2, r3, #4
 800156a:	600a      	str	r2, [r1, #0]
 800156c:	681e      	ldr	r6, [r3, #0]
 800156e:	6862      	ldr	r2, [r4, #4]
 8001570:	2100      	movs	r1, #0
 8001572:	4630      	mov	r0, r6
 8001574:	f7fe fe34 	bl	80001e0 <memchr>
 8001578:	b108      	cbz	r0, 800157e <_printf_i+0x1f2>
 800157a:	1b80      	subs	r0, r0, r6
 800157c:	6060      	str	r0, [r4, #4]
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	6123      	str	r3, [r4, #16]
 8001582:	2300      	movs	r3, #0
 8001584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001588:	e7a8      	b.n	80014dc <_printf_i+0x150>
 800158a:	6923      	ldr	r3, [r4, #16]
 800158c:	4632      	mov	r2, r6
 800158e:	4649      	mov	r1, r9
 8001590:	4640      	mov	r0, r8
 8001592:	47d0      	blx	sl
 8001594:	3001      	adds	r0, #1
 8001596:	d0ab      	beq.n	80014f0 <_printf_i+0x164>
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	079b      	lsls	r3, r3, #30
 800159c:	d413      	bmi.n	80015c6 <_printf_i+0x23a>
 800159e:	68e0      	ldr	r0, [r4, #12]
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	4298      	cmp	r0, r3
 80015a4:	bfb8      	it	lt
 80015a6:	4618      	movlt	r0, r3
 80015a8:	e7a4      	b.n	80014f4 <_printf_i+0x168>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4632      	mov	r2, r6
 80015ae:	4649      	mov	r1, r9
 80015b0:	4640      	mov	r0, r8
 80015b2:	47d0      	blx	sl
 80015b4:	3001      	adds	r0, #1
 80015b6:	d09b      	beq.n	80014f0 <_printf_i+0x164>
 80015b8:	3501      	adds	r5, #1
 80015ba:	68e3      	ldr	r3, [r4, #12]
 80015bc:	9903      	ldr	r1, [sp, #12]
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	42ab      	cmp	r3, r5
 80015c2:	dcf2      	bgt.n	80015aa <_printf_i+0x21e>
 80015c4:	e7eb      	b.n	800159e <_printf_i+0x212>
 80015c6:	2500      	movs	r5, #0
 80015c8:	f104 0619 	add.w	r6, r4, #25
 80015cc:	e7f5      	b.n	80015ba <_printf_i+0x22e>
 80015ce:	bf00      	nop
 80015d0:	080020c5 	.word	0x080020c5
 80015d4:	080020d6 	.word	0x080020d6

080015d8 <__swbuf_r>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	460e      	mov	r6, r1
 80015dc:	4614      	mov	r4, r2
 80015de:	4605      	mov	r5, r0
 80015e0:	b118      	cbz	r0, 80015ea <__swbuf_r+0x12>
 80015e2:	6983      	ldr	r3, [r0, #24]
 80015e4:	b90b      	cbnz	r3, 80015ea <__swbuf_r+0x12>
 80015e6:	f000 f9d9 	bl	800199c <__sinit>
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <__swbuf_r+0x98>)
 80015ec:	429c      	cmp	r4, r3
 80015ee:	d12b      	bne.n	8001648 <__swbuf_r+0x70>
 80015f0:	686c      	ldr	r4, [r5, #4]
 80015f2:	69a3      	ldr	r3, [r4, #24]
 80015f4:	60a3      	str	r3, [r4, #8]
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	071a      	lsls	r2, r3, #28
 80015fa:	d52f      	bpl.n	800165c <__swbuf_r+0x84>
 80015fc:	6923      	ldr	r3, [r4, #16]
 80015fe:	b36b      	cbz	r3, 800165c <__swbuf_r+0x84>
 8001600:	6923      	ldr	r3, [r4, #16]
 8001602:	6820      	ldr	r0, [r4, #0]
 8001604:	1ac0      	subs	r0, r0, r3
 8001606:	6963      	ldr	r3, [r4, #20]
 8001608:	b2f6      	uxtb	r6, r6
 800160a:	4283      	cmp	r3, r0
 800160c:	4637      	mov	r7, r6
 800160e:	dc04      	bgt.n	800161a <__swbuf_r+0x42>
 8001610:	4621      	mov	r1, r4
 8001612:	4628      	mov	r0, r5
 8001614:	f000 f92e 	bl	8001874 <_fflush_r>
 8001618:	bb30      	cbnz	r0, 8001668 <__swbuf_r+0x90>
 800161a:	68a3      	ldr	r3, [r4, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60a3      	str	r3, [r4, #8]
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	6022      	str	r2, [r4, #0]
 8001626:	701e      	strb	r6, [r3, #0]
 8001628:	6963      	ldr	r3, [r4, #20]
 800162a:	3001      	adds	r0, #1
 800162c:	4283      	cmp	r3, r0
 800162e:	d004      	beq.n	800163a <__swbuf_r+0x62>
 8001630:	89a3      	ldrh	r3, [r4, #12]
 8001632:	07db      	lsls	r3, r3, #31
 8001634:	d506      	bpl.n	8001644 <__swbuf_r+0x6c>
 8001636:	2e0a      	cmp	r6, #10
 8001638:	d104      	bne.n	8001644 <__swbuf_r+0x6c>
 800163a:	4621      	mov	r1, r4
 800163c:	4628      	mov	r0, r5
 800163e:	f000 f919 	bl	8001874 <_fflush_r>
 8001642:	b988      	cbnz	r0, 8001668 <__swbuf_r+0x90>
 8001644:	4638      	mov	r0, r7
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <__swbuf_r+0x9c>)
 800164a:	429c      	cmp	r4, r3
 800164c:	d101      	bne.n	8001652 <__swbuf_r+0x7a>
 800164e:	68ac      	ldr	r4, [r5, #8]
 8001650:	e7cf      	b.n	80015f2 <__swbuf_r+0x1a>
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <__swbuf_r+0xa0>)
 8001654:	429c      	cmp	r4, r3
 8001656:	bf08      	it	eq
 8001658:	68ec      	ldreq	r4, [r5, #12]
 800165a:	e7ca      	b.n	80015f2 <__swbuf_r+0x1a>
 800165c:	4621      	mov	r1, r4
 800165e:	4628      	mov	r0, r5
 8001660:	f000 f80c 	bl	800167c <__swsetup_r>
 8001664:	2800      	cmp	r0, #0
 8001666:	d0cb      	beq.n	8001600 <__swbuf_r+0x28>
 8001668:	f04f 37ff 	mov.w	r7, #4294967295
 800166c:	e7ea      	b.n	8001644 <__swbuf_r+0x6c>
 800166e:	bf00      	nop
 8001670:	08002108 	.word	0x08002108
 8001674:	08002128 	.word	0x08002128
 8001678:	080020e8 	.word	0x080020e8

0800167c <__swsetup_r>:
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <__swsetup_r+0xcc>)
 800167e:	b570      	push	{r4, r5, r6, lr}
 8001680:	681d      	ldr	r5, [r3, #0]
 8001682:	4606      	mov	r6, r0
 8001684:	460c      	mov	r4, r1
 8001686:	b125      	cbz	r5, 8001692 <__swsetup_r+0x16>
 8001688:	69ab      	ldr	r3, [r5, #24]
 800168a:	b913      	cbnz	r3, 8001692 <__swsetup_r+0x16>
 800168c:	4628      	mov	r0, r5
 800168e:	f000 f985 	bl	800199c <__sinit>
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <__swsetup_r+0xd0>)
 8001694:	429c      	cmp	r4, r3
 8001696:	d10f      	bne.n	80016b8 <__swsetup_r+0x3c>
 8001698:	686c      	ldr	r4, [r5, #4]
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016a0:	0719      	lsls	r1, r3, #28
 80016a2:	d42c      	bmi.n	80016fe <__swsetup_r+0x82>
 80016a4:	06dd      	lsls	r5, r3, #27
 80016a6:	d411      	bmi.n	80016cc <__swsetup_r+0x50>
 80016a8:	2309      	movs	r3, #9
 80016aa:	6033      	str	r3, [r6, #0]
 80016ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016b0:	81a3      	strh	r3, [r4, #12]
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295
 80016b6:	e03e      	b.n	8001736 <__swsetup_r+0xba>
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <__swsetup_r+0xd4>)
 80016ba:	429c      	cmp	r4, r3
 80016bc:	d101      	bne.n	80016c2 <__swsetup_r+0x46>
 80016be:	68ac      	ldr	r4, [r5, #8]
 80016c0:	e7eb      	b.n	800169a <__swsetup_r+0x1e>
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <__swsetup_r+0xd8>)
 80016c4:	429c      	cmp	r4, r3
 80016c6:	bf08      	it	eq
 80016c8:	68ec      	ldreq	r4, [r5, #12]
 80016ca:	e7e6      	b.n	800169a <__swsetup_r+0x1e>
 80016cc:	0758      	lsls	r0, r3, #29
 80016ce:	d512      	bpl.n	80016f6 <__swsetup_r+0x7a>
 80016d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016d2:	b141      	cbz	r1, 80016e6 <__swsetup_r+0x6a>
 80016d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016d8:	4299      	cmp	r1, r3
 80016da:	d002      	beq.n	80016e2 <__swsetup_r+0x66>
 80016dc:	4630      	mov	r0, r6
 80016de:	f7ff f9a7 	bl	8000a30 <_free_r>
 80016e2:	2300      	movs	r3, #0
 80016e4:	6363      	str	r3, [r4, #52]	; 0x34
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016ec:	81a3      	strh	r3, [r4, #12]
 80016ee:	2300      	movs	r3, #0
 80016f0:	6063      	str	r3, [r4, #4]
 80016f2:	6923      	ldr	r3, [r4, #16]
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	89a3      	ldrh	r3, [r4, #12]
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	81a3      	strh	r3, [r4, #12]
 80016fe:	6923      	ldr	r3, [r4, #16]
 8001700:	b94b      	cbnz	r3, 8001716 <__swsetup_r+0x9a>
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170c:	d003      	beq.n	8001716 <__swsetup_r+0x9a>
 800170e:	4621      	mov	r1, r4
 8001710:	4630      	mov	r0, r6
 8001712:	f000 fa07 	bl	8001b24 <__smakebuf_r>
 8001716:	89a0      	ldrh	r0, [r4, #12]
 8001718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800171c:	f010 0301 	ands.w	r3, r0, #1
 8001720:	d00a      	beq.n	8001738 <__swsetup_r+0xbc>
 8001722:	2300      	movs	r3, #0
 8001724:	60a3      	str	r3, [r4, #8]
 8001726:	6963      	ldr	r3, [r4, #20]
 8001728:	425b      	negs	r3, r3
 800172a:	61a3      	str	r3, [r4, #24]
 800172c:	6923      	ldr	r3, [r4, #16]
 800172e:	b943      	cbnz	r3, 8001742 <__swsetup_r+0xc6>
 8001730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001734:	d1ba      	bne.n	80016ac <__swsetup_r+0x30>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	0781      	lsls	r1, r0, #30
 800173a:	bf58      	it	pl
 800173c:	6963      	ldrpl	r3, [r4, #20]
 800173e:	60a3      	str	r3, [r4, #8]
 8001740:	e7f4      	b.n	800172c <__swsetup_r+0xb0>
 8001742:	2000      	movs	r0, #0
 8001744:	e7f7      	b.n	8001736 <__swsetup_r+0xba>
 8001746:	bf00      	nop
 8001748:	20000064 	.word	0x20000064
 800174c:	08002108 	.word	0x08002108
 8001750:	08002128 	.word	0x08002128
 8001754:	080020e8 	.word	0x080020e8

08001758 <abort>:
 8001758:	b508      	push	{r3, lr}
 800175a:	2006      	movs	r0, #6
 800175c:	f000 fa98 	bl	8001c90 <raise>
 8001760:	2001      	movs	r0, #1
 8001762:	f000 fbb3 	bl	8001ecc <_exit>
	...

08001768 <__sflush_r>:
 8001768:	898a      	ldrh	r2, [r1, #12]
 800176a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800176e:	4605      	mov	r5, r0
 8001770:	0710      	lsls	r0, r2, #28
 8001772:	460c      	mov	r4, r1
 8001774:	d458      	bmi.n	8001828 <__sflush_r+0xc0>
 8001776:	684b      	ldr	r3, [r1, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	dc05      	bgt.n	8001788 <__sflush_r+0x20>
 800177c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	dc02      	bgt.n	8001788 <__sflush_r+0x20>
 8001782:	2000      	movs	r0, #0
 8001784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800178a:	2e00      	cmp	r6, #0
 800178c:	d0f9      	beq.n	8001782 <__sflush_r+0x1a>
 800178e:	2300      	movs	r3, #0
 8001790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001794:	682f      	ldr	r7, [r5, #0]
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	d032      	beq.n	8001800 <__sflush_r+0x98>
 800179a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	075a      	lsls	r2, r3, #29
 80017a0:	d505      	bpl.n	80017ae <__sflush_r+0x46>
 80017a2:	6863      	ldr	r3, [r4, #4]
 80017a4:	1ac0      	subs	r0, r0, r3
 80017a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017a8:	b10b      	cbz	r3, 80017ae <__sflush_r+0x46>
 80017aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ac:	1ac0      	subs	r0, r0, r3
 80017ae:	2300      	movs	r3, #0
 80017b0:	4602      	mov	r2, r0
 80017b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017b4:	6a21      	ldr	r1, [r4, #32]
 80017b6:	4628      	mov	r0, r5
 80017b8:	47b0      	blx	r6
 80017ba:	1c43      	adds	r3, r0, #1
 80017bc:	89a3      	ldrh	r3, [r4, #12]
 80017be:	d106      	bne.n	80017ce <__sflush_r+0x66>
 80017c0:	6829      	ldr	r1, [r5, #0]
 80017c2:	291d      	cmp	r1, #29
 80017c4:	d82c      	bhi.n	8001820 <__sflush_r+0xb8>
 80017c6:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <__sflush_r+0x108>)
 80017c8:	40ca      	lsrs	r2, r1
 80017ca:	07d6      	lsls	r6, r2, #31
 80017cc:	d528      	bpl.n	8001820 <__sflush_r+0xb8>
 80017ce:	2200      	movs	r2, #0
 80017d0:	6062      	str	r2, [r4, #4]
 80017d2:	04d9      	lsls	r1, r3, #19
 80017d4:	6922      	ldr	r2, [r4, #16]
 80017d6:	6022      	str	r2, [r4, #0]
 80017d8:	d504      	bpl.n	80017e4 <__sflush_r+0x7c>
 80017da:	1c42      	adds	r2, r0, #1
 80017dc:	d101      	bne.n	80017e2 <__sflush_r+0x7a>
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	b903      	cbnz	r3, 80017e4 <__sflush_r+0x7c>
 80017e2:	6560      	str	r0, [r4, #84]	; 0x54
 80017e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017e6:	602f      	str	r7, [r5, #0]
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d0ca      	beq.n	8001782 <__sflush_r+0x1a>
 80017ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017f0:	4299      	cmp	r1, r3
 80017f2:	d002      	beq.n	80017fa <__sflush_r+0x92>
 80017f4:	4628      	mov	r0, r5
 80017f6:	f7ff f91b 	bl	8000a30 <_free_r>
 80017fa:	2000      	movs	r0, #0
 80017fc:	6360      	str	r0, [r4, #52]	; 0x34
 80017fe:	e7c1      	b.n	8001784 <__sflush_r+0x1c>
 8001800:	6a21      	ldr	r1, [r4, #32]
 8001802:	2301      	movs	r3, #1
 8001804:	4628      	mov	r0, r5
 8001806:	47b0      	blx	r6
 8001808:	1c41      	adds	r1, r0, #1
 800180a:	d1c7      	bne.n	800179c <__sflush_r+0x34>
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0c4      	beq.n	800179c <__sflush_r+0x34>
 8001812:	2b1d      	cmp	r3, #29
 8001814:	d001      	beq.n	800181a <__sflush_r+0xb2>
 8001816:	2b16      	cmp	r3, #22
 8001818:	d101      	bne.n	800181e <__sflush_r+0xb6>
 800181a:	602f      	str	r7, [r5, #0]
 800181c:	e7b1      	b.n	8001782 <__sflush_r+0x1a>
 800181e:	89a3      	ldrh	r3, [r4, #12]
 8001820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001824:	81a3      	strh	r3, [r4, #12]
 8001826:	e7ad      	b.n	8001784 <__sflush_r+0x1c>
 8001828:	690f      	ldr	r7, [r1, #16]
 800182a:	2f00      	cmp	r7, #0
 800182c:	d0a9      	beq.n	8001782 <__sflush_r+0x1a>
 800182e:	0793      	lsls	r3, r2, #30
 8001830:	680e      	ldr	r6, [r1, #0]
 8001832:	bf08      	it	eq
 8001834:	694b      	ldreq	r3, [r1, #20]
 8001836:	600f      	str	r7, [r1, #0]
 8001838:	bf18      	it	ne
 800183a:	2300      	movne	r3, #0
 800183c:	eba6 0807 	sub.w	r8, r6, r7
 8001840:	608b      	str	r3, [r1, #8]
 8001842:	f1b8 0f00 	cmp.w	r8, #0
 8001846:	dd9c      	ble.n	8001782 <__sflush_r+0x1a>
 8001848:	6a21      	ldr	r1, [r4, #32]
 800184a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800184c:	4643      	mov	r3, r8
 800184e:	463a      	mov	r2, r7
 8001850:	4628      	mov	r0, r5
 8001852:	47b0      	blx	r6
 8001854:	2800      	cmp	r0, #0
 8001856:	dc06      	bgt.n	8001866 <__sflush_r+0xfe>
 8001858:	89a3      	ldrh	r3, [r4, #12]
 800185a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185e:	81a3      	strh	r3, [r4, #12]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	e78e      	b.n	8001784 <__sflush_r+0x1c>
 8001866:	4407      	add	r7, r0
 8001868:	eba8 0800 	sub.w	r8, r8, r0
 800186c:	e7e9      	b.n	8001842 <__sflush_r+0xda>
 800186e:	bf00      	nop
 8001870:	20400001 	.word	0x20400001

08001874 <_fflush_r>:
 8001874:	b538      	push	{r3, r4, r5, lr}
 8001876:	690b      	ldr	r3, [r1, #16]
 8001878:	4605      	mov	r5, r0
 800187a:	460c      	mov	r4, r1
 800187c:	b913      	cbnz	r3, 8001884 <_fflush_r+0x10>
 800187e:	2500      	movs	r5, #0
 8001880:	4628      	mov	r0, r5
 8001882:	bd38      	pop	{r3, r4, r5, pc}
 8001884:	b118      	cbz	r0, 800188e <_fflush_r+0x1a>
 8001886:	6983      	ldr	r3, [r0, #24]
 8001888:	b90b      	cbnz	r3, 800188e <_fflush_r+0x1a>
 800188a:	f000 f887 	bl	800199c <__sinit>
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <_fflush_r+0x6c>)
 8001890:	429c      	cmp	r4, r3
 8001892:	d11b      	bne.n	80018cc <_fflush_r+0x58>
 8001894:	686c      	ldr	r4, [r5, #4]
 8001896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ef      	beq.n	800187e <_fflush_r+0xa>
 800189e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018a0:	07d0      	lsls	r0, r2, #31
 80018a2:	d404      	bmi.n	80018ae <_fflush_r+0x3a>
 80018a4:	0599      	lsls	r1, r3, #22
 80018a6:	d402      	bmi.n	80018ae <_fflush_r+0x3a>
 80018a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018aa:	f000 f915 	bl	8001ad8 <__retarget_lock_acquire_recursive>
 80018ae:	4628      	mov	r0, r5
 80018b0:	4621      	mov	r1, r4
 80018b2:	f7ff ff59 	bl	8001768 <__sflush_r>
 80018b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018b8:	07da      	lsls	r2, r3, #31
 80018ba:	4605      	mov	r5, r0
 80018bc:	d4e0      	bmi.n	8001880 <_fflush_r+0xc>
 80018be:	89a3      	ldrh	r3, [r4, #12]
 80018c0:	059b      	lsls	r3, r3, #22
 80018c2:	d4dd      	bmi.n	8001880 <_fflush_r+0xc>
 80018c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018c6:	f000 f908 	bl	8001ada <__retarget_lock_release_recursive>
 80018ca:	e7d9      	b.n	8001880 <_fflush_r+0xc>
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <_fflush_r+0x70>)
 80018ce:	429c      	cmp	r4, r3
 80018d0:	d101      	bne.n	80018d6 <_fflush_r+0x62>
 80018d2:	68ac      	ldr	r4, [r5, #8]
 80018d4:	e7df      	b.n	8001896 <_fflush_r+0x22>
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <_fflush_r+0x74>)
 80018d8:	429c      	cmp	r4, r3
 80018da:	bf08      	it	eq
 80018dc:	68ec      	ldreq	r4, [r5, #12]
 80018de:	e7da      	b.n	8001896 <_fflush_r+0x22>
 80018e0:	08002108 	.word	0x08002108
 80018e4:	08002128 	.word	0x08002128
 80018e8:	080020e8 	.word	0x080020e8

080018ec <std>:
 80018ec:	2300      	movs	r3, #0
 80018ee:	b510      	push	{r4, lr}
 80018f0:	4604      	mov	r4, r0
 80018f2:	e9c0 3300 	strd	r3, r3, [r0]
 80018f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018fa:	6083      	str	r3, [r0, #8]
 80018fc:	8181      	strh	r1, [r0, #12]
 80018fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001900:	81c2      	strh	r2, [r0, #14]
 8001902:	6183      	str	r3, [r0, #24]
 8001904:	4619      	mov	r1, r3
 8001906:	2208      	movs	r2, #8
 8001908:	305c      	adds	r0, #92	; 0x5c
 800190a:	f7ff f889 	bl	8000a20 <memset>
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <std+0x38>)
 8001910:	6263      	str	r3, [r4, #36]	; 0x24
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <std+0x3c>)
 8001914:	62a3      	str	r3, [r4, #40]	; 0x28
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <std+0x40>)
 8001918:	62e3      	str	r3, [r4, #44]	; 0x2c
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <std+0x44>)
 800191c:	6224      	str	r4, [r4, #32]
 800191e:	6323      	str	r3, [r4, #48]	; 0x30
 8001920:	bd10      	pop	{r4, pc}
 8001922:	bf00      	nop
 8001924:	08001cc9 	.word	0x08001cc9
 8001928:	08001ceb 	.word	0x08001ceb
 800192c:	08001d23 	.word	0x08001d23
 8001930:	08001d47 	.word	0x08001d47

08001934 <_cleanup_r>:
 8001934:	4901      	ldr	r1, [pc, #4]	; (800193c <_cleanup_r+0x8>)
 8001936:	f000 b8af 	b.w	8001a98 <_fwalk_reent>
 800193a:	bf00      	nop
 800193c:	08001875 	.word	0x08001875

08001940 <__sfmoreglue>:
 8001940:	b570      	push	{r4, r5, r6, lr}
 8001942:	1e4a      	subs	r2, r1, #1
 8001944:	2568      	movs	r5, #104	; 0x68
 8001946:	4355      	muls	r5, r2
 8001948:	460e      	mov	r6, r1
 800194a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800194e:	f7ff f8bf 	bl	8000ad0 <_malloc_r>
 8001952:	4604      	mov	r4, r0
 8001954:	b140      	cbz	r0, 8001968 <__sfmoreglue+0x28>
 8001956:	2100      	movs	r1, #0
 8001958:	e9c0 1600 	strd	r1, r6, [r0]
 800195c:	300c      	adds	r0, #12
 800195e:	60a0      	str	r0, [r4, #8]
 8001960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001964:	f7ff f85c 	bl	8000a20 <memset>
 8001968:	4620      	mov	r0, r4
 800196a:	bd70      	pop	{r4, r5, r6, pc}

0800196c <__sfp_lock_acquire>:
 800196c:	4801      	ldr	r0, [pc, #4]	; (8001974 <__sfp_lock_acquire+0x8>)
 800196e:	f000 b8b3 	b.w	8001ad8 <__retarget_lock_acquire_recursive>
 8001972:	bf00      	nop
 8001974:	200002a8 	.word	0x200002a8

08001978 <__sfp_lock_release>:
 8001978:	4801      	ldr	r0, [pc, #4]	; (8001980 <__sfp_lock_release+0x8>)
 800197a:	f000 b8ae 	b.w	8001ada <__retarget_lock_release_recursive>
 800197e:	bf00      	nop
 8001980:	200002a8 	.word	0x200002a8

08001984 <__sinit_lock_acquire>:
 8001984:	4801      	ldr	r0, [pc, #4]	; (800198c <__sinit_lock_acquire+0x8>)
 8001986:	f000 b8a7 	b.w	8001ad8 <__retarget_lock_acquire_recursive>
 800198a:	bf00      	nop
 800198c:	200002a3 	.word	0x200002a3

08001990 <__sinit_lock_release>:
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <__sinit_lock_release+0x8>)
 8001992:	f000 b8a2 	b.w	8001ada <__retarget_lock_release_recursive>
 8001996:	bf00      	nop
 8001998:	200002a3 	.word	0x200002a3

0800199c <__sinit>:
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
 80019a0:	f7ff fff0 	bl	8001984 <__sinit_lock_acquire>
 80019a4:	69a3      	ldr	r3, [r4, #24]
 80019a6:	b11b      	cbz	r3, 80019b0 <__sinit+0x14>
 80019a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019ac:	f7ff bff0 	b.w	8001990 <__sinit_lock_release>
 80019b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80019b4:	6523      	str	r3, [r4, #80]	; 0x50
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <__sinit+0x68>)
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <__sinit+0x6c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80019be:	42a3      	cmp	r3, r4
 80019c0:	bf04      	itt	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	61a3      	streq	r3, [r4, #24]
 80019c6:	4620      	mov	r0, r4
 80019c8:	f000 f820 	bl	8001a0c <__sfp>
 80019cc:	6060      	str	r0, [r4, #4]
 80019ce:	4620      	mov	r0, r4
 80019d0:	f000 f81c 	bl	8001a0c <__sfp>
 80019d4:	60a0      	str	r0, [r4, #8]
 80019d6:	4620      	mov	r0, r4
 80019d8:	f000 f818 	bl	8001a0c <__sfp>
 80019dc:	2200      	movs	r2, #0
 80019de:	60e0      	str	r0, [r4, #12]
 80019e0:	2104      	movs	r1, #4
 80019e2:	6860      	ldr	r0, [r4, #4]
 80019e4:	f7ff ff82 	bl	80018ec <std>
 80019e8:	68a0      	ldr	r0, [r4, #8]
 80019ea:	2201      	movs	r2, #1
 80019ec:	2109      	movs	r1, #9
 80019ee:	f7ff ff7d 	bl	80018ec <std>
 80019f2:	68e0      	ldr	r0, [r4, #12]
 80019f4:	2202      	movs	r2, #2
 80019f6:	2112      	movs	r1, #18
 80019f8:	f7ff ff78 	bl	80018ec <std>
 80019fc:	2301      	movs	r3, #1
 80019fe:	61a3      	str	r3, [r4, #24]
 8001a00:	e7d2      	b.n	80019a8 <__sinit+0xc>
 8001a02:	bf00      	nop
 8001a04:	08001ffc 	.word	0x08001ffc
 8001a08:	08001935 	.word	0x08001935

08001a0c <__sfp>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	4607      	mov	r7, r0
 8001a10:	f7ff ffac 	bl	800196c <__sfp_lock_acquire>
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <__sfp+0x84>)
 8001a16:	681e      	ldr	r6, [r3, #0]
 8001a18:	69b3      	ldr	r3, [r6, #24]
 8001a1a:	b913      	cbnz	r3, 8001a22 <__sfp+0x16>
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f7ff ffbd 	bl	800199c <__sinit>
 8001a22:	3648      	adds	r6, #72	; 0x48
 8001a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	d503      	bpl.n	8001a34 <__sfp+0x28>
 8001a2c:	6833      	ldr	r3, [r6, #0]
 8001a2e:	b30b      	cbz	r3, 8001a74 <__sfp+0x68>
 8001a30:	6836      	ldr	r6, [r6, #0]
 8001a32:	e7f7      	b.n	8001a24 <__sfp+0x18>
 8001a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a38:	b9d5      	cbnz	r5, 8001a70 <__sfp+0x64>
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <__sfp+0x88>)
 8001a3c:	60e3      	str	r3, [r4, #12]
 8001a3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a42:	6665      	str	r5, [r4, #100]	; 0x64
 8001a44:	f000 f847 	bl	8001ad6 <__retarget_lock_init_recursive>
 8001a48:	f7ff ff96 	bl	8001978 <__sfp_lock_release>
 8001a4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a54:	6025      	str	r5, [r4, #0]
 8001a56:	61a5      	str	r5, [r4, #24]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a60:	f7fe ffde 	bl	8000a20 <memset>
 8001a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a70:	3468      	adds	r4, #104	; 0x68
 8001a72:	e7d9      	b.n	8001a28 <__sfp+0x1c>
 8001a74:	2104      	movs	r1, #4
 8001a76:	4638      	mov	r0, r7
 8001a78:	f7ff ff62 	bl	8001940 <__sfmoreglue>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	6030      	str	r0, [r6, #0]
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d1d5      	bne.n	8001a30 <__sfp+0x24>
 8001a84:	f7ff ff78 	bl	8001978 <__sfp_lock_release>
 8001a88:	230c      	movs	r3, #12
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	e7ee      	b.n	8001a6c <__sfp+0x60>
 8001a8e:	bf00      	nop
 8001a90:	08001ffc 	.word	0x08001ffc
 8001a94:	ffff0001 	.word	0xffff0001

08001a98 <_fwalk_reent>:
 8001a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a9c:	4606      	mov	r6, r0
 8001a9e:	4688      	mov	r8, r1
 8001aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8001aae:	d505      	bpl.n	8001abc <_fwalk_reent+0x24>
 8001ab0:	6824      	ldr	r4, [r4, #0]
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d1f7      	bne.n	8001aa6 <_fwalk_reent+0xe>
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001abc:	89ab      	ldrh	r3, [r5, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d907      	bls.n	8001ad2 <_fwalk_reent+0x3a>
 8001ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <_fwalk_reent+0x3a>
 8001aca:	4629      	mov	r1, r5
 8001acc:	4630      	mov	r0, r6
 8001ace:	47c0      	blx	r8
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	3568      	adds	r5, #104	; 0x68
 8001ad4:	e7e9      	b.n	8001aaa <_fwalk_reent+0x12>

08001ad6 <__retarget_lock_init_recursive>:
 8001ad6:	4770      	bx	lr

08001ad8 <__retarget_lock_acquire_recursive>:
 8001ad8:	4770      	bx	lr

08001ada <__retarget_lock_release_recursive>:
 8001ada:	4770      	bx	lr

08001adc <__swhatbuf_r>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	460e      	mov	r6, r1
 8001ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	b096      	sub	sp, #88	; 0x58
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	da07      	bge.n	8001afe <__swhatbuf_r+0x22>
 8001aee:	2300      	movs	r3, #0
 8001af0:	602b      	str	r3, [r5, #0]
 8001af2:	89b3      	ldrh	r3, [r6, #12]
 8001af4:	061a      	lsls	r2, r3, #24
 8001af6:	d410      	bmi.n	8001b1a <__swhatbuf_r+0x3e>
 8001af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afc:	e00e      	b.n	8001b1c <__swhatbuf_r+0x40>
 8001afe:	466a      	mov	r2, sp
 8001b00:	f000 f948 	bl	8001d94 <_fstat_r>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	dbf2      	blt.n	8001aee <__swhatbuf_r+0x12>
 8001b08:	9a01      	ldr	r2, [sp, #4]
 8001b0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b12:	425a      	negs	r2, r3
 8001b14:	415a      	adcs	r2, r3
 8001b16:	602a      	str	r2, [r5, #0]
 8001b18:	e7ee      	b.n	8001af8 <__swhatbuf_r+0x1c>
 8001b1a:	2340      	movs	r3, #64	; 0x40
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	6023      	str	r3, [r4, #0]
 8001b20:	b016      	add	sp, #88	; 0x58
 8001b22:	bd70      	pop	{r4, r5, r6, pc}

08001b24 <__smakebuf_r>:
 8001b24:	898b      	ldrh	r3, [r1, #12]
 8001b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b28:	079d      	lsls	r5, r3, #30
 8001b2a:	4606      	mov	r6, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	d507      	bpl.n	8001b40 <__smakebuf_r+0x1c>
 8001b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b34:	6023      	str	r3, [r4, #0]
 8001b36:	6123      	str	r3, [r4, #16]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	6163      	str	r3, [r4, #20]
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	ab01      	add	r3, sp, #4
 8001b42:	466a      	mov	r2, sp
 8001b44:	f7ff ffca 	bl	8001adc <__swhatbuf_r>
 8001b48:	9900      	ldr	r1, [sp, #0]
 8001b4a:	4605      	mov	r5, r0
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7fe ffbf 	bl	8000ad0 <_malloc_r>
 8001b52:	b948      	cbnz	r0, 8001b68 <__smakebuf_r+0x44>
 8001b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b58:	059a      	lsls	r2, r3, #22
 8001b5a:	d4ef      	bmi.n	8001b3c <__smakebuf_r+0x18>
 8001b5c:	f023 0303 	bic.w	r3, r3, #3
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	81a3      	strh	r3, [r4, #12]
 8001b66:	e7e3      	b.n	8001b30 <__smakebuf_r+0xc>
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <__smakebuf_r+0x7c>)
 8001b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b6c:	89a3      	ldrh	r3, [r4, #12]
 8001b6e:	6020      	str	r0, [r4, #0]
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	81a3      	strh	r3, [r4, #12]
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	6163      	str	r3, [r4, #20]
 8001b7a:	9b01      	ldr	r3, [sp, #4]
 8001b7c:	6120      	str	r0, [r4, #16]
 8001b7e:	b15b      	cbz	r3, 8001b98 <__smakebuf_r+0x74>
 8001b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b84:	4630      	mov	r0, r6
 8001b86:	f000 f917 	bl	8001db8 <_isatty_r>
 8001b8a:	b128      	cbz	r0, 8001b98 <__smakebuf_r+0x74>
 8001b8c:	89a3      	ldrh	r3, [r4, #12]
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	81a3      	strh	r3, [r4, #12]
 8001b98:	89a0      	ldrh	r0, [r4, #12]
 8001b9a:	4305      	orrs	r5, r0
 8001b9c:	81a5      	strh	r5, [r4, #12]
 8001b9e:	e7cd      	b.n	8001b3c <__smakebuf_r+0x18>
 8001ba0:	08001935 	.word	0x08001935

08001ba4 <memcpy>:
 8001ba4:	440a      	add	r2, r1
 8001ba6:	4291      	cmp	r1, r2
 8001ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001bac:	d100      	bne.n	8001bb0 <memcpy+0xc>
 8001bae:	4770      	bx	lr
 8001bb0:	b510      	push	{r4, lr}
 8001bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	d1f9      	bne.n	8001bb2 <memcpy+0xe>
 8001bbe:	bd10      	pop	{r4, pc}

08001bc0 <memmove>:
 8001bc0:	4288      	cmp	r0, r1
 8001bc2:	b510      	push	{r4, lr}
 8001bc4:	eb01 0402 	add.w	r4, r1, r2
 8001bc8:	d902      	bls.n	8001bd0 <memmove+0x10>
 8001bca:	4284      	cmp	r4, r0
 8001bcc:	4623      	mov	r3, r4
 8001bce:	d807      	bhi.n	8001be0 <memmove+0x20>
 8001bd0:	1e43      	subs	r3, r0, #1
 8001bd2:	42a1      	cmp	r1, r4
 8001bd4:	d008      	beq.n	8001be8 <memmove+0x28>
 8001bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001bde:	e7f8      	b.n	8001bd2 <memmove+0x12>
 8001be0:	4402      	add	r2, r0
 8001be2:	4601      	mov	r1, r0
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d100      	bne.n	8001bea <memmove+0x2a>
 8001be8:	bd10      	pop	{r4, pc}
 8001bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001bf2:	e7f7      	b.n	8001be4 <memmove+0x24>

08001bf4 <_realloc_r>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	4607      	mov	r7, r0
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	460e      	mov	r6, r1
 8001bfc:	b921      	cbnz	r1, 8001c08 <_realloc_r+0x14>
 8001bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001c02:	4611      	mov	r1, r2
 8001c04:	f7fe bf64 	b.w	8000ad0 <_malloc_r>
 8001c08:	b922      	cbnz	r2, 8001c14 <_realloc_r+0x20>
 8001c0a:	f7fe ff11 	bl	8000a30 <_free_r>
 8001c0e:	4625      	mov	r5, r4
 8001c10:	4628      	mov	r0, r5
 8001c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c14:	f000 f8f2 	bl	8001dfc <_malloc_usable_size_r>
 8001c18:	42a0      	cmp	r0, r4
 8001c1a:	d20f      	bcs.n	8001c3c <_realloc_r+0x48>
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	4638      	mov	r0, r7
 8001c20:	f7fe ff56 	bl	8000ad0 <_malloc_r>
 8001c24:	4605      	mov	r5, r0
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d0f2      	beq.n	8001c10 <_realloc_r+0x1c>
 8001c2a:	4631      	mov	r1, r6
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	f7ff ffb9 	bl	8001ba4 <memcpy>
 8001c32:	4631      	mov	r1, r6
 8001c34:	4638      	mov	r0, r7
 8001c36:	f7fe fefb 	bl	8000a30 <_free_r>
 8001c3a:	e7e9      	b.n	8001c10 <_realloc_r+0x1c>
 8001c3c:	4635      	mov	r5, r6
 8001c3e:	e7e7      	b.n	8001c10 <_realloc_r+0x1c>

08001c40 <_raise_r>:
 8001c40:	291f      	cmp	r1, #31
 8001c42:	b538      	push	{r3, r4, r5, lr}
 8001c44:	4604      	mov	r4, r0
 8001c46:	460d      	mov	r5, r1
 8001c48:	d904      	bls.n	8001c54 <_raise_r+0x14>
 8001c4a:	2316      	movs	r3, #22
 8001c4c:	6003      	str	r3, [r0, #0]
 8001c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001c56:	b112      	cbz	r2, 8001c5e <_raise_r+0x1e>
 8001c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001c5c:	b94b      	cbnz	r3, 8001c72 <_raise_r+0x32>
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f000 f830 	bl	8001cc4 <_getpid_r>
 8001c64:	462a      	mov	r2, r5
 8001c66:	4601      	mov	r1, r0
 8001c68:	4620      	mov	r0, r4
 8001c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c6e:	f000 b817 	b.w	8001ca0 <_kill_r>
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d00a      	beq.n	8001c8c <_raise_r+0x4c>
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	d103      	bne.n	8001c82 <_raise_r+0x42>
 8001c7a:	2316      	movs	r3, #22
 8001c7c:	6003      	str	r3, [r0, #0]
 8001c7e:	2001      	movs	r0, #1
 8001c80:	e7e7      	b.n	8001c52 <_raise_r+0x12>
 8001c82:	2400      	movs	r4, #0
 8001c84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001c88:	4628      	mov	r0, r5
 8001c8a:	4798      	blx	r3
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e7e0      	b.n	8001c52 <_raise_r+0x12>

08001c90 <raise>:
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <raise+0xc>)
 8001c92:	4601      	mov	r1, r0
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7ff bfd3 	b.w	8001c40 <_raise_r>
 8001c9a:	bf00      	nop
 8001c9c:	20000064 	.word	0x20000064

08001ca0 <_kill_r>:
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	4d07      	ldr	r5, [pc, #28]	; (8001cc0 <_kill_r+0x20>)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	602b      	str	r3, [r5, #0]
 8001cae:	f000 f8df 	bl	8001e70 <_kill>
 8001cb2:	1c43      	adds	r3, r0, #1
 8001cb4:	d102      	bne.n	8001cbc <_kill_r+0x1c>
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	b103      	cbz	r3, 8001cbc <_kill_r+0x1c>
 8001cba:	6023      	str	r3, [r4, #0]
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000029c 	.word	0x2000029c

08001cc4 <_getpid_r>:
 8001cc4:	f000 b8c4 	b.w	8001e50 <_getpid>

08001cc8 <__sread>:
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	460c      	mov	r4, r1
 8001ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cd0:	f000 f89c 	bl	8001e0c <_read_r>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	bfab      	itete	ge
 8001cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cda:	89a3      	ldrhlt	r3, [r4, #12]
 8001cdc:	181b      	addge	r3, r3, r0
 8001cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ce2:	bfac      	ite	ge
 8001ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ce6:	81a3      	strhlt	r3, [r4, #12]
 8001ce8:	bd10      	pop	{r4, pc}

08001cea <__swrite>:
 8001cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cee:	461f      	mov	r7, r3
 8001cf0:	898b      	ldrh	r3, [r1, #12]
 8001cf2:	05db      	lsls	r3, r3, #23
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4616      	mov	r6, r2
 8001cfa:	d505      	bpl.n	8001d08 <__swrite+0x1e>
 8001cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d00:	2302      	movs	r3, #2
 8001d02:	2200      	movs	r2, #0
 8001d04:	f000 f868 	bl	8001dd8 <_lseek_r>
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d12:	81a3      	strh	r3, [r4, #12]
 8001d14:	4632      	mov	r2, r6
 8001d16:	463b      	mov	r3, r7
 8001d18:	4628      	mov	r0, r5
 8001d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1e:	f000 b817 	b.w	8001d50 <_write_r>

08001d22 <__sseek>:
 8001d22:	b510      	push	{r4, lr}
 8001d24:	460c      	mov	r4, r1
 8001d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d2a:	f000 f855 	bl	8001dd8 <_lseek_r>
 8001d2e:	1c43      	adds	r3, r0, #1
 8001d30:	89a3      	ldrh	r3, [r4, #12]
 8001d32:	bf15      	itete	ne
 8001d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d3e:	81a3      	strheq	r3, [r4, #12]
 8001d40:	bf18      	it	ne
 8001d42:	81a3      	strhne	r3, [r4, #12]
 8001d44:	bd10      	pop	{r4, pc}

08001d46 <__sclose>:
 8001d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d4a:	f000 b813 	b.w	8001d74 <_close_r>
	...

08001d50 <_write_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4d07      	ldr	r5, [pc, #28]	; (8001d70 <_write_r+0x20>)
 8001d54:	4604      	mov	r4, r0
 8001d56:	4608      	mov	r0, r1
 8001d58:	4611      	mov	r1, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	602a      	str	r2, [r5, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f000 f8ac 	bl	8001ebc <_write>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	d102      	bne.n	8001d6e <_write_r+0x1e>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	b103      	cbz	r3, 8001d6e <_write_r+0x1e>
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}
 8001d70:	2000029c 	.word	0x2000029c

08001d74 <_close_r>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4d06      	ldr	r5, [pc, #24]	; (8001d90 <_close_r+0x1c>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	602b      	str	r3, [r5, #0]
 8001d80:	f000 f856 	bl	8001e30 <_close>
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	d102      	bne.n	8001d8e <_close_r+0x1a>
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	b103      	cbz	r3, 8001d8e <_close_r+0x1a>
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	2000029c 	.word	0x2000029c

08001d94 <_fstat_r>:
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	4d07      	ldr	r5, [pc, #28]	; (8001db4 <_fstat_r+0x20>)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	f000 f84d 	bl	8001e40 <_fstat>
 8001da6:	1c43      	adds	r3, r0, #1
 8001da8:	d102      	bne.n	8001db0 <_fstat_r+0x1c>
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	b103      	cbz	r3, 8001db0 <_fstat_r+0x1c>
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	bd38      	pop	{r3, r4, r5, pc}
 8001db2:	bf00      	nop
 8001db4:	2000029c 	.word	0x2000029c

08001db8 <_isatty_r>:
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4d06      	ldr	r5, [pc, #24]	; (8001dd4 <_isatty_r+0x1c>)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	602b      	str	r3, [r5, #0]
 8001dc4:	f000 f84c 	bl	8001e60 <_isatty>
 8001dc8:	1c43      	adds	r3, r0, #1
 8001dca:	d102      	bne.n	8001dd2 <_isatty_r+0x1a>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	b103      	cbz	r3, 8001dd2 <_isatty_r+0x1a>
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	2000029c 	.word	0x2000029c

08001dd8 <_lseek_r>:
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	4d07      	ldr	r5, [pc, #28]	; (8001df8 <_lseek_r+0x20>)
 8001ddc:	4604      	mov	r4, r0
 8001dde:	4608      	mov	r0, r1
 8001de0:	4611      	mov	r1, r2
 8001de2:	2200      	movs	r2, #0
 8001de4:	602a      	str	r2, [r5, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f000 f84a 	bl	8001e80 <_lseek>
 8001dec:	1c43      	adds	r3, r0, #1
 8001dee:	d102      	bne.n	8001df6 <_lseek_r+0x1e>
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	b103      	cbz	r3, 8001df6 <_lseek_r+0x1e>
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
 8001df8:	2000029c 	.word	0x2000029c

08001dfc <_malloc_usable_size_r>:
 8001dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e00:	1f18      	subs	r0, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bfbc      	itt	lt
 8001e06:	580b      	ldrlt	r3, [r1, r0]
 8001e08:	18c0      	addlt	r0, r0, r3
 8001e0a:	4770      	bx	lr

08001e0c <_read_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	4d07      	ldr	r5, [pc, #28]	; (8001e2c <_read_r+0x20>)
 8001e10:	4604      	mov	r4, r0
 8001e12:	4608      	mov	r0, r1
 8001e14:	4611      	mov	r1, r2
 8001e16:	2200      	movs	r2, #0
 8001e18:	602a      	str	r2, [r5, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f000 f838 	bl	8001e90 <_read>
 8001e20:	1c43      	adds	r3, r0, #1
 8001e22:	d102      	bne.n	8001e2a <_read_r+0x1e>
 8001e24:	682b      	ldr	r3, [r5, #0]
 8001e26:	b103      	cbz	r3, 8001e2a <_read_r+0x1e>
 8001e28:	6023      	str	r3, [r4, #0]
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
 8001e2c:	2000029c 	.word	0x2000029c

08001e30 <_close>:
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <_close+0xc>)
 8001e32:	2258      	movs	r2, #88	; 0x58
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	4770      	bx	lr
 8001e3c:	2000029c 	.word	0x2000029c

08001e40 <_fstat>:
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <_fstat+0xc>)
 8001e42:	2258      	movs	r2, #88	; 0x58
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4a:	4770      	bx	lr
 8001e4c:	2000029c 	.word	0x2000029c

08001e50 <_getpid>:
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <_getpid+0xc>)
 8001e52:	2258      	movs	r2, #88	; 0x58
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5a:	4770      	bx	lr
 8001e5c:	2000029c 	.word	0x2000029c

08001e60 <_isatty>:
 8001e60:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <_isatty+0xc>)
 8001e62:	2258      	movs	r2, #88	; 0x58
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	2000      	movs	r0, #0
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000029c 	.word	0x2000029c

08001e70 <_kill>:
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <_kill+0xc>)
 8001e72:	2258      	movs	r2, #88	; 0x58
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7a:	4770      	bx	lr
 8001e7c:	2000029c 	.word	0x2000029c

08001e80 <_lseek>:
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <_lseek+0xc>)
 8001e82:	2258      	movs	r2, #88	; 0x58
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8a:	4770      	bx	lr
 8001e8c:	2000029c 	.word	0x2000029c

08001e90 <_read>:
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <_read+0xc>)
 8001e92:	2258      	movs	r2, #88	; 0x58
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9a:	4770      	bx	lr
 8001e9c:	2000029c 	.word	0x2000029c

08001ea0 <_sbrk>:
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <_sbrk+0x14>)
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	b909      	cbnz	r1, 8001eac <_sbrk+0xc>
 8001ea8:	4903      	ldr	r1, [pc, #12]	; (8001eb8 <_sbrk+0x18>)
 8001eaa:	6019      	str	r1, [r3, #0]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	4402      	add	r2, r0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	4770      	bx	lr
 8001eb4:	20000280 	.word	0x20000280
 8001eb8:	200002b0 	.word	0x200002b0

08001ebc <_write>:
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <_write+0xc>)
 8001ebe:	2258      	movs	r2, #88	; 0x58
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	4770      	bx	lr
 8001ec8:	2000029c 	.word	0x2000029c

08001ecc <_exit>:
 8001ecc:	e7fe      	b.n	8001ecc <_exit>
	...

08001ed0 <_init>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr

08001edc <_fini>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	bf00      	nop
 8001ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee2:	bc08      	pop	{r3}
 8001ee4:	469e      	mov	lr, r3
 8001ee6:	4770      	bx	lr
