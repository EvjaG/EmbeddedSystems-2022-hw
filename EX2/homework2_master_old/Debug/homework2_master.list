
homework2_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010fc  080010fc  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080010fc  080010fc  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010fc  080010fc  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010fc  080010fc  000110fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001100  08001100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08001104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000c8  080011cc  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080011cc  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ece  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000072b  00000000  00000000  00022fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  000236f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  000237d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aef  00000000  00000000  00023870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000166e  00000000  00000000  0003c35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873a1  00000000  00000000  0003d9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000660  00000000  00000000  000c4dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800101c 	.word	0x0800101c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	0800101c 	.word	0x0800101c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <returnHour>:
 *
 * */
char format[100] = "-time HH:MM:SS\nWhere:\n\t0<=HH<=24\n\t0<=MM<60\n\t0<=SS<60";

//this will be the button interrupt function
char* returnHour(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
	char timeFromSlave[8];
    SPI_Receive(timeFromSlave,8);
 80002c2:	463b      	mov	r3, r7
 80002c4:	2108      	movs	r1, #8
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f968 	bl	800059c <SPI_Receive>
	return timeFromSlave;
 80002cc:	2300      	movs	r3, #0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <inputTime>:
//this will be the function from reading the input from the user
//return 0 if fail, otherwise return 1
int inputTime(char* input){
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	SPI_Transmit(input,8);
 80002de:	2108      	movs	r1, #8
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 f933 	bl	800054c <SPI_Transmit>
	return 1;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <EXTI15_10_IRQHandler>:


// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <EXTI15_10_IRQHandler+0x30>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a09      	ldr	r2, [pc, #36]	; (8000320 <EXTI15_10_IRQHandler+0x30>)
 80002fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000300:	6153      	str	r3, [r2, #20]
	// TODO - function to retrieve time from secondary machine
	char* toPrint = returnHour();
 8000302:	f7ff ffdb 	bl	80002bc <returnHour>
 8000306:	6078      	str	r0, [r7, #4]
	print("%s\n",toPrint);
 8000308:	6879      	ldr	r1, [r7, #4]
 800030a:	4806      	ldr	r0, [pc, #24]	; (8000324 <EXTI15_10_IRQHandler+0x34>)
 800030c:	f000 f974 	bl	80005f8 <print>
	free(toPrint);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 fa37 	bl	8000784 <free>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010400 	.word	0x40010400
 8000324:	08001034 	.word	0x08001034

08000328 <USART2_EXTI26_IRQHandler>:
//--------------------------------------------------------UART input handler function
void USART2_EXTI26_IRQHandler(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

	if(RX_BUF_PLACE >= RX_BUF_SIZE)
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <USART2_EXTI26_IRQHandler+0x6c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b13      	cmp	r3, #19
 8000334:	dd02      	ble.n	800033c <USART2_EXTI26_IRQHandler+0x14>
		RX_BUF_PLACE=0;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <USART2_EXTI26_IRQHandler+0x6c>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
	char newChar = (uint8_t)USART2->RDR;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <USART2_EXTI26_IRQHandler+0x70>)
 800033e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000340:	b29b      	uxth	r3, r3
 8000342:	71fb      	strb	r3, [r7, #7]
	if(newChar==(uint8_t)'\0' || newChar==(uint8_t)'\n' || newChar==(uint8_t)'\r'){
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d005      	beq.n	8000356 <USART2_EXTI26_IRQHandler+0x2e>
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b0a      	cmp	r3, #10
 800034e:	d002      	beq.n	8000356 <USART2_EXTI26_IRQHandler+0x2e>
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b0d      	cmp	r3, #13
 8000354:	d112      	bne.n	800037c <USART2_EXTI26_IRQHandler+0x54>
		if (inputTime(RX_BUF)!=1)
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <USART2_EXTI26_IRQHandler+0x74>)
 8000358:	f7ff ffbd 	bl	80002d6 <inputTime>
 800035c:	4603      	mov	r3, r0
 800035e:	2b01      	cmp	r3, #1
 8000360:	d003      	beq.n	800036a <USART2_EXTI26_IRQHandler+0x42>
			print("To change time please input in the following format  it:\t%s\n",format);
 8000362:	490f      	ldr	r1, [pc, #60]	; (80003a0 <USART2_EXTI26_IRQHandler+0x78>)
 8000364:	480f      	ldr	r0, [pc, #60]	; (80003a4 <USART2_EXTI26_IRQHandler+0x7c>)
 8000366:	f000 f947 	bl	80005f8 <print>
		RX_BUF_PLACE=0;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <USART2_EXTI26_IRQHandler+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
		memset(RX_BUF,'\0',RX_BUF_SIZE);
 8000370:	2214      	movs	r2, #20
 8000372:	2100      	movs	r1, #0
 8000374:	4809      	ldr	r0, [pc, #36]	; (800039c <USART2_EXTI26_IRQHandler+0x74>)
 8000376:	f000 fa0d 	bl	8000794 <memset>
		return;
 800037a:	e007      	b.n	800038c <USART2_EXTI26_IRQHandler+0x64>
	}
	RX_BUF[RX_BUF_PLACE++]=newChar;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <USART2_EXTI26_IRQHandler+0x6c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	4904      	ldr	r1, [pc, #16]	; (8000394 <USART2_EXTI26_IRQHandler+0x6c>)
 8000384:	600a      	str	r2, [r1, #0]
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <USART2_EXTI26_IRQHandler+0x74>)
 8000388:	79fa      	ldrb	r2, [r7, #7]
 800038a:	54ca      	strb	r2, [r1, r3]

}
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000284 	.word	0x20000284
 8000398:	40004400 	.word	0x40004400
 800039c:	20000270 	.word	0x20000270
 80003a0:	20000000 	.word	0x20000000
 80003a4:	08001038 	.word	0x08001038

080003a8 <main>:
//	GPIOA->ODR ^= 0x00000020; // Write 0x00000020 to the address 0x48000014
//	TIM2->SR&=0XFFFFFFFE; // reenable timer interrupt
//}
// ------------------------------------------------------ Main
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000A0000;
 80003ae:	4b2f      	ldr	r3, [pc, #188]	; (800046c <main+0xc4>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a2e      	ldr	r2, [pc, #184]	; (800046c <main+0xc4>)
 80003b4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80003b8:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <main+0xc4>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a2b      	ldr	r2, [pc, #172]	; (800046c <main+0xc4>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 80003c6:	4b29      	ldr	r3, [pc, #164]	; (800046c <main+0xc4>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <main+0xc4>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 80003e2:	4b23      	ldr	r3, [pc, #140]	; (8000470 <main+0xc8>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	4a22      	ldr	r2, [pc, #136]	; (8000470 <main+0xc8>)
 80003e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ec:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 80003ee:	4b20      	ldr	r3, [pc, #128]	; (8000470 <main+0xc8>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a1f      	ldr	r2, [pc, #124]	; (8000470 <main+0xc8>)
 80003f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003f8:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <main+0xcc>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a1d      	ldr	r2, [pc, #116]	; (8000474 <main+0xcc>)
 8000400:	f043 0320 	orr.w	r3, r3, #32
 8000404:	6153      	str	r3, [r2, #20]
//    NVIC_EnableIRQ(EXTI15_10_IRQn); // enable button - core interrupt
// ------------------------------------------------------
    // Configure GPIOA pin 5 as output.
    GPIOA->MODER |= 0x00000400;
 8000406:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000414:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000020; // (1 << 5);
 8000416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000420:	f023 0320 	bic.w	r3, r3, #32
 8000424:	6053      	str	r3, [r2, #4]
//    TIM2->ARR= 8000000; // same as writing TIM2->ARR =0x003D0900*2 = the timer2 interrupt speed
//    TIM2->CR1|=0x00000001; // TIM2 counter enable
//    NVIC_EnableIRQ(TIM2_IRQn); //TIM2 interrupt function enable

    USART2_init();
 8000426:	f000 f8ff 	bl	8000628 <USART2_init>
	SPI1_init();
 800042a:	f000 f82d 	bl	8000488 <SPI1_init>
    NVIC_EnableIRQ(USART2_IRQn); //usart2 rx interrupt function enable
 800042e:	2026      	movs	r0, #38	; 0x26
 8000430:	f7ff ff26 	bl	8000280 <__NVIC_EnableIRQ>
    print("Hello!\nThis is the primary machine in the 2-machine exercise you are running!\n");
 8000434:	4810      	ldr	r0, [pc, #64]	; (8000478 <main+0xd0>)
 8000436:	f000 f8df 	bl	80005f8 <print>
    print("To change time please input in the following format  it:\t%s\n",format);
 800043a:	4910      	ldr	r1, [pc, #64]	; (800047c <main+0xd4>)
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <main+0xd8>)
 800043e:	f000 f8db 	bl	80005f8 <print>
    char timeFromSlave[9];
    while(1)
    {
    	memset(timeFromSlave,'\0',9);
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2209      	movs	r2, #9
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f9a3 	bl	8000794 <memset>
		SPI_Receive(timeFromSlave,8);
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2108      	movs	r1, #8
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f8a2 	bl	800059c <SPI_Receive>
		if(timeFromSlave[0] != '\0'){
 8000458:	793b      	ldrb	r3, [r7, #4]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f1      	beq.n	8000442 <main+0x9a>
			print("%s\n",timeFromSlave);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	4808      	ldr	r0, [pc, #32]	; (8000484 <main+0xdc>)
 8000464:	f000 f8c8 	bl	80005f8 <print>
    	memset(timeFromSlave,'\0',9);
 8000468:	e7eb      	b.n	8000442 <main+0x9a>
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000
 8000470:	40010400 	.word	0x40010400
 8000474:	40010000 	.word	0x40010000
 8000478:	08001078 	.word	0x08001078
 800047c:	20000000 	.word	0x20000000
 8000480:	08001038 	.word	0x08001038
 8000484:	08001034 	.word	0x08001034

08000488 <SPI1_init>:
//
//


void SPI1_init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	//TODO - initialize SPI values (page 962 of user manual)
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	2100      	movs	r1, #0
 8000490:	4829      	ldr	r0, [pc, #164]	; (8000538 <SPI1_init+0xb0>)
 8000492:	f000 f97f 	bl	8000794 <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	2100      	movs	r1, #0
 800049a:	4828      	ldr	r0, [pc, #160]	; (800053c <SPI1_init+0xb4>)
 800049c:	f000 f97a 	bl	8000794 <memset>
	*SPI_B_Buffer='\0';
 80004a0:	4b26      	ldr	r3, [pc, #152]	; (800053c <SPI1_init+0xb4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]

	RCC->AHBENR |= (1<<0);  // Enable GPIO Clock
 80004a6:	4b26      	ldr	r3, [pc, #152]	; (8000540 <SPI1_init+0xb8>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a25      	ldr	r2, [pc, #148]	; (8000540 <SPI1_init+0xb8>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6153      	str	r3, [r2, #20]

	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <SPI1_init+0xb8>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a22      	ldr	r2, [pc, #136]	; (8000540 <SPI1_init+0xb8>)
 80004b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004bc:	6193      	str	r3, [r2, #24]
//	//SPI_CR2_RXNEIE -> RX buffer Not Empty Interrupt Enable
//	//SPI_CR2_DS_0|SPI_CR2_DS_1|SPI_CR2_DS_2 -> 0111: 8-bit Data size
//	//SPI_CR2_FRXTH -> FIFO reception Threshold
//	SPI1->CR2 |= SPI_CR2_TXEIE| SPI_CR2_RXNEIE | SPI_CR2_DS_0 |SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_FRXTH;

	SPI1->CR2 |= 0x000000004;
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <SPI1_init+0xbc>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	4a20      	ldr	r2, [pc, #128]	; (8000544 <SPI1_init+0xbc>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x00000007C;
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <SPI1_init+0xbc>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <SPI1_init+0xbc>)
 80004d0:	f043 037c 	orr.w	r3, r3, #124	; 0x7c
 80004d4:	6013      	str	r3, [r2, #0]


	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 80004d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004e0:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 80004e4:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 80004e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f0:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80004f4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80004f8:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000020; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <SPI1_init+0xc0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a12      	ldr	r2, [pc, #72]	; (8000548 <SPI1_init+0xc0>)
 8000500:	f043 0320 	orr.w	r3, r3, #32
 8000504:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PA4, PA6, PA7
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <SPI1_init+0xc0>)
 8000508:	6a1b      	ldr	r3, [r3, #32]
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <SPI1_init+0xc0>)
 800050c:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000510:	6213      	str	r3, [r2, #32]
//	GPIOA->CRL |= (11U<<28);   // PA7 (MOSI) AF output Push Pull
//	GPIOA->CRL |= (1<<26);    // PA6 (MISO) Input mode (floating)
//	GPIOA->CRL |= (3<<16);    // PA4 used for CS, GPIO Output


	GPIOA->MODER &= 0xFFFFAAFF;
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800051c:	f423 43aa 	bic.w	r3, r3, #21760	; 0x5500
 8000520:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0xAA00;
 8000522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052c:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000530:	6013      	str	r3, [r2, #0]



}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000e4 	.word	0x200000e4
 800053c:	20000164 	.word	0x20000164
 8000540:	40021000 	.word	0x40021000
 8000544:	40013000 	.word	0x40013000
 8000548:	48000400 	.word	0x48000400

0800054c <SPI_Transmit>:


void SPI_Transmit (char *data, int size)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	2. Write the data to the Data Register
	3. After the data has been transmitted, wait for the BSY bit to reset in Status Register
	4. Clear the Overrun flag by reading DR and SR
	************************************************/

	int i=0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
	while (i<size)
 800055a:	e012      	b.n	8000582 <SPI_Transmit+0x36>
	{
	   SPI1->DR = data[i];  // load the data into the Data Register
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <SPI_Transmit+0x4c>)
 8000566:	60da      	str	r2, [r3, #12]
	   while (!((SPI1->SR)&(1<<1))) {};  // wait for TXE bit to set -> This will indicate that the buffer is empty
 8000568:	bf00      	nop
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <SPI_Transmit+0x4c>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f9      	beq.n	800056a <SPI_Transmit+0x1e>
//	   SPI1->DR = data[i];  // load the data into the Data Register
	   uint8_t temp = SPI1->DR;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <SPI_Transmit+0x4c>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	72fb      	strb	r3, [r7, #11]
	   i++;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
	while (i<size)
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbe8      	blt.n	800055c <SPI_Transmit+0x10>
//
//	//  Clear the Overrun flag by reading DR and SR
//	uint8_t temp = SPI1->DR;
//	temp = SPI1->SR;

}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40013000 	.word	0x40013000

0800059c <SPI_Receive>:


void SPI_Receive (char *data, int size)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	2. Send some Dummy data before reading the DATA
	3. Wait for the RXNE bit to Set in the status Register
	4. Read data from Data Register
	************************************************/

	while (size)
 80005a6:	e01a      	b.n	80005de <SPI_Receive+0x42>
	{
		while (((SPI1->SR)&(1<<7))) {};  // wait for BSY bit to Reset -> This will indicate that SPI is not busy in communication
 80005a8:	bf00      	nop
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <SPI_Receive+0x58>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f9      	bne.n	80005aa <SPI_Receive+0xe>
		SPI1->DR = 0;  // send dummy data
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <SPI_Receive+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
		while (!((SPI1->SR) &(1<<0))){};  // Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 80005bc:	bf00      	nop
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <SPI_Receive+0x58>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <SPI_Receive+0x22>
	  *data++ = (SPI1->DR);
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <SPI_Receive+0x58>)
 80005cc:	68d9      	ldr	r1, [r3, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	b2ca      	uxtb	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
		size--;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	3b01      	subs	r3, #1
 80005dc:	603b      	str	r3, [r7, #0]
	while (size)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1e1      	bne.n	80005a8 <SPI_Receive+0xc>
	}
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40013000 	.word	0x40013000

080005f8 <print>:
 80005f8:	b40f      	push	{r0, r1, r2, r3}
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	6939      	ldr	r1, [r7, #16]
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <print+0x2c>)
 800060c:	f000 f99a 	bl	8000944 <vsiprintf>
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <print+0x2c>)
 8000612:	f000 f847 	bl	80006a4 <USART2_print>
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr
 8000624:	200001e4 	.word	0x200001e4

08000628 <USART2_init>:
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <USART2_init+0x6c>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <USART2_init+0x6c>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000636:	6153      	str	r3, [r2, #20]
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <USART2_init+0x6c>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <USART2_init+0x6c>)
 800063e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000658:	6a1b      	ldr	r3, [r3, #32]
 800065a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000662:	6213      	str	r3, [r2, #32]
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <USART2_init+0x70>)
 8000666:	f240 3241 	movw	r2, #833	; 0x341
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <USART2_init+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	2214      	movs	r2, #20
 8000674:	2100      	movs	r1, #0
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <USART2_init+0x74>)
 8000678:	f000 f88c 	bl	8000794 <memset>
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <USART2_init+0x78>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <USART2_init+0x70>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <USART2_init+0x70>)
 8000688:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40004400 	.word	0x40004400
 800069c:	20000270 	.word	0x20000270
 80006a0:	20000284 	.word	0x20000284

080006a4 <USART2_print>:
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	e00e      	b.n	80006cc <USART2_print+0x28>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <USART2_print+0x40>)
 80006b4:	b292      	uxth	r2, r2
 80006b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	bf00      	nop
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <USART2_print+0x40>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f9      	beq.n	80006c0 <USART2_print+0x1c>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1ec      	bne.n	80006ae <USART2_print+0xa>
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40004400 	.word	0x40004400

080006e8 <Reset_Handler>:
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
 80006ea:	4685      	mov	sp, r0
 80006ec:	f3af 8000 	nop.w
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopForever+0x6>)
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopForever+0xa>)
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopForever+0xe>)
 80006f6:	2300      	movs	r3, #0
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:
 80006fa:	58d4      	ldr	r4, [r2, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:
 8000700:	18c4      	adds	r4, r0, r3
 8000702:	428c      	cmp	r4, r1
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopForever+0x12>)
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopForever+0x16>)
 800070a:	2300      	movs	r3, #0
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:
 8000712:	42a2      	cmp	r2, r4
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>
 8000716:	f000 f811 	bl	800073c <__libc_init_array>
 800071a:	f7ff fe45 	bl	80003a8 <main>

0800071e <LoopForever>:
 800071e:	e7fe      	b.n	800071e <LoopForever>
 8000720:	20010000 	.word	0x20010000
 8000724:	20000000 	.word	0x20000000
 8000728:	200000c8 	.word	0x200000c8
 800072c:	08001104 	.word	0x08001104
 8000730:	200000c8 	.word	0x200000c8
 8000734:	20000298 	.word	0x20000298

08000738 <ADC1_2_IRQHandler>:
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <__libc_init_array>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4d0d      	ldr	r5, [pc, #52]	; (8000774 <__libc_init_array+0x38>)
 8000740:	4c0d      	ldr	r4, [pc, #52]	; (8000778 <__libc_init_array+0x3c>)
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	10a4      	asrs	r4, r4, #2
 8000746:	2600      	movs	r6, #0
 8000748:	42a6      	cmp	r6, r4
 800074a:	d109      	bne.n	8000760 <__libc_init_array+0x24>
 800074c:	4d0b      	ldr	r5, [pc, #44]	; (800077c <__libc_init_array+0x40>)
 800074e:	4c0c      	ldr	r4, [pc, #48]	; (8000780 <__libc_init_array+0x44>)
 8000750:	f000 fc64 	bl	800101c <_init>
 8000754:	1b64      	subs	r4, r4, r5
 8000756:	10a4      	asrs	r4, r4, #2
 8000758:	2600      	movs	r6, #0
 800075a:	42a6      	cmp	r6, r4
 800075c:	d105      	bne.n	800076a <__libc_init_array+0x2e>
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f855 3b04 	ldr.w	r3, [r5], #4
 8000764:	4798      	blx	r3
 8000766:	3601      	adds	r6, #1
 8000768:	e7ee      	b.n	8000748 <__libc_init_array+0xc>
 800076a:	f855 3b04 	ldr.w	r3, [r5], #4
 800076e:	4798      	blx	r3
 8000770:	3601      	adds	r6, #1
 8000772:	e7f2      	b.n	800075a <__libc_init_array+0x1e>
 8000774:	080010fc 	.word	0x080010fc
 8000778:	080010fc 	.word	0x080010fc
 800077c:	080010fc 	.word	0x080010fc
 8000780:	08001100 	.word	0x08001100

08000784 <free>:
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <free+0xc>)
 8000786:	4601      	mov	r1, r0
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	f000 b80b 	b.w	80007a4 <_free_r>
 800078e:	bf00      	nop
 8000790:	20000064 	.word	0x20000064

08000794 <memset>:
 8000794:	4402      	add	r2, r0
 8000796:	4603      	mov	r3, r0
 8000798:	4293      	cmp	r3, r2
 800079a:	d100      	bne.n	800079e <memset+0xa>
 800079c:	4770      	bx	lr
 800079e:	f803 1b01 	strb.w	r1, [r3], #1
 80007a2:	e7f9      	b.n	8000798 <memset+0x4>

080007a4 <_free_r>:
 80007a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80007a6:	2900      	cmp	r1, #0
 80007a8:	d048      	beq.n	800083c <_free_r+0x98>
 80007aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007ae:	9001      	str	r0, [sp, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f1a1 0404 	sub.w	r4, r1, #4
 80007b6:	bfb8      	it	lt
 80007b8:	18e4      	addlt	r4, r4, r3
 80007ba:	f000 f8cd 	bl	8000958 <__malloc_lock>
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <_free_r+0x9c>)
 80007c0:	9801      	ldr	r0, [sp, #4]
 80007c2:	6813      	ldr	r3, [r2, #0]
 80007c4:	4615      	mov	r5, r2
 80007c6:	b933      	cbnz	r3, 80007d6 <_free_r+0x32>
 80007c8:	6063      	str	r3, [r4, #4]
 80007ca:	6014      	str	r4, [r2, #0]
 80007cc:	b003      	add	sp, #12
 80007ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80007d2:	f000 b8c7 	b.w	8000964 <__malloc_unlock>
 80007d6:	42a3      	cmp	r3, r4
 80007d8:	d90b      	bls.n	80007f2 <_free_r+0x4e>
 80007da:	6821      	ldr	r1, [r4, #0]
 80007dc:	1862      	adds	r2, r4, r1
 80007de:	4293      	cmp	r3, r2
 80007e0:	bf04      	itt	eq
 80007e2:	681a      	ldreq	r2, [r3, #0]
 80007e4:	685b      	ldreq	r3, [r3, #4]
 80007e6:	6063      	str	r3, [r4, #4]
 80007e8:	bf04      	itt	eq
 80007ea:	1852      	addeq	r2, r2, r1
 80007ec:	6022      	streq	r2, [r4, #0]
 80007ee:	602c      	str	r4, [r5, #0]
 80007f0:	e7ec      	b.n	80007cc <_free_r+0x28>
 80007f2:	461a      	mov	r2, r3
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	b10b      	cbz	r3, 80007fc <_free_r+0x58>
 80007f8:	42a3      	cmp	r3, r4
 80007fa:	d9fa      	bls.n	80007f2 <_free_r+0x4e>
 80007fc:	6811      	ldr	r1, [r2, #0]
 80007fe:	1855      	adds	r5, r2, r1
 8000800:	42a5      	cmp	r5, r4
 8000802:	d10b      	bne.n	800081c <_free_r+0x78>
 8000804:	6824      	ldr	r4, [r4, #0]
 8000806:	4421      	add	r1, r4
 8000808:	1854      	adds	r4, r2, r1
 800080a:	42a3      	cmp	r3, r4
 800080c:	6011      	str	r1, [r2, #0]
 800080e:	d1dd      	bne.n	80007cc <_free_r+0x28>
 8000810:	681c      	ldr	r4, [r3, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	6053      	str	r3, [r2, #4]
 8000816:	4421      	add	r1, r4
 8000818:	6011      	str	r1, [r2, #0]
 800081a:	e7d7      	b.n	80007cc <_free_r+0x28>
 800081c:	d902      	bls.n	8000824 <_free_r+0x80>
 800081e:	230c      	movs	r3, #12
 8000820:	6003      	str	r3, [r0, #0]
 8000822:	e7d3      	b.n	80007cc <_free_r+0x28>
 8000824:	6825      	ldr	r5, [r4, #0]
 8000826:	1961      	adds	r1, r4, r5
 8000828:	428b      	cmp	r3, r1
 800082a:	bf04      	itt	eq
 800082c:	6819      	ldreq	r1, [r3, #0]
 800082e:	685b      	ldreq	r3, [r3, #4]
 8000830:	6063      	str	r3, [r4, #4]
 8000832:	bf04      	itt	eq
 8000834:	1949      	addeq	r1, r1, r5
 8000836:	6021      	streq	r1, [r4, #0]
 8000838:	6054      	str	r4, [r2, #4]
 800083a:	e7c7      	b.n	80007cc <_free_r+0x28>
 800083c:	b003      	add	sp, #12
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	20000264 	.word	0x20000264

08000844 <_malloc_r>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	1ccd      	adds	r5, r1, #3
 8000848:	f025 0503 	bic.w	r5, r5, #3
 800084c:	3508      	adds	r5, #8
 800084e:	2d0c      	cmp	r5, #12
 8000850:	bf38      	it	cc
 8000852:	250c      	movcc	r5, #12
 8000854:	2d00      	cmp	r5, #0
 8000856:	4606      	mov	r6, r0
 8000858:	db01      	blt.n	800085e <_malloc_r+0x1a>
 800085a:	42a9      	cmp	r1, r5
 800085c:	d903      	bls.n	8000866 <_malloc_r+0x22>
 800085e:	230c      	movs	r3, #12
 8000860:	6033      	str	r3, [r6, #0]
 8000862:	2000      	movs	r0, #0
 8000864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000866:	f000 f877 	bl	8000958 <__malloc_lock>
 800086a:	4921      	ldr	r1, [pc, #132]	; (80008f0 <_malloc_r+0xac>)
 800086c:	680a      	ldr	r2, [r1, #0]
 800086e:	4614      	mov	r4, r2
 8000870:	b99c      	cbnz	r4, 800089a <_malloc_r+0x56>
 8000872:	4f20      	ldr	r7, [pc, #128]	; (80008f4 <_malloc_r+0xb0>)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b923      	cbnz	r3, 8000882 <_malloc_r+0x3e>
 8000878:	4621      	mov	r1, r4
 800087a:	4630      	mov	r0, r6
 800087c:	f000 f83c 	bl	80008f8 <_sbrk_r>
 8000880:	6038      	str	r0, [r7, #0]
 8000882:	4629      	mov	r1, r5
 8000884:	4630      	mov	r0, r6
 8000886:	f000 f837 	bl	80008f8 <_sbrk_r>
 800088a:	1c43      	adds	r3, r0, #1
 800088c:	d123      	bne.n	80008d6 <_malloc_r+0x92>
 800088e:	230c      	movs	r3, #12
 8000890:	6033      	str	r3, [r6, #0]
 8000892:	4630      	mov	r0, r6
 8000894:	f000 f866 	bl	8000964 <__malloc_unlock>
 8000898:	e7e3      	b.n	8000862 <_malloc_r+0x1e>
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	1b5b      	subs	r3, r3, r5
 800089e:	d417      	bmi.n	80008d0 <_malloc_r+0x8c>
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d903      	bls.n	80008ac <_malloc_r+0x68>
 80008a4:	6023      	str	r3, [r4, #0]
 80008a6:	441c      	add	r4, r3
 80008a8:	6025      	str	r5, [r4, #0]
 80008aa:	e004      	b.n	80008b6 <_malloc_r+0x72>
 80008ac:	6863      	ldr	r3, [r4, #4]
 80008ae:	42a2      	cmp	r2, r4
 80008b0:	bf0c      	ite	eq
 80008b2:	600b      	streq	r3, [r1, #0]
 80008b4:	6053      	strne	r3, [r2, #4]
 80008b6:	4630      	mov	r0, r6
 80008b8:	f000 f854 	bl	8000964 <__malloc_unlock>
 80008bc:	f104 000b 	add.w	r0, r4, #11
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	f020 0007 	bic.w	r0, r0, #7
 80008c6:	1ac2      	subs	r2, r0, r3
 80008c8:	d0cc      	beq.n	8000864 <_malloc_r+0x20>
 80008ca:	1a1b      	subs	r3, r3, r0
 80008cc:	50a3      	str	r3, [r4, r2]
 80008ce:	e7c9      	b.n	8000864 <_malloc_r+0x20>
 80008d0:	4622      	mov	r2, r4
 80008d2:	6864      	ldr	r4, [r4, #4]
 80008d4:	e7cc      	b.n	8000870 <_malloc_r+0x2c>
 80008d6:	1cc4      	adds	r4, r0, #3
 80008d8:	f024 0403 	bic.w	r4, r4, #3
 80008dc:	42a0      	cmp	r0, r4
 80008de:	d0e3      	beq.n	80008a8 <_malloc_r+0x64>
 80008e0:	1a21      	subs	r1, r4, r0
 80008e2:	4630      	mov	r0, r6
 80008e4:	f000 f808 	bl	80008f8 <_sbrk_r>
 80008e8:	3001      	adds	r0, #1
 80008ea:	d1dd      	bne.n	80008a8 <_malloc_r+0x64>
 80008ec:	e7cf      	b.n	800088e <_malloc_r+0x4a>
 80008ee:	bf00      	nop
 80008f0:	20000264 	.word	0x20000264
 80008f4:	20000268 	.word	0x20000268

080008f8 <_sbrk_r>:
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	4d06      	ldr	r5, [pc, #24]	; (8000914 <_sbrk_r+0x1c>)
 80008fc:	2300      	movs	r3, #0
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	602b      	str	r3, [r5, #0]
 8000904:	f000 fb7c 	bl	8001000 <_sbrk>
 8000908:	1c43      	adds	r3, r0, #1
 800090a:	d102      	bne.n	8000912 <_sbrk_r+0x1a>
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	b103      	cbz	r3, 8000912 <_sbrk_r+0x1a>
 8000910:	6023      	str	r3, [r4, #0]
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	20000288 	.word	0x20000288

08000918 <_vsiprintf_r>:
 8000918:	b500      	push	{lr}
 800091a:	b09b      	sub	sp, #108	; 0x6c
 800091c:	9100      	str	r1, [sp, #0]
 800091e:	9104      	str	r1, [sp, #16]
 8000920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000924:	9105      	str	r1, [sp, #20]
 8000926:	9102      	str	r1, [sp, #8]
 8000928:	4905      	ldr	r1, [pc, #20]	; (8000940 <_vsiprintf_r+0x28>)
 800092a:	9103      	str	r1, [sp, #12]
 800092c:	4669      	mov	r1, sp
 800092e:	f000 f87b 	bl	8000a28 <_svfiprintf_r>
 8000932:	9b00      	ldr	r3, [sp, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	b01b      	add	sp, #108	; 0x6c
 800093a:	f85d fb04 	ldr.w	pc, [sp], #4
 800093e:	bf00      	nop
 8000940:	ffff0208 	.word	0xffff0208

08000944 <vsiprintf>:
 8000944:	4613      	mov	r3, r2
 8000946:	460a      	mov	r2, r1
 8000948:	4601      	mov	r1, r0
 800094a:	4802      	ldr	r0, [pc, #8]	; (8000954 <vsiprintf+0x10>)
 800094c:	6800      	ldr	r0, [r0, #0]
 800094e:	f7ff bfe3 	b.w	8000918 <_vsiprintf_r>
 8000952:	bf00      	nop
 8000954:	20000064 	.word	0x20000064

08000958 <__malloc_lock>:
 8000958:	4801      	ldr	r0, [pc, #4]	; (8000960 <__malloc_lock+0x8>)
 800095a:	f000 baf9 	b.w	8000f50 <__retarget_lock_acquire_recursive>
 800095e:	bf00      	nop
 8000960:	20000290 	.word	0x20000290

08000964 <__malloc_unlock>:
 8000964:	4801      	ldr	r0, [pc, #4]	; (800096c <__malloc_unlock+0x8>)
 8000966:	f000 baf4 	b.w	8000f52 <__retarget_lock_release_recursive>
 800096a:	bf00      	nop
 800096c:	20000290 	.word	0x20000290

08000970 <__ssputs_r>:
 8000970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000974:	688e      	ldr	r6, [r1, #8]
 8000976:	429e      	cmp	r6, r3
 8000978:	4682      	mov	sl, r0
 800097a:	460c      	mov	r4, r1
 800097c:	4690      	mov	r8, r2
 800097e:	461f      	mov	r7, r3
 8000980:	d838      	bhi.n	80009f4 <__ssputs_r+0x84>
 8000982:	898a      	ldrh	r2, [r1, #12]
 8000984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000988:	d032      	beq.n	80009f0 <__ssputs_r+0x80>
 800098a:	6825      	ldr	r5, [r4, #0]
 800098c:	6909      	ldr	r1, [r1, #16]
 800098e:	eba5 0901 	sub.w	r9, r5, r1
 8000992:	6965      	ldr	r5, [r4, #20]
 8000994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800099c:	3301      	adds	r3, #1
 800099e:	444b      	add	r3, r9
 80009a0:	106d      	asrs	r5, r5, #1
 80009a2:	429d      	cmp	r5, r3
 80009a4:	bf38      	it	cc
 80009a6:	461d      	movcc	r5, r3
 80009a8:	0553      	lsls	r3, r2, #21
 80009aa:	d531      	bpl.n	8000a10 <__ssputs_r+0xa0>
 80009ac:	4629      	mov	r1, r5
 80009ae:	f7ff ff49 	bl	8000844 <_malloc_r>
 80009b2:	4606      	mov	r6, r0
 80009b4:	b950      	cbnz	r0, 80009cc <__ssputs_r+0x5c>
 80009b6:	230c      	movs	r3, #12
 80009b8:	f8ca 3000 	str.w	r3, [sl]
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	81a3      	strh	r3, [r4, #12]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009cc:	6921      	ldr	r1, [r4, #16]
 80009ce:	464a      	mov	r2, r9
 80009d0:	f000 fac0 	bl	8000f54 <memcpy>
 80009d4:	89a3      	ldrh	r3, [r4, #12]
 80009d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009de:	81a3      	strh	r3, [r4, #12]
 80009e0:	6126      	str	r6, [r4, #16]
 80009e2:	6165      	str	r5, [r4, #20]
 80009e4:	444e      	add	r6, r9
 80009e6:	eba5 0509 	sub.w	r5, r5, r9
 80009ea:	6026      	str	r6, [r4, #0]
 80009ec:	60a5      	str	r5, [r4, #8]
 80009ee:	463e      	mov	r6, r7
 80009f0:	42be      	cmp	r6, r7
 80009f2:	d900      	bls.n	80009f6 <__ssputs_r+0x86>
 80009f4:	463e      	mov	r6, r7
 80009f6:	4632      	mov	r2, r6
 80009f8:	6820      	ldr	r0, [r4, #0]
 80009fa:	4641      	mov	r1, r8
 80009fc:	f000 fab8 	bl	8000f70 <memmove>
 8000a00:	68a3      	ldr	r3, [r4, #8]
 8000a02:	6822      	ldr	r2, [r4, #0]
 8000a04:	1b9b      	subs	r3, r3, r6
 8000a06:	4432      	add	r2, r6
 8000a08:	60a3      	str	r3, [r4, #8]
 8000a0a:	6022      	str	r2, [r4, #0]
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e7db      	b.n	80009c8 <__ssputs_r+0x58>
 8000a10:	462a      	mov	r2, r5
 8000a12:	f000 fac7 	bl	8000fa4 <_realloc_r>
 8000a16:	4606      	mov	r6, r0
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1e1      	bne.n	80009e0 <__ssputs_r+0x70>
 8000a1c:	6921      	ldr	r1, [r4, #16]
 8000a1e:	4650      	mov	r0, sl
 8000a20:	f7ff fec0 	bl	80007a4 <_free_r>
 8000a24:	e7c7      	b.n	80009b6 <__ssputs_r+0x46>
	...

08000a28 <_svfiprintf_r>:
 8000a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a2c:	4698      	mov	r8, r3
 8000a2e:	898b      	ldrh	r3, [r1, #12]
 8000a30:	061b      	lsls	r3, r3, #24
 8000a32:	b09d      	sub	sp, #116	; 0x74
 8000a34:	4607      	mov	r7, r0
 8000a36:	460d      	mov	r5, r1
 8000a38:	4614      	mov	r4, r2
 8000a3a:	d50e      	bpl.n	8000a5a <_svfiprintf_r+0x32>
 8000a3c:	690b      	ldr	r3, [r1, #16]
 8000a3e:	b963      	cbnz	r3, 8000a5a <_svfiprintf_r+0x32>
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	f7ff feff 	bl	8000844 <_malloc_r>
 8000a46:	6028      	str	r0, [r5, #0]
 8000a48:	6128      	str	r0, [r5, #16]
 8000a4a:	b920      	cbnz	r0, 8000a56 <_svfiprintf_r+0x2e>
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	e0d1      	b.n	8000bfa <_svfiprintf_r+0x1d2>
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	616b      	str	r3, [r5, #20]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a5e:	2320      	movs	r3, #32
 8000a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a68:	2330      	movs	r3, #48	; 0x30
 8000a6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000c14 <_svfiprintf_r+0x1ec>
 8000a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a72:	f04f 0901 	mov.w	r9, #1
 8000a76:	4623      	mov	r3, r4
 8000a78:	469a      	mov	sl, r3
 8000a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a7e:	b10a      	cbz	r2, 8000a84 <_svfiprintf_r+0x5c>
 8000a80:	2a25      	cmp	r2, #37	; 0x25
 8000a82:	d1f9      	bne.n	8000a78 <_svfiprintf_r+0x50>
 8000a84:	ebba 0b04 	subs.w	fp, sl, r4
 8000a88:	d00b      	beq.n	8000aa2 <_svfiprintf_r+0x7a>
 8000a8a:	465b      	mov	r3, fp
 8000a8c:	4622      	mov	r2, r4
 8000a8e:	4629      	mov	r1, r5
 8000a90:	4638      	mov	r0, r7
 8000a92:	f7ff ff6d 	bl	8000970 <__ssputs_r>
 8000a96:	3001      	adds	r0, #1
 8000a98:	f000 80aa 	beq.w	8000bf0 <_svfiprintf_r+0x1c8>
 8000a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a9e:	445a      	add	r2, fp
 8000aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8000aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80a2 	beq.w	8000bf0 <_svfiprintf_r+0x1c8>
 8000aac:	2300      	movs	r3, #0
 8000aae:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ab6:	f10a 0a01 	add.w	sl, sl, #1
 8000aba:	9304      	str	r3, [sp, #16]
 8000abc:	9307      	str	r3, [sp, #28]
 8000abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8000ac4:	4654      	mov	r4, sl
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000acc:	4851      	ldr	r0, [pc, #324]	; (8000c14 <_svfiprintf_r+0x1ec>)
 8000ace:	f7ff fb87 	bl	80001e0 <memchr>
 8000ad2:	9a04      	ldr	r2, [sp, #16]
 8000ad4:	b9d8      	cbnz	r0, 8000b0e <_svfiprintf_r+0xe6>
 8000ad6:	06d0      	lsls	r0, r2, #27
 8000ad8:	bf44      	itt	mi
 8000ada:	2320      	movmi	r3, #32
 8000adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ae0:	0711      	lsls	r1, r2, #28
 8000ae2:	bf44      	itt	mi
 8000ae4:	232b      	movmi	r3, #43	; 0x2b
 8000ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000aea:	f89a 3000 	ldrb.w	r3, [sl]
 8000aee:	2b2a      	cmp	r3, #42	; 0x2a
 8000af0:	d015      	beq.n	8000b1e <_svfiprintf_r+0xf6>
 8000af2:	9a07      	ldr	r2, [sp, #28]
 8000af4:	4654      	mov	r4, sl
 8000af6:	2000      	movs	r0, #0
 8000af8:	f04f 0c0a 	mov.w	ip, #10
 8000afc:	4621      	mov	r1, r4
 8000afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b02:	3b30      	subs	r3, #48	; 0x30
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	d94e      	bls.n	8000ba6 <_svfiprintf_r+0x17e>
 8000b08:	b1b0      	cbz	r0, 8000b38 <_svfiprintf_r+0x110>
 8000b0a:	9207      	str	r2, [sp, #28]
 8000b0c:	e014      	b.n	8000b38 <_svfiprintf_r+0x110>
 8000b0e:	eba0 0308 	sub.w	r3, r0, r8
 8000b12:	fa09 f303 	lsl.w	r3, r9, r3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	46a2      	mov	sl, r4
 8000b1c:	e7d2      	b.n	8000ac4 <_svfiprintf_r+0x9c>
 8000b1e:	9b03      	ldr	r3, [sp, #12]
 8000b20:	1d19      	adds	r1, r3, #4
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	9103      	str	r1, [sp, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfbb      	ittet	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b30:	9307      	strge	r3, [sp, #28]
 8000b32:	9307      	strlt	r3, [sp, #28]
 8000b34:	bfb8      	it	lt
 8000b36:	9204      	strlt	r2, [sp, #16]
 8000b38:	7823      	ldrb	r3, [r4, #0]
 8000b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8000b3c:	d10c      	bne.n	8000b58 <_svfiprintf_r+0x130>
 8000b3e:	7863      	ldrb	r3, [r4, #1]
 8000b40:	2b2a      	cmp	r3, #42	; 0x2a
 8000b42:	d135      	bne.n	8000bb0 <_svfiprintf_r+0x188>
 8000b44:	9b03      	ldr	r3, [sp, #12]
 8000b46:	1d1a      	adds	r2, r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	9203      	str	r2, [sp, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bfb8      	it	lt
 8000b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b54:	3402      	adds	r4, #2
 8000b56:	9305      	str	r3, [sp, #20]
 8000b58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c24 <_svfiprintf_r+0x1fc>
 8000b5c:	7821      	ldrb	r1, [r4, #0]
 8000b5e:	2203      	movs	r2, #3
 8000b60:	4650      	mov	r0, sl
 8000b62:	f7ff fb3d 	bl	80001e0 <memchr>
 8000b66:	b140      	cbz	r0, 8000b7a <_svfiprintf_r+0x152>
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	eba0 000a 	sub.w	r0, r0, sl
 8000b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8000b72:	9b04      	ldr	r3, [sp, #16]
 8000b74:	4303      	orrs	r3, r0
 8000b76:	3401      	adds	r4, #1
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7e:	4826      	ldr	r0, [pc, #152]	; (8000c18 <_svfiprintf_r+0x1f0>)
 8000b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b84:	2206      	movs	r2, #6
 8000b86:	f7ff fb2b 	bl	80001e0 <memchr>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d038      	beq.n	8000c00 <_svfiprintf_r+0x1d8>
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <_svfiprintf_r+0x1f4>)
 8000b90:	bb1b      	cbnz	r3, 8000bda <_svfiprintf_r+0x1b2>
 8000b92:	9b03      	ldr	r3, [sp, #12]
 8000b94:	3307      	adds	r3, #7
 8000b96:	f023 0307 	bic.w	r3, r3, #7
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	9303      	str	r3, [sp, #12]
 8000b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ba0:	4433      	add	r3, r6
 8000ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ba4:	e767      	b.n	8000a76 <_svfiprintf_r+0x4e>
 8000ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000baa:	460c      	mov	r4, r1
 8000bac:	2001      	movs	r0, #1
 8000bae:	e7a5      	b.n	8000afc <_svfiprintf_r+0xd4>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	3401      	adds	r4, #1
 8000bb4:	9305      	str	r3, [sp, #20]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 0c0a 	mov.w	ip, #10
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bc2:	3a30      	subs	r2, #48	; 0x30
 8000bc4:	2a09      	cmp	r2, #9
 8000bc6:	d903      	bls.n	8000bd0 <_svfiprintf_r+0x1a8>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0c5      	beq.n	8000b58 <_svfiprintf_r+0x130>
 8000bcc:	9105      	str	r1, [sp, #20]
 8000bce:	e7c3      	b.n	8000b58 <_svfiprintf_r+0x130>
 8000bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e7f0      	b.n	8000bbc <_svfiprintf_r+0x194>
 8000bda:	ab03      	add	r3, sp, #12
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	462a      	mov	r2, r5
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <_svfiprintf_r+0x1f8>)
 8000be2:	a904      	add	r1, sp, #16
 8000be4:	4638      	mov	r0, r7
 8000be6:	f3af 8000 	nop.w
 8000bea:	1c42      	adds	r2, r0, #1
 8000bec:	4606      	mov	r6, r0
 8000bee:	d1d6      	bne.n	8000b9e <_svfiprintf_r+0x176>
 8000bf0:	89ab      	ldrh	r3, [r5, #12]
 8000bf2:	065b      	lsls	r3, r3, #25
 8000bf4:	f53f af2c 	bmi.w	8000a50 <_svfiprintf_r+0x28>
 8000bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bfa:	b01d      	add	sp, #116	; 0x74
 8000bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c00:	ab03      	add	r3, sp, #12
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	462a      	mov	r2, r5
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <_svfiprintf_r+0x1f8>)
 8000c08:	a904      	add	r1, sp, #16
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	f000 f87a 	bl	8000d04 <_printf_i>
 8000c10:	e7eb      	b.n	8000bea <_svfiprintf_r+0x1c2>
 8000c12:	bf00      	nop
 8000c14:	080010c7 	.word	0x080010c7
 8000c18:	080010d1 	.word	0x080010d1
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	08000971 	.word	0x08000971
 8000c24:	080010cd 	.word	0x080010cd

08000c28 <_printf_common>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	4616      	mov	r6, r2
 8000c2e:	4699      	mov	r9, r3
 8000c30:	688a      	ldr	r2, [r1, #8]
 8000c32:	690b      	ldr	r3, [r1, #16]
 8000c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	bfb8      	it	lt
 8000c3c:	4613      	movlt	r3, r2
 8000c3e:	6033      	str	r3, [r6, #0]
 8000c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c44:	4607      	mov	r7, r0
 8000c46:	460c      	mov	r4, r1
 8000c48:	b10a      	cbz	r2, 8000c4e <_printf_common+0x26>
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	6033      	str	r3, [r6, #0]
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	0699      	lsls	r1, r3, #26
 8000c52:	bf42      	ittt	mi
 8000c54:	6833      	ldrmi	r3, [r6, #0]
 8000c56:	3302      	addmi	r3, #2
 8000c58:	6033      	strmi	r3, [r6, #0]
 8000c5a:	6825      	ldr	r5, [r4, #0]
 8000c5c:	f015 0506 	ands.w	r5, r5, #6
 8000c60:	d106      	bne.n	8000c70 <_printf_common+0x48>
 8000c62:	f104 0a19 	add.w	sl, r4, #25
 8000c66:	68e3      	ldr	r3, [r4, #12]
 8000c68:	6832      	ldr	r2, [r6, #0]
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	dc26      	bgt.n	8000cbe <_printf_common+0x96>
 8000c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c74:	1e13      	subs	r3, r2, #0
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	bf18      	it	ne
 8000c7a:	2301      	movne	r3, #1
 8000c7c:	0692      	lsls	r2, r2, #26
 8000c7e:	d42b      	bmi.n	8000cd8 <_printf_common+0xb0>
 8000c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c84:	4649      	mov	r1, r9
 8000c86:	4638      	mov	r0, r7
 8000c88:	47c0      	blx	r8
 8000c8a:	3001      	adds	r0, #1
 8000c8c:	d01e      	beq.n	8000ccc <_printf_common+0xa4>
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	68e5      	ldr	r5, [r4, #12]
 8000c92:	6832      	ldr	r2, [r6, #0]
 8000c94:	f003 0306 	and.w	r3, r3, #6
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	bf08      	it	eq
 8000c9c:	1aad      	subeq	r5, r5, r2
 8000c9e:	68a3      	ldr	r3, [r4, #8]
 8000ca0:	6922      	ldr	r2, [r4, #16]
 8000ca2:	bf0c      	ite	eq
 8000ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ca8:	2500      	movne	r5, #0
 8000caa:	4293      	cmp	r3, r2
 8000cac:	bfc4      	itt	gt
 8000cae:	1a9b      	subgt	r3, r3, r2
 8000cb0:	18ed      	addgt	r5, r5, r3
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	341a      	adds	r4, #26
 8000cb6:	42b5      	cmp	r5, r6
 8000cb8:	d11a      	bne.n	8000cf0 <_printf_common+0xc8>
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e008      	b.n	8000cd0 <_printf_common+0xa8>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	4638      	mov	r0, r7
 8000cc6:	47c0      	blx	r8
 8000cc8:	3001      	adds	r0, #1
 8000cca:	d103      	bne.n	8000cd4 <_printf_common+0xac>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	e7c6      	b.n	8000c66 <_printf_common+0x3e>
 8000cd8:	18e1      	adds	r1, r4, r3
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	2030      	movs	r0, #48	; 0x30
 8000cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ce2:	4422      	add	r2, r4
 8000ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cec:	3302      	adds	r3, #2
 8000cee:	e7c7      	b.n	8000c80 <_printf_common+0x58>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	4638      	mov	r0, r7
 8000cf8:	47c0      	blx	r8
 8000cfa:	3001      	adds	r0, #1
 8000cfc:	d0e6      	beq.n	8000ccc <_printf_common+0xa4>
 8000cfe:	3601      	adds	r6, #1
 8000d00:	e7d9      	b.n	8000cb6 <_printf_common+0x8e>
	...

08000d04 <_printf_i>:
 8000d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	460c      	mov	r4, r1
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	7e27      	ldrb	r7, [r4, #24]
 8000d0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d10:	2f78      	cmp	r7, #120	; 0x78
 8000d12:	4680      	mov	r8, r0
 8000d14:	469a      	mov	sl, r3
 8000d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d1a:	d807      	bhi.n	8000d2c <_printf_i+0x28>
 8000d1c:	2f62      	cmp	r7, #98	; 0x62
 8000d1e:	d80a      	bhi.n	8000d36 <_printf_i+0x32>
 8000d20:	2f00      	cmp	r7, #0
 8000d22:	f000 80d8 	beq.w	8000ed6 <_printf_i+0x1d2>
 8000d26:	2f58      	cmp	r7, #88	; 0x58
 8000d28:	f000 80a3 	beq.w	8000e72 <_printf_i+0x16e>
 8000d2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d34:	e03a      	b.n	8000dac <_printf_i+0xa8>
 8000d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d3a:	2b15      	cmp	r3, #21
 8000d3c:	d8f6      	bhi.n	8000d2c <_printf_i+0x28>
 8000d3e:	a001      	add	r0, pc, #4	; (adr r0, 8000d44 <_printf_i+0x40>)
 8000d40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d44:	08000d9d 	.word	0x08000d9d
 8000d48:	08000db1 	.word	0x08000db1
 8000d4c:	08000d2d 	.word	0x08000d2d
 8000d50:	08000d2d 	.word	0x08000d2d
 8000d54:	08000d2d 	.word	0x08000d2d
 8000d58:	08000d2d 	.word	0x08000d2d
 8000d5c:	08000db1 	.word	0x08000db1
 8000d60:	08000d2d 	.word	0x08000d2d
 8000d64:	08000d2d 	.word	0x08000d2d
 8000d68:	08000d2d 	.word	0x08000d2d
 8000d6c:	08000d2d 	.word	0x08000d2d
 8000d70:	08000ebd 	.word	0x08000ebd
 8000d74:	08000de1 	.word	0x08000de1
 8000d78:	08000e9f 	.word	0x08000e9f
 8000d7c:	08000d2d 	.word	0x08000d2d
 8000d80:	08000d2d 	.word	0x08000d2d
 8000d84:	08000edf 	.word	0x08000edf
 8000d88:	08000d2d 	.word	0x08000d2d
 8000d8c:	08000de1 	.word	0x08000de1
 8000d90:	08000d2d 	.word	0x08000d2d
 8000d94:	08000d2d 	.word	0x08000d2d
 8000d98:	08000ea7 	.word	0x08000ea7
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	1d1a      	adds	r2, r3, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	600a      	str	r2, [r1, #0]
 8000da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dac:	2301      	movs	r3, #1
 8000dae:	e0a3      	b.n	8000ef8 <_printf_i+0x1f4>
 8000db0:	6825      	ldr	r5, [r4, #0]
 8000db2:	6808      	ldr	r0, [r1, #0]
 8000db4:	062e      	lsls	r6, r5, #24
 8000db6:	f100 0304 	add.w	r3, r0, #4
 8000dba:	d50a      	bpl.n	8000dd2 <_printf_i+0xce>
 8000dbc:	6805      	ldr	r5, [r0, #0]
 8000dbe:	600b      	str	r3, [r1, #0]
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	da03      	bge.n	8000dcc <_printf_i+0xc8>
 8000dc4:	232d      	movs	r3, #45	; 0x2d
 8000dc6:	426d      	negs	r5, r5
 8000dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dcc:	485e      	ldr	r0, [pc, #376]	; (8000f48 <_printf_i+0x244>)
 8000dce:	230a      	movs	r3, #10
 8000dd0:	e019      	b.n	8000e06 <_printf_i+0x102>
 8000dd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000dd6:	6805      	ldr	r5, [r0, #0]
 8000dd8:	600b      	str	r3, [r1, #0]
 8000dda:	bf18      	it	ne
 8000ddc:	b22d      	sxthne	r5, r5
 8000dde:	e7ef      	b.n	8000dc0 <_printf_i+0xbc>
 8000de0:	680b      	ldr	r3, [r1, #0]
 8000de2:	6825      	ldr	r5, [r4, #0]
 8000de4:	1d18      	adds	r0, r3, #4
 8000de6:	6008      	str	r0, [r1, #0]
 8000de8:	0628      	lsls	r0, r5, #24
 8000dea:	d501      	bpl.n	8000df0 <_printf_i+0xec>
 8000dec:	681d      	ldr	r5, [r3, #0]
 8000dee:	e002      	b.n	8000df6 <_printf_i+0xf2>
 8000df0:	0669      	lsls	r1, r5, #25
 8000df2:	d5fb      	bpl.n	8000dec <_printf_i+0xe8>
 8000df4:	881d      	ldrh	r5, [r3, #0]
 8000df6:	4854      	ldr	r0, [pc, #336]	; (8000f48 <_printf_i+0x244>)
 8000df8:	2f6f      	cmp	r7, #111	; 0x6f
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2308      	moveq	r3, #8
 8000dfe:	230a      	movne	r3, #10
 8000e00:	2100      	movs	r1, #0
 8000e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e06:	6866      	ldr	r6, [r4, #4]
 8000e08:	60a6      	str	r6, [r4, #8]
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	bfa2      	ittt	ge
 8000e0e:	6821      	ldrge	r1, [r4, #0]
 8000e10:	f021 0104 	bicge.w	r1, r1, #4
 8000e14:	6021      	strge	r1, [r4, #0]
 8000e16:	b90d      	cbnz	r5, 8000e1c <_printf_i+0x118>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d04d      	beq.n	8000eb8 <_printf_i+0x1b4>
 8000e1c:	4616      	mov	r6, r2
 8000e1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e22:	fb03 5711 	mls	r7, r3, r1, r5
 8000e26:	5dc7      	ldrb	r7, [r0, r7]
 8000e28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e2c:	462f      	mov	r7, r5
 8000e2e:	42bb      	cmp	r3, r7
 8000e30:	460d      	mov	r5, r1
 8000e32:	d9f4      	bls.n	8000e1e <_printf_i+0x11a>
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d10b      	bne.n	8000e50 <_printf_i+0x14c>
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	07df      	lsls	r7, r3, #31
 8000e3c:	d508      	bpl.n	8000e50 <_printf_i+0x14c>
 8000e3e:	6923      	ldr	r3, [r4, #16]
 8000e40:	6861      	ldr	r1, [r4, #4]
 8000e42:	4299      	cmp	r1, r3
 8000e44:	bfde      	ittt	le
 8000e46:	2330      	movle	r3, #48	; 0x30
 8000e48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e50:	1b92      	subs	r2, r2, r6
 8000e52:	6122      	str	r2, [r4, #16]
 8000e54:	f8cd a000 	str.w	sl, [sp]
 8000e58:	464b      	mov	r3, r9
 8000e5a:	aa03      	add	r2, sp, #12
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	4640      	mov	r0, r8
 8000e60:	f7ff fee2 	bl	8000c28 <_printf_common>
 8000e64:	3001      	adds	r0, #1
 8000e66:	d14c      	bne.n	8000f02 <_printf_i+0x1fe>
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	b004      	add	sp, #16
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4835      	ldr	r0, [pc, #212]	; (8000f48 <_printf_i+0x244>)
 8000e74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	680e      	ldr	r6, [r1, #0]
 8000e7c:	061f      	lsls	r7, r3, #24
 8000e7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e82:	600e      	str	r6, [r1, #0]
 8000e84:	d514      	bpl.n	8000eb0 <_printf_i+0x1ac>
 8000e86:	07d9      	lsls	r1, r3, #31
 8000e88:	bf44      	itt	mi
 8000e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8000e8e:	6023      	strmi	r3, [r4, #0]
 8000e90:	b91d      	cbnz	r5, 8000e9a <_printf_i+0x196>
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f023 0320 	bic.w	r3, r3, #32
 8000e98:	6023      	str	r3, [r4, #0]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	e7b0      	b.n	8000e00 <_printf_i+0xfc>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	2378      	movs	r3, #120	; 0x78
 8000ea8:	4828      	ldr	r0, [pc, #160]	; (8000f4c <_printf_i+0x248>)
 8000eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000eae:	e7e3      	b.n	8000e78 <_printf_i+0x174>
 8000eb0:	065e      	lsls	r6, r3, #25
 8000eb2:	bf48      	it	mi
 8000eb4:	b2ad      	uxthmi	r5, r5
 8000eb6:	e7e6      	b.n	8000e86 <_printf_i+0x182>
 8000eb8:	4616      	mov	r6, r2
 8000eba:	e7bb      	b.n	8000e34 <_printf_i+0x130>
 8000ebc:	680b      	ldr	r3, [r1, #0]
 8000ebe:	6826      	ldr	r6, [r4, #0]
 8000ec0:	6960      	ldr	r0, [r4, #20]
 8000ec2:	1d1d      	adds	r5, r3, #4
 8000ec4:	600d      	str	r5, [r1, #0]
 8000ec6:	0635      	lsls	r5, r6, #24
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	d501      	bpl.n	8000ed0 <_printf_i+0x1cc>
 8000ecc:	6018      	str	r0, [r3, #0]
 8000ece:	e002      	b.n	8000ed6 <_printf_i+0x1d2>
 8000ed0:	0671      	lsls	r1, r6, #25
 8000ed2:	d5fb      	bpl.n	8000ecc <_printf_i+0x1c8>
 8000ed4:	8018      	strh	r0, [r3, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	6123      	str	r3, [r4, #16]
 8000eda:	4616      	mov	r6, r2
 8000edc:	e7ba      	b.n	8000e54 <_printf_i+0x150>
 8000ede:	680b      	ldr	r3, [r1, #0]
 8000ee0:	1d1a      	adds	r2, r3, #4
 8000ee2:	600a      	str	r2, [r1, #0]
 8000ee4:	681e      	ldr	r6, [r3, #0]
 8000ee6:	6862      	ldr	r2, [r4, #4]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4630      	mov	r0, r6
 8000eec:	f7ff f978 	bl	80001e0 <memchr>
 8000ef0:	b108      	cbz	r0, 8000ef6 <_printf_i+0x1f2>
 8000ef2:	1b80      	subs	r0, r0, r6
 8000ef4:	6060      	str	r0, [r4, #4]
 8000ef6:	6863      	ldr	r3, [r4, #4]
 8000ef8:	6123      	str	r3, [r4, #16]
 8000efa:	2300      	movs	r3, #0
 8000efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f00:	e7a8      	b.n	8000e54 <_printf_i+0x150>
 8000f02:	6923      	ldr	r3, [r4, #16]
 8000f04:	4632      	mov	r2, r6
 8000f06:	4649      	mov	r1, r9
 8000f08:	4640      	mov	r0, r8
 8000f0a:	47d0      	blx	sl
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	d0ab      	beq.n	8000e68 <_printf_i+0x164>
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	079b      	lsls	r3, r3, #30
 8000f14:	d413      	bmi.n	8000f3e <_printf_i+0x23a>
 8000f16:	68e0      	ldr	r0, [r4, #12]
 8000f18:	9b03      	ldr	r3, [sp, #12]
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	bfb8      	it	lt
 8000f1e:	4618      	movlt	r0, r3
 8000f20:	e7a4      	b.n	8000e6c <_printf_i+0x168>
 8000f22:	2301      	movs	r3, #1
 8000f24:	4632      	mov	r2, r6
 8000f26:	4649      	mov	r1, r9
 8000f28:	4640      	mov	r0, r8
 8000f2a:	47d0      	blx	sl
 8000f2c:	3001      	adds	r0, #1
 8000f2e:	d09b      	beq.n	8000e68 <_printf_i+0x164>
 8000f30:	3501      	adds	r5, #1
 8000f32:	68e3      	ldr	r3, [r4, #12]
 8000f34:	9903      	ldr	r1, [sp, #12]
 8000f36:	1a5b      	subs	r3, r3, r1
 8000f38:	42ab      	cmp	r3, r5
 8000f3a:	dcf2      	bgt.n	8000f22 <_printf_i+0x21e>
 8000f3c:	e7eb      	b.n	8000f16 <_printf_i+0x212>
 8000f3e:	2500      	movs	r5, #0
 8000f40:	f104 0619 	add.w	r6, r4, #25
 8000f44:	e7f5      	b.n	8000f32 <_printf_i+0x22e>
 8000f46:	bf00      	nop
 8000f48:	080010d8 	.word	0x080010d8
 8000f4c:	080010e9 	.word	0x080010e9

08000f50 <__retarget_lock_acquire_recursive>:
 8000f50:	4770      	bx	lr

08000f52 <__retarget_lock_release_recursive>:
 8000f52:	4770      	bx	lr

08000f54 <memcpy>:
 8000f54:	440a      	add	r2, r1
 8000f56:	4291      	cmp	r1, r2
 8000f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f5c:	d100      	bne.n	8000f60 <memcpy+0xc>
 8000f5e:	4770      	bx	lr
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f6a:	4291      	cmp	r1, r2
 8000f6c:	d1f9      	bne.n	8000f62 <memcpy+0xe>
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <memmove>:
 8000f70:	4288      	cmp	r0, r1
 8000f72:	b510      	push	{r4, lr}
 8000f74:	eb01 0402 	add.w	r4, r1, r2
 8000f78:	d902      	bls.n	8000f80 <memmove+0x10>
 8000f7a:	4284      	cmp	r4, r0
 8000f7c:	4623      	mov	r3, r4
 8000f7e:	d807      	bhi.n	8000f90 <memmove+0x20>
 8000f80:	1e43      	subs	r3, r0, #1
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	d008      	beq.n	8000f98 <memmove+0x28>
 8000f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f8e:	e7f8      	b.n	8000f82 <memmove+0x12>
 8000f90:	4402      	add	r2, r0
 8000f92:	4601      	mov	r1, r0
 8000f94:	428a      	cmp	r2, r1
 8000f96:	d100      	bne.n	8000f9a <memmove+0x2a>
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fa2:	e7f7      	b.n	8000f94 <memmove+0x24>

08000fa4 <_realloc_r>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	4607      	mov	r7, r0
 8000fa8:	4614      	mov	r4, r2
 8000faa:	460e      	mov	r6, r1
 8000fac:	b921      	cbnz	r1, 8000fb8 <_realloc_r+0x14>
 8000fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	f7ff bc46 	b.w	8000844 <_malloc_r>
 8000fb8:	b922      	cbnz	r2, 8000fc4 <_realloc_r+0x20>
 8000fba:	f7ff fbf3 	bl	80007a4 <_free_r>
 8000fbe:	4625      	mov	r5, r4
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fc4:	f000 f814 	bl	8000ff0 <_malloc_usable_size_r>
 8000fc8:	42a0      	cmp	r0, r4
 8000fca:	d20f      	bcs.n	8000fec <_realloc_r+0x48>
 8000fcc:	4621      	mov	r1, r4
 8000fce:	4638      	mov	r0, r7
 8000fd0:	f7ff fc38 	bl	8000844 <_malloc_r>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d0f2      	beq.n	8000fc0 <_realloc_r+0x1c>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	4622      	mov	r2, r4
 8000fde:	f7ff ffb9 	bl	8000f54 <memcpy>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f7ff fbdd 	bl	80007a4 <_free_r>
 8000fea:	e7e9      	b.n	8000fc0 <_realloc_r+0x1c>
 8000fec:	4635      	mov	r5, r6
 8000fee:	e7e7      	b.n	8000fc0 <_realloc_r+0x1c>

08000ff0 <_malloc_usable_size_r>:
 8000ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ff4:	1f18      	subs	r0, r3, #4
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bfbc      	itt	lt
 8000ffa:	580b      	ldrlt	r3, [r1, r0]
 8000ffc:	18c0      	addlt	r0, r0, r3
 8000ffe:	4770      	bx	lr

08001000 <_sbrk>:
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <_sbrk+0x14>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4602      	mov	r2, r0
 8001006:	b909      	cbnz	r1, 800100c <_sbrk+0xc>
 8001008:	4903      	ldr	r1, [pc, #12]	; (8001018 <_sbrk+0x18>)
 800100a:	6019      	str	r1, [r3, #0]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	4402      	add	r2, r0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	4770      	bx	lr
 8001014:	2000026c 	.word	0x2000026c
 8001018:	20000298 	.word	0x20000298

0800101c <_init>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr

08001028 <_fini>:
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	bf00      	nop
 800102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102e:	bc08      	pop	{r3}
 8001030:	469e      	mov	lr, r3
 8001032:	4770      	bx	lr
