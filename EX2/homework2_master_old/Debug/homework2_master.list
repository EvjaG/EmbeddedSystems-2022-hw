
homework2_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08000fd0  08000fd0  00010fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b4  080010b4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080010b4  080010b4  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b4  080010b4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080010bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200000c8  08001184  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08001184  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ee4  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000745  00000000  00000000  00022fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00023728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00023800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aef  00000000  00000000  000238a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001641  00000000  00000000  0003c38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087394  00000000  00000000  0003d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000628  00000000  00000000  000c4db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000fb8 	.word	0x08000fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	08000fb8 	.word	0x08000fb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <inputTime>:
    SPI_Receive(timeFromSlave,8);
	return timeFromSlave;
}
//this will be the function from reading the input from the user
//return 0 if fail, otherwise return 1
int inputTime(char* input){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	SPI_Transmit(input,8);
 80002c4:	2108      	movs	r1, #8
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 f91e 	bl	8000508 <SPI_Transmit>
	return 1;
 80002cc:	2301      	movs	r3, #1
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <USART2_EXTI26_IRQHandler>:
//	print("%s\n",toPrint);
//	free(toPrint);
//}

//--------------------------------------------------------UART input handler function
void USART2_EXTI26_IRQHandler(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

	if(RX_BUF_PLACE >= RX_BUF_SIZE)
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <USART2_EXTI26_IRQHandler+0x6c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b13      	cmp	r3, #19
 80002e4:	dd02      	ble.n	80002ec <USART2_EXTI26_IRQHandler+0x14>
		RX_BUF_PLACE=0;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <USART2_EXTI26_IRQHandler+0x6c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
	char newChar = (uint8_t)USART2->RDR;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <USART2_EXTI26_IRQHandler+0x70>)
 80002ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	71fb      	strb	r3, [r7, #7]
	if(newChar==(uint8_t)'\0' || newChar==(uint8_t)'\n' || newChar==(uint8_t)'\r'){
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d005      	beq.n	8000306 <USART2_EXTI26_IRQHandler+0x2e>
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b0a      	cmp	r3, #10
 80002fe:	d002      	beq.n	8000306 <USART2_EXTI26_IRQHandler+0x2e>
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b0d      	cmp	r3, #13
 8000304:	d112      	bne.n	800032c <USART2_EXTI26_IRQHandler+0x54>
		if (inputTime(RX_BUF)!=1)
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <USART2_EXTI26_IRQHandler+0x74>)
 8000308:	f7ff ffd8 	bl	80002bc <inputTime>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	d003      	beq.n	800031a <USART2_EXTI26_IRQHandler+0x42>
			print("To change time please input in the following format  it:\t%s\n",format);
 8000312:	490f      	ldr	r1, [pc, #60]	; (8000350 <USART2_EXTI26_IRQHandler+0x78>)
 8000314:	480f      	ldr	r0, [pc, #60]	; (8000354 <USART2_EXTI26_IRQHandler+0x7c>)
 8000316:	f000 f945 	bl	80005a4 <print>
		RX_BUF_PLACE=0;
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <USART2_EXTI26_IRQHandler+0x6c>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
		memset(RX_BUF,'\0',RX_BUF_SIZE);
 8000320:	2214      	movs	r2, #20
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <USART2_EXTI26_IRQHandler+0x74>)
 8000326:	f000 fa03 	bl	8000730 <memset>
		return;
 800032a:	e007      	b.n	800033c <USART2_EXTI26_IRQHandler+0x64>
	}
	RX_BUF[RX_BUF_PLACE++]=newChar;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <USART2_EXTI26_IRQHandler+0x6c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	1c5a      	adds	r2, r3, #1
 8000332:	4904      	ldr	r1, [pc, #16]	; (8000344 <USART2_EXTI26_IRQHandler+0x6c>)
 8000334:	600a      	str	r2, [r1, #0]
 8000336:	4905      	ldr	r1, [pc, #20]	; (800034c <USART2_EXTI26_IRQHandler+0x74>)
 8000338:	79fa      	ldrb	r2, [r7, #7]
 800033a:	54ca      	strb	r2, [r1, r3]

}
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000290 	.word	0x20000290
 8000348:	40004400 	.word	0x40004400
 800034c:	2000027c 	.word	0x2000027c
 8000350:	20000000 	.word	0x20000000
 8000354:	08000fd0 	.word	0x08000fd0

08000358 <SPI1_IRQHandler>:


//--------------------------------------------------------SPI1 interrupt handler function
void SPI1_IRQHandler(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	memset(timeFromSlave,'\0',9);
 800035c:	2209      	movs	r2, #9
 800035e:	2100      	movs	r1, #0
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <SPI1_IRQHandler+0x1c>)
 8000362:	f000 f9e5 	bl	8000730 <memset>
	SPI_Receive(timeFromSlave,8);
 8000366:	2108      	movs	r1, #8
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <SPI1_IRQHandler+0x1c>)
 800036a:	f000 f8f5 	bl	8000558 <SPI_Receive>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000e4 	.word	0x200000e4

08000378 <main>:


// ------------------------------------------------------ Main
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000E0000;
 800037e:	4b34      	ldr	r3, [pc, #208]	; (8000450 <main+0xd8>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a33      	ldr	r2, [pc, #204]	; (8000450 <main+0xd8>)
 8000384:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000388:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 800038a:	4b31      	ldr	r3, [pc, #196]	; (8000450 <main+0xd8>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a30      	ldr	r2, [pc, #192]	; (8000450 <main+0xd8>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 8000396:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <main+0xd8>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <main+0xd8>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <main+0xdc>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	4a27      	ldr	r2, [pc, #156]	; (8000454 <main+0xdc>)
 80003b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003bc:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <main+0xdc>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a24      	ldr	r2, [pc, #144]	; (8000454 <main+0xdc>)
 80003c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c8:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 80003ca:	4b23      	ldr	r3, [pc, #140]	; (8000458 <main+0xe0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a22      	ldr	r2, [pc, #136]	; (8000458 <main+0xe0>)
 80003d0:	f043 0320 	orr.w	r3, r3, #32
 80003d4:	6153      	str	r3, [r2, #20]
//    NVIC_EnableIRQ(EXTI15_10_IRQn); // enable button - core interrupt
// ------------------------------------------------------
    // Configure GPIOA pin 5 as output, 0 as input.
    GPIOA->MODER |= 0x00000400;
 80003d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e4:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 0 as input.
//    GPIOA->MODER &= ~0x00000003;
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000021; // (1 << 5);
 80003e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f0:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 80003f4:	6053      	str	r3, [r2, #4]
//    GPIOA->ODR &= ~0x1;

    USART2_init();
 80003f6:	f000 f8ed 	bl	80005d4 <USART2_init>
	SPI1_init();
 80003fa:	f000 f839 	bl	8000470 <SPI1_init>
    NVIC_EnableIRQ(USART2_IRQn); //usart2 rx interrupt function enable
 80003fe:	2026      	movs	r0, #38	; 0x26
 8000400:	f7ff ff3e 	bl	8000280 <__NVIC_EnableIRQ>
    print("Hello!\nThis is the primary machine in the 2-machine exercise you are running!\n");
 8000404:	4815      	ldr	r0, [pc, #84]	; (800045c <main+0xe4>)
 8000406:	f000 f8cd 	bl	80005a4 <print>
    print("To change time please input in the following format  it:\t%s\n",format);
 800040a:	4915      	ldr	r1, [pc, #84]	; (8000460 <main+0xe8>)
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <main+0xec>)
 800040e:	f000 f8c9 	bl	80005a4 <print>
	memset(timeFromSlave,'\0',9);
 8000412:	2209      	movs	r2, #9
 8000414:	2100      	movs	r1, #0
 8000416:	4814      	ldr	r0, [pc, #80]	; (8000468 <main+0xf0>)
 8000418:	f000 f98a 	bl	8000730 <memset>

	while(1){
		if((GPIOA->IDR&0x100)==0x100){
 800041c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000420:	691b      	ldr	r3, [r3, #16]
 8000422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800042a:	d10d      	bne.n	8000448 <main+0xd0>
			SPI_Receive(timeFromSlave, 8);
 800042c:	2108      	movs	r1, #8
 800042e:	480e      	ldr	r0, [pc, #56]	; (8000468 <main+0xf0>)
 8000430:	f000 f892 	bl	8000558 <SPI_Receive>
			print("We just detect a movement at %s\n",timeFromSlave);
 8000434:	490c      	ldr	r1, [pc, #48]	; (8000468 <main+0xf0>)
 8000436:	480d      	ldr	r0, [pc, #52]	; (800046c <main+0xf4>)
 8000438:	f000 f8b4 	bl	80005a4 <print>
			memset(timeFromSlave,'\0',9);
 800043c:	2209      	movs	r2, #9
 800043e:	2100      	movs	r1, #0
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <main+0xf0>)
 8000442:	f000 f975 	bl	8000730 <memset>
 8000446:	e7e9      	b.n	800041c <main+0xa4>

		}
		else{
			int i = 1;
 8000448:	2301      	movs	r3, #1
 800044a:	607b      	str	r3, [r7, #4]
		if((GPIOA->IDR&0x100)==0x100){
 800044c:	e7e6      	b.n	800041c <main+0xa4>
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40010400 	.word	0x40010400
 8000458:	40010000 	.word	0x40010000
 800045c:	08001010 	.word	0x08001010
 8000460:	20000000 	.word	0x20000000
 8000464:	08000fd0 	.word	0x08000fd0
 8000468:	200000e4 	.word	0x200000e4
 800046c:	08001060 	.word	0x08001060

08000470 <SPI1_init>:
int A_Buffer_PLACE=0;



void SPI1_init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	//TODO - initialize SPI values (page 962 of user manual)
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	2100      	movs	r1, #0
 8000478:	481e      	ldr	r0, [pc, #120]	; (80004f4 <SPI1_init+0x84>)
 800047a:	f000 f959 	bl	8000730 <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	2100      	movs	r1, #0
 8000482:	481d      	ldr	r0, [pc, #116]	; (80004f8 <SPI1_init+0x88>)
 8000484:	f000 f954 	bl	8000730 <memset>
	*SPI_B_Buffer='\0';
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <SPI1_init+0x88>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]

	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <SPI1_init+0x8c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <SPI1_init+0x8c>)
 8000494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000498:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 800049a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a4:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 80004a8:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80004b8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80004bc:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000080; // Configure GPIOB pins 3  as alternate function 5, which is SPI1.
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <SPI1_init+0x90>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <SPI1_init+0x90>)
 80004c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c8:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PB3
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <SPI1_init+0x90>)
 80004cc:	6a1b      	ldr	r3, [r3, #32]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <SPI1_init+0x90>)
 80004d0:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80004d4:	6213      	str	r3, [r2, #32]
	SPI1->CR2 |= 0x000000044;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <SPI1_init+0x94>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <SPI1_init+0x94>)
 80004dc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80004e0:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x00000007C;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <SPI1_init+0x94>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <SPI1_init+0x94>)
 80004e8:	f043 037c 	orr.w	r3, r3, #124	; 0x7c
 80004ec:	6013      	str	r3, [r2, #0]

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000f0 	.word	0x200000f0
 80004f8:	20000170 	.word	0x20000170
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	40013000 	.word	0x40013000

08000508 <SPI_Transmit>:


void SPI_Transmit (char *data, int size)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]

	int i=0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	while (i<size){
 8000516:	e012      	b.n	800053e <SPI_Transmit+0x36>
	   SPI1->DR = data[i];  // load the data into the Data Register
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <SPI_Transmit+0x4c>)
 8000522:	60da      	str	r2, [r3, #12]
	   while((SPI1->SR&0x3)!=0x3){}
 8000524:	bf00      	nop
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <SPI_Transmit+0x4c>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	f003 0303 	and.w	r3, r3, #3
 800052e:	2b03      	cmp	r3, #3
 8000530:	d1f9      	bne.n	8000526 <SPI_Transmit+0x1e>
	   uint8_t temp = SPI1->DR;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SPI_Transmit+0x4c>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	72fb      	strb	r3, [r7, #11]
	   i++;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
	while (i<size){
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	429a      	cmp	r2, r3
 8000544:	dbe8      	blt.n	8000518 <SPI_Transmit+0x10>
	}

}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40013000 	.word	0x40013000

08000558 <SPI_Receive>:

void SPI_Receive (char *data, int size)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	while (size){
 8000562:	e013      	b.n	800058c <SPI_Receive+0x34>
		SPI1->DR = 0;  // send dummy data
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <SPI_Receive+0x48>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
		while((SPI1->SR&0x3)!=0x3){}
 800056a:	bf00      	nop
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <SPI_Receive+0x48>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f003 0303 	and.w	r3, r3, #3
 8000574:	2b03      	cmp	r3, #3
 8000576:	d1f9      	bne.n	800056c <SPI_Receive+0x14>
		*data++ = (SPI1->DR);
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <SPI_Receive+0x48>)
 800057a:	68d9      	ldr	r1, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	607a      	str	r2, [r7, #4]
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
		size--;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	603b      	str	r3, [r7, #0]
	while (size){
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1e8      	bne.n	8000564 <SPI_Receive+0xc>
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40013000 	.word	0x40013000

080005a4 <print>:
 80005a4:	b40f      	push	{r0, r1, r2, r3}
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	6939      	ldr	r1, [r7, #16]
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <print+0x2c>)
 80005b8:	f000 f8d8 	bl	800076c <vsiprintf>
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <print+0x2c>)
 80005be:	f000 f847 	bl	8000650 <USART2_print>
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr
 80005d0:	200001f0 	.word	0x200001f0

080005d4 <USART2_init>:
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <USART2_init+0x6c>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <USART2_init+0x6c>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <USART2_init+0x6c>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <USART2_init+0x6c>)
 80005ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ee:	61d3      	str	r3, [r2, #28]
 80005f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800060e:	6213      	str	r3, [r2, #32]
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <USART2_init+0x70>)
 8000612:	f240 3241 	movw	r2, #833	; 0x341
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <USART2_init+0x70>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	2214      	movs	r2, #20
 8000620:	2100      	movs	r1, #0
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <USART2_init+0x74>)
 8000624:	f000 f884 	bl	8000730 <memset>
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <USART2_init+0x78>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <USART2_init+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <USART2_init+0x70>)
 8000634:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000
 8000644:	40004400 	.word	0x40004400
 8000648:	2000027c 	.word	0x2000027c
 800064c:	20000290 	.word	0x20000290

08000650 <USART2_print>:
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	e00e      	b.n	8000678 <USART2_print+0x28>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <USART2_print+0x40>)
 8000660:	b292      	uxth	r2, r2
 8000662:	851a      	strh	r2, [r3, #40]	; 0x28
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	bf00      	nop
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <USART2_print+0x40>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f9      	beq.n	800066c <USART2_print+0x1c>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ec      	bne.n	800065a <USART2_print+0xa>
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40004400 	.word	0x40004400

08000694 <Reset_Handler>:
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x2>)
 8000696:	4685      	mov	sp, r0
 8000698:	f3af 8000 	nop.w
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
 80006a2:	2300      	movs	r3, #0
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:
 80006a6:	58d4      	ldr	r4, [r2, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:
 80006ac:	18c4      	adds	r4, r0, r3
 80006ae:	428c      	cmp	r4, r1
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
 80006b6:	2300      	movs	r3, #0
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:
 80006be:	42a2      	cmp	r2, r4
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>
 80006c2:	f000 f811 	bl	80006e8 <__libc_init_array>
 80006c6:	f7ff fe57 	bl	8000378 <main>

080006ca <LoopForever>:
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
 80006cc:	20010000 	.word	0x20010000
 80006d0:	20000000 	.word	0x20000000
 80006d4:	200000c8 	.word	0x200000c8
 80006d8:	080010bc 	.word	0x080010bc
 80006dc:	200000c8 	.word	0x200000c8
 80006e0:	200002a4 	.word	0x200002a4

080006e4 <ADC1_2_IRQHandler>:
 80006e4:	e7fe      	b.n	80006e4 <ADC1_2_IRQHandler>
	...

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006ee:	1b64      	subs	r4, r4, r5
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2600      	movs	r6, #0
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4d0b      	ldr	r5, [pc, #44]	; (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	; (800072c <__libc_init_array+0x44>)
 80006fc:	f000 fc5c 	bl	8000fb8 <_init>
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2600      	movs	r6, #0
 8000706:	42a6      	cmp	r6, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000710:	4798      	blx	r3
 8000712:	3601      	adds	r6, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f855 3b04 	ldr.w	r3, [r5], #4
 800071a:	4798      	blx	r3
 800071c:	3601      	adds	r6, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	080010b4 	.word	0x080010b4
 8000724:	080010b4 	.word	0x080010b4
 8000728:	080010b4 	.word	0x080010b4
 800072c:	080010b8 	.word	0x080010b8

08000730 <memset>:
 8000730:	4402      	add	r2, r0
 8000732:	4603      	mov	r3, r0
 8000734:	4293      	cmp	r3, r2
 8000736:	d100      	bne.n	800073a <memset+0xa>
 8000738:	4770      	bx	lr
 800073a:	f803 1b01 	strb.w	r1, [r3], #1
 800073e:	e7f9      	b.n	8000734 <memset+0x4>

08000740 <_vsiprintf_r>:
 8000740:	b500      	push	{lr}
 8000742:	b09b      	sub	sp, #108	; 0x6c
 8000744:	9100      	str	r1, [sp, #0]
 8000746:	9104      	str	r1, [sp, #16]
 8000748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800074c:	9105      	str	r1, [sp, #20]
 800074e:	9102      	str	r1, [sp, #8]
 8000750:	4905      	ldr	r1, [pc, #20]	; (8000768 <_vsiprintf_r+0x28>)
 8000752:	9103      	str	r1, [sp, #12]
 8000754:	4669      	mov	r1, sp
 8000756:	f000 f86f 	bl	8000838 <_svfiprintf_r>
 800075a:	9b00      	ldr	r3, [sp, #0]
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	b01b      	add	sp, #108	; 0x6c
 8000762:	f85d fb04 	ldr.w	pc, [sp], #4
 8000766:	bf00      	nop
 8000768:	ffff0208 	.word	0xffff0208

0800076c <vsiprintf>:
 800076c:	4613      	mov	r3, r2
 800076e:	460a      	mov	r2, r1
 8000770:	4601      	mov	r1, r0
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <vsiprintf+0x10>)
 8000774:	6800      	ldr	r0, [r0, #0]
 8000776:	f7ff bfe3 	b.w	8000740 <_vsiprintf_r>
 800077a:	bf00      	nop
 800077c:	20000064 	.word	0x20000064

08000780 <__ssputs_r>:
 8000780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000784:	688e      	ldr	r6, [r1, #8]
 8000786:	429e      	cmp	r6, r3
 8000788:	4682      	mov	sl, r0
 800078a:	460c      	mov	r4, r1
 800078c:	4690      	mov	r8, r2
 800078e:	461f      	mov	r7, r3
 8000790:	d838      	bhi.n	8000804 <__ssputs_r+0x84>
 8000792:	898a      	ldrh	r2, [r1, #12]
 8000794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000798:	d032      	beq.n	8000800 <__ssputs_r+0x80>
 800079a:	6825      	ldr	r5, [r4, #0]
 800079c:	6909      	ldr	r1, [r1, #16]
 800079e:	eba5 0901 	sub.w	r9, r5, r1
 80007a2:	6965      	ldr	r5, [r4, #20]
 80007a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007ac:	3301      	adds	r3, #1
 80007ae:	444b      	add	r3, r9
 80007b0:	106d      	asrs	r5, r5, #1
 80007b2:	429d      	cmp	r5, r3
 80007b4:	bf38      	it	cc
 80007b6:	461d      	movcc	r5, r3
 80007b8:	0553      	lsls	r3, r2, #21
 80007ba:	d531      	bpl.n	8000820 <__ssputs_r+0xa0>
 80007bc:	4629      	mov	r1, r5
 80007be:	f000 fb47 	bl	8000e50 <_malloc_r>
 80007c2:	4606      	mov	r6, r0
 80007c4:	b950      	cbnz	r0, 80007dc <__ssputs_r+0x5c>
 80007c6:	230c      	movs	r3, #12
 80007c8:	f8ca 3000 	str.w	r3, [sl]
 80007cc:	89a3      	ldrh	r3, [r4, #12]
 80007ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d2:	81a3      	strh	r3, [r4, #12]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007dc:	6921      	ldr	r1, [r4, #16]
 80007de:	464a      	mov	r2, r9
 80007e0:	f000 fabe 	bl	8000d60 <memcpy>
 80007e4:	89a3      	ldrh	r3, [r4, #12]
 80007e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80007ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ee:	81a3      	strh	r3, [r4, #12]
 80007f0:	6126      	str	r6, [r4, #16]
 80007f2:	6165      	str	r5, [r4, #20]
 80007f4:	444e      	add	r6, r9
 80007f6:	eba5 0509 	sub.w	r5, r5, r9
 80007fa:	6026      	str	r6, [r4, #0]
 80007fc:	60a5      	str	r5, [r4, #8]
 80007fe:	463e      	mov	r6, r7
 8000800:	42be      	cmp	r6, r7
 8000802:	d900      	bls.n	8000806 <__ssputs_r+0x86>
 8000804:	463e      	mov	r6, r7
 8000806:	4632      	mov	r2, r6
 8000808:	6820      	ldr	r0, [r4, #0]
 800080a:	4641      	mov	r1, r8
 800080c:	f000 fab6 	bl	8000d7c <memmove>
 8000810:	68a3      	ldr	r3, [r4, #8]
 8000812:	6822      	ldr	r2, [r4, #0]
 8000814:	1b9b      	subs	r3, r3, r6
 8000816:	4432      	add	r2, r6
 8000818:	60a3      	str	r3, [r4, #8]
 800081a:	6022      	str	r2, [r4, #0]
 800081c:	2000      	movs	r0, #0
 800081e:	e7db      	b.n	80007d8 <__ssputs_r+0x58>
 8000820:	462a      	mov	r2, r5
 8000822:	f000 fb6f 	bl	8000f04 <_realloc_r>
 8000826:	4606      	mov	r6, r0
 8000828:	2800      	cmp	r0, #0
 800082a:	d1e1      	bne.n	80007f0 <__ssputs_r+0x70>
 800082c:	6921      	ldr	r1, [r4, #16]
 800082e:	4650      	mov	r0, sl
 8000830:	f000 fabe 	bl	8000db0 <_free_r>
 8000834:	e7c7      	b.n	80007c6 <__ssputs_r+0x46>
	...

08000838 <_svfiprintf_r>:
 8000838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800083c:	4698      	mov	r8, r3
 800083e:	898b      	ldrh	r3, [r1, #12]
 8000840:	061b      	lsls	r3, r3, #24
 8000842:	b09d      	sub	sp, #116	; 0x74
 8000844:	4607      	mov	r7, r0
 8000846:	460d      	mov	r5, r1
 8000848:	4614      	mov	r4, r2
 800084a:	d50e      	bpl.n	800086a <_svfiprintf_r+0x32>
 800084c:	690b      	ldr	r3, [r1, #16]
 800084e:	b963      	cbnz	r3, 800086a <_svfiprintf_r+0x32>
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	f000 fafd 	bl	8000e50 <_malloc_r>
 8000856:	6028      	str	r0, [r5, #0]
 8000858:	6128      	str	r0, [r5, #16]
 800085a:	b920      	cbnz	r0, 8000866 <_svfiprintf_r+0x2e>
 800085c:	230c      	movs	r3, #12
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	e0d1      	b.n	8000a0a <_svfiprintf_r+0x1d2>
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	616b      	str	r3, [r5, #20]
 800086a:	2300      	movs	r3, #0
 800086c:	9309      	str	r3, [sp, #36]	; 0x24
 800086e:	2320      	movs	r3, #32
 8000870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000874:	f8cd 800c 	str.w	r8, [sp, #12]
 8000878:	2330      	movs	r3, #48	; 0x30
 800087a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000a24 <_svfiprintf_r+0x1ec>
 800087e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000882:	f04f 0901 	mov.w	r9, #1
 8000886:	4623      	mov	r3, r4
 8000888:	469a      	mov	sl, r3
 800088a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800088e:	b10a      	cbz	r2, 8000894 <_svfiprintf_r+0x5c>
 8000890:	2a25      	cmp	r2, #37	; 0x25
 8000892:	d1f9      	bne.n	8000888 <_svfiprintf_r+0x50>
 8000894:	ebba 0b04 	subs.w	fp, sl, r4
 8000898:	d00b      	beq.n	80008b2 <_svfiprintf_r+0x7a>
 800089a:	465b      	mov	r3, fp
 800089c:	4622      	mov	r2, r4
 800089e:	4629      	mov	r1, r5
 80008a0:	4638      	mov	r0, r7
 80008a2:	f7ff ff6d 	bl	8000780 <__ssputs_r>
 80008a6:	3001      	adds	r0, #1
 80008a8:	f000 80aa 	beq.w	8000a00 <_svfiprintf_r+0x1c8>
 80008ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008ae:	445a      	add	r2, fp
 80008b0:	9209      	str	r2, [sp, #36]	; 0x24
 80008b2:	f89a 3000 	ldrb.w	r3, [sl]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 80a2 	beq.w	8000a00 <_svfiprintf_r+0x1c8>
 80008bc:	2300      	movs	r3, #0
 80008be:	f04f 32ff 	mov.w	r2, #4294967295
 80008c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008c6:	f10a 0a01 	add.w	sl, sl, #1
 80008ca:	9304      	str	r3, [sp, #16]
 80008cc:	9307      	str	r3, [sp, #28]
 80008ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80008d2:	931a      	str	r3, [sp, #104]	; 0x68
 80008d4:	4654      	mov	r4, sl
 80008d6:	2205      	movs	r2, #5
 80008d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008dc:	4851      	ldr	r0, [pc, #324]	; (8000a24 <_svfiprintf_r+0x1ec>)
 80008de:	f7ff fc7f 	bl	80001e0 <memchr>
 80008e2:	9a04      	ldr	r2, [sp, #16]
 80008e4:	b9d8      	cbnz	r0, 800091e <_svfiprintf_r+0xe6>
 80008e6:	06d0      	lsls	r0, r2, #27
 80008e8:	bf44      	itt	mi
 80008ea:	2320      	movmi	r3, #32
 80008ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008f0:	0711      	lsls	r1, r2, #28
 80008f2:	bf44      	itt	mi
 80008f4:	232b      	movmi	r3, #43	; 0x2b
 80008f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008fa:	f89a 3000 	ldrb.w	r3, [sl]
 80008fe:	2b2a      	cmp	r3, #42	; 0x2a
 8000900:	d015      	beq.n	800092e <_svfiprintf_r+0xf6>
 8000902:	9a07      	ldr	r2, [sp, #28]
 8000904:	4654      	mov	r4, sl
 8000906:	2000      	movs	r0, #0
 8000908:	f04f 0c0a 	mov.w	ip, #10
 800090c:	4621      	mov	r1, r4
 800090e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000912:	3b30      	subs	r3, #48	; 0x30
 8000914:	2b09      	cmp	r3, #9
 8000916:	d94e      	bls.n	80009b6 <_svfiprintf_r+0x17e>
 8000918:	b1b0      	cbz	r0, 8000948 <_svfiprintf_r+0x110>
 800091a:	9207      	str	r2, [sp, #28]
 800091c:	e014      	b.n	8000948 <_svfiprintf_r+0x110>
 800091e:	eba0 0308 	sub.w	r3, r0, r8
 8000922:	fa09 f303 	lsl.w	r3, r9, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	9304      	str	r3, [sp, #16]
 800092a:	46a2      	mov	sl, r4
 800092c:	e7d2      	b.n	80008d4 <_svfiprintf_r+0x9c>
 800092e:	9b03      	ldr	r3, [sp, #12]
 8000930:	1d19      	adds	r1, r3, #4
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	9103      	str	r1, [sp, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bfbb      	ittet	lt
 800093a:	425b      	neglt	r3, r3
 800093c:	f042 0202 	orrlt.w	r2, r2, #2
 8000940:	9307      	strge	r3, [sp, #28]
 8000942:	9307      	strlt	r3, [sp, #28]
 8000944:	bfb8      	it	lt
 8000946:	9204      	strlt	r2, [sp, #16]
 8000948:	7823      	ldrb	r3, [r4, #0]
 800094a:	2b2e      	cmp	r3, #46	; 0x2e
 800094c:	d10c      	bne.n	8000968 <_svfiprintf_r+0x130>
 800094e:	7863      	ldrb	r3, [r4, #1]
 8000950:	2b2a      	cmp	r3, #42	; 0x2a
 8000952:	d135      	bne.n	80009c0 <_svfiprintf_r+0x188>
 8000954:	9b03      	ldr	r3, [sp, #12]
 8000956:	1d1a      	adds	r2, r3, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	9203      	str	r2, [sp, #12]
 800095c:	2b00      	cmp	r3, #0
 800095e:	bfb8      	it	lt
 8000960:	f04f 33ff 	movlt.w	r3, #4294967295
 8000964:	3402      	adds	r4, #2
 8000966:	9305      	str	r3, [sp, #20]
 8000968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000a34 <_svfiprintf_r+0x1fc>
 800096c:	7821      	ldrb	r1, [r4, #0]
 800096e:	2203      	movs	r2, #3
 8000970:	4650      	mov	r0, sl
 8000972:	f7ff fc35 	bl	80001e0 <memchr>
 8000976:	b140      	cbz	r0, 800098a <_svfiprintf_r+0x152>
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	eba0 000a 	sub.w	r0, r0, sl
 800097e:	fa03 f000 	lsl.w	r0, r3, r0
 8000982:	9b04      	ldr	r3, [sp, #16]
 8000984:	4303      	orrs	r3, r0
 8000986:	3401      	adds	r4, #1
 8000988:	9304      	str	r3, [sp, #16]
 800098a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <_svfiprintf_r+0x1f0>)
 8000990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000994:	2206      	movs	r2, #6
 8000996:	f7ff fc23 	bl	80001e0 <memchr>
 800099a:	2800      	cmp	r0, #0
 800099c:	d038      	beq.n	8000a10 <_svfiprintf_r+0x1d8>
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <_svfiprintf_r+0x1f4>)
 80009a0:	bb1b      	cbnz	r3, 80009ea <_svfiprintf_r+0x1b2>
 80009a2:	9b03      	ldr	r3, [sp, #12]
 80009a4:	3307      	adds	r3, #7
 80009a6:	f023 0307 	bic.w	r3, r3, #7
 80009aa:	3308      	adds	r3, #8
 80009ac:	9303      	str	r3, [sp, #12]
 80009ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009b0:	4433      	add	r3, r6
 80009b2:	9309      	str	r3, [sp, #36]	; 0x24
 80009b4:	e767      	b.n	8000886 <_svfiprintf_r+0x4e>
 80009b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80009ba:	460c      	mov	r4, r1
 80009bc:	2001      	movs	r0, #1
 80009be:	e7a5      	b.n	800090c <_svfiprintf_r+0xd4>
 80009c0:	2300      	movs	r3, #0
 80009c2:	3401      	adds	r4, #1
 80009c4:	9305      	str	r3, [sp, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 0c0a 	mov.w	ip, #10
 80009cc:	4620      	mov	r0, r4
 80009ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009d2:	3a30      	subs	r2, #48	; 0x30
 80009d4:	2a09      	cmp	r2, #9
 80009d6:	d903      	bls.n	80009e0 <_svfiprintf_r+0x1a8>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0c5      	beq.n	8000968 <_svfiprintf_r+0x130>
 80009dc:	9105      	str	r1, [sp, #20]
 80009de:	e7c3      	b.n	8000968 <_svfiprintf_r+0x130>
 80009e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80009e4:	4604      	mov	r4, r0
 80009e6:	2301      	movs	r3, #1
 80009e8:	e7f0      	b.n	80009cc <_svfiprintf_r+0x194>
 80009ea:	ab03      	add	r3, sp, #12
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	462a      	mov	r2, r5
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <_svfiprintf_r+0x1f8>)
 80009f2:	a904      	add	r1, sp, #16
 80009f4:	4638      	mov	r0, r7
 80009f6:	f3af 8000 	nop.w
 80009fa:	1c42      	adds	r2, r0, #1
 80009fc:	4606      	mov	r6, r0
 80009fe:	d1d6      	bne.n	80009ae <_svfiprintf_r+0x176>
 8000a00:	89ab      	ldrh	r3, [r5, #12]
 8000a02:	065b      	lsls	r3, r3, #25
 8000a04:	f53f af2c 	bmi.w	8000860 <_svfiprintf_r+0x28>
 8000a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a0a:	b01d      	add	sp, #116	; 0x74
 8000a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a10:	ab03      	add	r3, sp, #12
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	462a      	mov	r2, r5
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <_svfiprintf_r+0x1f8>)
 8000a18:	a904      	add	r1, sp, #16
 8000a1a:	4638      	mov	r0, r7
 8000a1c:	f000 f87a 	bl	8000b14 <_printf_i>
 8000a20:	e7eb      	b.n	80009fa <_svfiprintf_r+0x1c2>
 8000a22:	bf00      	nop
 8000a24:	08001081 	.word	0x08001081
 8000a28:	0800108b 	.word	0x0800108b
 8000a2c:	00000000 	.word	0x00000000
 8000a30:	08000781 	.word	0x08000781
 8000a34:	08001087 	.word	0x08001087

08000a38 <_printf_common>:
 8000a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a3c:	4616      	mov	r6, r2
 8000a3e:	4699      	mov	r9, r3
 8000a40:	688a      	ldr	r2, [r1, #8]
 8000a42:	690b      	ldr	r3, [r1, #16]
 8000a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	bfb8      	it	lt
 8000a4c:	4613      	movlt	r3, r2
 8000a4e:	6033      	str	r3, [r6, #0]
 8000a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000a54:	4607      	mov	r7, r0
 8000a56:	460c      	mov	r4, r1
 8000a58:	b10a      	cbz	r2, 8000a5e <_printf_common+0x26>
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	6033      	str	r3, [r6, #0]
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	0699      	lsls	r1, r3, #26
 8000a62:	bf42      	ittt	mi
 8000a64:	6833      	ldrmi	r3, [r6, #0]
 8000a66:	3302      	addmi	r3, #2
 8000a68:	6033      	strmi	r3, [r6, #0]
 8000a6a:	6825      	ldr	r5, [r4, #0]
 8000a6c:	f015 0506 	ands.w	r5, r5, #6
 8000a70:	d106      	bne.n	8000a80 <_printf_common+0x48>
 8000a72:	f104 0a19 	add.w	sl, r4, #25
 8000a76:	68e3      	ldr	r3, [r4, #12]
 8000a78:	6832      	ldr	r2, [r6, #0]
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	42ab      	cmp	r3, r5
 8000a7e:	dc26      	bgt.n	8000ace <_printf_common+0x96>
 8000a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000a84:	1e13      	subs	r3, r2, #0
 8000a86:	6822      	ldr	r2, [r4, #0]
 8000a88:	bf18      	it	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	0692      	lsls	r2, r2, #26
 8000a8e:	d42b      	bmi.n	8000ae8 <_printf_common+0xb0>
 8000a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a94:	4649      	mov	r1, r9
 8000a96:	4638      	mov	r0, r7
 8000a98:	47c0      	blx	r8
 8000a9a:	3001      	adds	r0, #1
 8000a9c:	d01e      	beq.n	8000adc <_printf_common+0xa4>
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	68e5      	ldr	r5, [r4, #12]
 8000aa2:	6832      	ldr	r2, [r6, #0]
 8000aa4:	f003 0306 	and.w	r3, r3, #6
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	bf08      	it	eq
 8000aac:	1aad      	subeq	r5, r5, r2
 8000aae:	68a3      	ldr	r3, [r4, #8]
 8000ab0:	6922      	ldr	r2, [r4, #16]
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ab8:	2500      	movne	r5, #0
 8000aba:	4293      	cmp	r3, r2
 8000abc:	bfc4      	itt	gt
 8000abe:	1a9b      	subgt	r3, r3, r2
 8000ac0:	18ed      	addgt	r5, r5, r3
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	341a      	adds	r4, #26
 8000ac6:	42b5      	cmp	r5, r6
 8000ac8:	d11a      	bne.n	8000b00 <_printf_common+0xc8>
 8000aca:	2000      	movs	r0, #0
 8000acc:	e008      	b.n	8000ae0 <_printf_common+0xa8>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	4652      	mov	r2, sl
 8000ad2:	4649      	mov	r1, r9
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	47c0      	blx	r8
 8000ad8:	3001      	adds	r0, #1
 8000ada:	d103      	bne.n	8000ae4 <_printf_common+0xac>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae4:	3501      	adds	r5, #1
 8000ae6:	e7c6      	b.n	8000a76 <_printf_common+0x3e>
 8000ae8:	18e1      	adds	r1, r4, r3
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	2030      	movs	r0, #48	; 0x30
 8000aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000af2:	4422      	add	r2, r4
 8000af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000afc:	3302      	adds	r3, #2
 8000afe:	e7c7      	b.n	8000a90 <_printf_common+0x58>
 8000b00:	2301      	movs	r3, #1
 8000b02:	4622      	mov	r2, r4
 8000b04:	4649      	mov	r1, r9
 8000b06:	4638      	mov	r0, r7
 8000b08:	47c0      	blx	r8
 8000b0a:	3001      	adds	r0, #1
 8000b0c:	d0e6      	beq.n	8000adc <_printf_common+0xa4>
 8000b0e:	3601      	adds	r6, #1
 8000b10:	e7d9      	b.n	8000ac6 <_printf_common+0x8e>
	...

08000b14 <_printf_i>:
 8000b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	460c      	mov	r4, r1
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	7e27      	ldrb	r7, [r4, #24]
 8000b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000b20:	2f78      	cmp	r7, #120	; 0x78
 8000b22:	4680      	mov	r8, r0
 8000b24:	469a      	mov	sl, r3
 8000b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000b2a:	d807      	bhi.n	8000b3c <_printf_i+0x28>
 8000b2c:	2f62      	cmp	r7, #98	; 0x62
 8000b2e:	d80a      	bhi.n	8000b46 <_printf_i+0x32>
 8000b30:	2f00      	cmp	r7, #0
 8000b32:	f000 80d8 	beq.w	8000ce6 <_printf_i+0x1d2>
 8000b36:	2f58      	cmp	r7, #88	; 0x58
 8000b38:	f000 80a3 	beq.w	8000c82 <_printf_i+0x16e>
 8000b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b44:	e03a      	b.n	8000bbc <_printf_i+0xa8>
 8000b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b4a:	2b15      	cmp	r3, #21
 8000b4c:	d8f6      	bhi.n	8000b3c <_printf_i+0x28>
 8000b4e:	a001      	add	r0, pc, #4	; (adr r0, 8000b54 <_printf_i+0x40>)
 8000b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000b54:	08000bad 	.word	0x08000bad
 8000b58:	08000bc1 	.word	0x08000bc1
 8000b5c:	08000b3d 	.word	0x08000b3d
 8000b60:	08000b3d 	.word	0x08000b3d
 8000b64:	08000b3d 	.word	0x08000b3d
 8000b68:	08000b3d 	.word	0x08000b3d
 8000b6c:	08000bc1 	.word	0x08000bc1
 8000b70:	08000b3d 	.word	0x08000b3d
 8000b74:	08000b3d 	.word	0x08000b3d
 8000b78:	08000b3d 	.word	0x08000b3d
 8000b7c:	08000b3d 	.word	0x08000b3d
 8000b80:	08000ccd 	.word	0x08000ccd
 8000b84:	08000bf1 	.word	0x08000bf1
 8000b88:	08000caf 	.word	0x08000caf
 8000b8c:	08000b3d 	.word	0x08000b3d
 8000b90:	08000b3d 	.word	0x08000b3d
 8000b94:	08000cef 	.word	0x08000cef
 8000b98:	08000b3d 	.word	0x08000b3d
 8000b9c:	08000bf1 	.word	0x08000bf1
 8000ba0:	08000b3d 	.word	0x08000b3d
 8000ba4:	08000b3d 	.word	0x08000b3d
 8000ba8:	08000cb7 	.word	0x08000cb7
 8000bac:	680b      	ldr	r3, [r1, #0]
 8000bae:	1d1a      	adds	r2, r3, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	600a      	str	r2, [r1, #0]
 8000bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e0a3      	b.n	8000d08 <_printf_i+0x1f4>
 8000bc0:	6825      	ldr	r5, [r4, #0]
 8000bc2:	6808      	ldr	r0, [r1, #0]
 8000bc4:	062e      	lsls	r6, r5, #24
 8000bc6:	f100 0304 	add.w	r3, r0, #4
 8000bca:	d50a      	bpl.n	8000be2 <_printf_i+0xce>
 8000bcc:	6805      	ldr	r5, [r0, #0]
 8000bce:	600b      	str	r3, [r1, #0]
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	da03      	bge.n	8000bdc <_printf_i+0xc8>
 8000bd4:	232d      	movs	r3, #45	; 0x2d
 8000bd6:	426d      	negs	r5, r5
 8000bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000bdc:	485e      	ldr	r0, [pc, #376]	; (8000d58 <_printf_i+0x244>)
 8000bde:	230a      	movs	r3, #10
 8000be0:	e019      	b.n	8000c16 <_printf_i+0x102>
 8000be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000be6:	6805      	ldr	r5, [r0, #0]
 8000be8:	600b      	str	r3, [r1, #0]
 8000bea:	bf18      	it	ne
 8000bec:	b22d      	sxthne	r5, r5
 8000bee:	e7ef      	b.n	8000bd0 <_printf_i+0xbc>
 8000bf0:	680b      	ldr	r3, [r1, #0]
 8000bf2:	6825      	ldr	r5, [r4, #0]
 8000bf4:	1d18      	adds	r0, r3, #4
 8000bf6:	6008      	str	r0, [r1, #0]
 8000bf8:	0628      	lsls	r0, r5, #24
 8000bfa:	d501      	bpl.n	8000c00 <_printf_i+0xec>
 8000bfc:	681d      	ldr	r5, [r3, #0]
 8000bfe:	e002      	b.n	8000c06 <_printf_i+0xf2>
 8000c00:	0669      	lsls	r1, r5, #25
 8000c02:	d5fb      	bpl.n	8000bfc <_printf_i+0xe8>
 8000c04:	881d      	ldrh	r5, [r3, #0]
 8000c06:	4854      	ldr	r0, [pc, #336]	; (8000d58 <_printf_i+0x244>)
 8000c08:	2f6f      	cmp	r7, #111	; 0x6f
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2308      	moveq	r3, #8
 8000c0e:	230a      	movne	r3, #10
 8000c10:	2100      	movs	r1, #0
 8000c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c16:	6866      	ldr	r6, [r4, #4]
 8000c18:	60a6      	str	r6, [r4, #8]
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	bfa2      	ittt	ge
 8000c1e:	6821      	ldrge	r1, [r4, #0]
 8000c20:	f021 0104 	bicge.w	r1, r1, #4
 8000c24:	6021      	strge	r1, [r4, #0]
 8000c26:	b90d      	cbnz	r5, 8000c2c <_printf_i+0x118>
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d04d      	beq.n	8000cc8 <_printf_i+0x1b4>
 8000c2c:	4616      	mov	r6, r2
 8000c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000c32:	fb03 5711 	mls	r7, r3, r1, r5
 8000c36:	5dc7      	ldrb	r7, [r0, r7]
 8000c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000c3c:	462f      	mov	r7, r5
 8000c3e:	42bb      	cmp	r3, r7
 8000c40:	460d      	mov	r5, r1
 8000c42:	d9f4      	bls.n	8000c2e <_printf_i+0x11a>
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	d10b      	bne.n	8000c60 <_printf_i+0x14c>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	07df      	lsls	r7, r3, #31
 8000c4c:	d508      	bpl.n	8000c60 <_printf_i+0x14c>
 8000c4e:	6923      	ldr	r3, [r4, #16]
 8000c50:	6861      	ldr	r1, [r4, #4]
 8000c52:	4299      	cmp	r1, r3
 8000c54:	bfde      	ittt	le
 8000c56:	2330      	movle	r3, #48	; 0x30
 8000c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000c60:	1b92      	subs	r2, r2, r6
 8000c62:	6122      	str	r2, [r4, #16]
 8000c64:	f8cd a000 	str.w	sl, [sp]
 8000c68:	464b      	mov	r3, r9
 8000c6a:	aa03      	add	r2, sp, #12
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	4640      	mov	r0, r8
 8000c70:	f7ff fee2 	bl	8000a38 <_printf_common>
 8000c74:	3001      	adds	r0, #1
 8000c76:	d14c      	bne.n	8000d12 <_printf_i+0x1fe>
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	b004      	add	sp, #16
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	4835      	ldr	r0, [pc, #212]	; (8000d58 <_printf_i+0x244>)
 8000c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	680e      	ldr	r6, [r1, #0]
 8000c8c:	061f      	lsls	r7, r3, #24
 8000c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8000c92:	600e      	str	r6, [r1, #0]
 8000c94:	d514      	bpl.n	8000cc0 <_printf_i+0x1ac>
 8000c96:	07d9      	lsls	r1, r3, #31
 8000c98:	bf44      	itt	mi
 8000c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8000c9e:	6023      	strmi	r3, [r4, #0]
 8000ca0:	b91d      	cbnz	r5, 8000caa <_printf_i+0x196>
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	f023 0320 	bic.w	r3, r3, #32
 8000ca8:	6023      	str	r3, [r4, #0]
 8000caa:	2310      	movs	r3, #16
 8000cac:	e7b0      	b.n	8000c10 <_printf_i+0xfc>
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	2378      	movs	r3, #120	; 0x78
 8000cb8:	4828      	ldr	r0, [pc, #160]	; (8000d5c <_printf_i+0x248>)
 8000cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000cbe:	e7e3      	b.n	8000c88 <_printf_i+0x174>
 8000cc0:	065e      	lsls	r6, r3, #25
 8000cc2:	bf48      	it	mi
 8000cc4:	b2ad      	uxthmi	r5, r5
 8000cc6:	e7e6      	b.n	8000c96 <_printf_i+0x182>
 8000cc8:	4616      	mov	r6, r2
 8000cca:	e7bb      	b.n	8000c44 <_printf_i+0x130>
 8000ccc:	680b      	ldr	r3, [r1, #0]
 8000cce:	6826      	ldr	r6, [r4, #0]
 8000cd0:	6960      	ldr	r0, [r4, #20]
 8000cd2:	1d1d      	adds	r5, r3, #4
 8000cd4:	600d      	str	r5, [r1, #0]
 8000cd6:	0635      	lsls	r5, r6, #24
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	d501      	bpl.n	8000ce0 <_printf_i+0x1cc>
 8000cdc:	6018      	str	r0, [r3, #0]
 8000cde:	e002      	b.n	8000ce6 <_printf_i+0x1d2>
 8000ce0:	0671      	lsls	r1, r6, #25
 8000ce2:	d5fb      	bpl.n	8000cdc <_printf_i+0x1c8>
 8000ce4:	8018      	strh	r0, [r3, #0]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	6123      	str	r3, [r4, #16]
 8000cea:	4616      	mov	r6, r2
 8000cec:	e7ba      	b.n	8000c64 <_printf_i+0x150>
 8000cee:	680b      	ldr	r3, [r1, #0]
 8000cf0:	1d1a      	adds	r2, r3, #4
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	681e      	ldr	r6, [r3, #0]
 8000cf6:	6862      	ldr	r2, [r4, #4]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f7ff fa70 	bl	80001e0 <memchr>
 8000d00:	b108      	cbz	r0, 8000d06 <_printf_i+0x1f2>
 8000d02:	1b80      	subs	r0, r0, r6
 8000d04:	6060      	str	r0, [r4, #4]
 8000d06:	6863      	ldr	r3, [r4, #4]
 8000d08:	6123      	str	r3, [r4, #16]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d10:	e7a8      	b.n	8000c64 <_printf_i+0x150>
 8000d12:	6923      	ldr	r3, [r4, #16]
 8000d14:	4632      	mov	r2, r6
 8000d16:	4649      	mov	r1, r9
 8000d18:	4640      	mov	r0, r8
 8000d1a:	47d0      	blx	sl
 8000d1c:	3001      	adds	r0, #1
 8000d1e:	d0ab      	beq.n	8000c78 <_printf_i+0x164>
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	079b      	lsls	r3, r3, #30
 8000d24:	d413      	bmi.n	8000d4e <_printf_i+0x23a>
 8000d26:	68e0      	ldr	r0, [r4, #12]
 8000d28:	9b03      	ldr	r3, [sp, #12]
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	bfb8      	it	lt
 8000d2e:	4618      	movlt	r0, r3
 8000d30:	e7a4      	b.n	8000c7c <_printf_i+0x168>
 8000d32:	2301      	movs	r3, #1
 8000d34:	4632      	mov	r2, r6
 8000d36:	4649      	mov	r1, r9
 8000d38:	4640      	mov	r0, r8
 8000d3a:	47d0      	blx	sl
 8000d3c:	3001      	adds	r0, #1
 8000d3e:	d09b      	beq.n	8000c78 <_printf_i+0x164>
 8000d40:	3501      	adds	r5, #1
 8000d42:	68e3      	ldr	r3, [r4, #12]
 8000d44:	9903      	ldr	r1, [sp, #12]
 8000d46:	1a5b      	subs	r3, r3, r1
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	dcf2      	bgt.n	8000d32 <_printf_i+0x21e>
 8000d4c:	e7eb      	b.n	8000d26 <_printf_i+0x212>
 8000d4e:	2500      	movs	r5, #0
 8000d50:	f104 0619 	add.w	r6, r4, #25
 8000d54:	e7f5      	b.n	8000d42 <_printf_i+0x22e>
 8000d56:	bf00      	nop
 8000d58:	08001092 	.word	0x08001092
 8000d5c:	080010a3 	.word	0x080010a3

08000d60 <memcpy>:
 8000d60:	440a      	add	r2, r1
 8000d62:	4291      	cmp	r1, r2
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	d100      	bne.n	8000d6c <memcpy+0xc>
 8000d6a:	4770      	bx	lr
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d1f9      	bne.n	8000d6e <memcpy+0xe>
 8000d7a:	bd10      	pop	{r4, pc}

08000d7c <memmove>:
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	b510      	push	{r4, lr}
 8000d80:	eb01 0402 	add.w	r4, r1, r2
 8000d84:	d902      	bls.n	8000d8c <memmove+0x10>
 8000d86:	4284      	cmp	r4, r0
 8000d88:	4623      	mov	r3, r4
 8000d8a:	d807      	bhi.n	8000d9c <memmove+0x20>
 8000d8c:	1e43      	subs	r3, r0, #1
 8000d8e:	42a1      	cmp	r1, r4
 8000d90:	d008      	beq.n	8000da4 <memmove+0x28>
 8000d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d9a:	e7f8      	b.n	8000d8e <memmove+0x12>
 8000d9c:	4402      	add	r2, r0
 8000d9e:	4601      	mov	r1, r0
 8000da0:	428a      	cmp	r2, r1
 8000da2:	d100      	bne.n	8000da6 <memmove+0x2a>
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000dae:	e7f7      	b.n	8000da0 <memmove+0x24>

08000db0 <_free_r>:
 8000db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d048      	beq.n	8000e48 <_free_r+0x98>
 8000db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dba:	9001      	str	r0, [sp, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8000dc2:	bfb8      	it	lt
 8000dc4:	18e4      	addlt	r4, r4, r3
 8000dc6:	f000 f8d3 	bl	8000f70 <__malloc_lock>
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <_free_r+0x9c>)
 8000dcc:	9801      	ldr	r0, [sp, #4]
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	4615      	mov	r5, r2
 8000dd2:	b933      	cbnz	r3, 8000de2 <_free_r+0x32>
 8000dd4:	6063      	str	r3, [r4, #4]
 8000dd6:	6014      	str	r4, [r2, #0]
 8000dd8:	b003      	add	sp, #12
 8000dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000dde:	f000 b8cd 	b.w	8000f7c <__malloc_unlock>
 8000de2:	42a3      	cmp	r3, r4
 8000de4:	d90b      	bls.n	8000dfe <_free_r+0x4e>
 8000de6:	6821      	ldr	r1, [r4, #0]
 8000de8:	1862      	adds	r2, r4, r1
 8000dea:	4293      	cmp	r3, r2
 8000dec:	bf04      	itt	eq
 8000dee:	681a      	ldreq	r2, [r3, #0]
 8000df0:	685b      	ldreq	r3, [r3, #4]
 8000df2:	6063      	str	r3, [r4, #4]
 8000df4:	bf04      	itt	eq
 8000df6:	1852      	addeq	r2, r2, r1
 8000df8:	6022      	streq	r2, [r4, #0]
 8000dfa:	602c      	str	r4, [r5, #0]
 8000dfc:	e7ec      	b.n	8000dd8 <_free_r+0x28>
 8000dfe:	461a      	mov	r2, r3
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	b10b      	cbz	r3, 8000e08 <_free_r+0x58>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	d9fa      	bls.n	8000dfe <_free_r+0x4e>
 8000e08:	6811      	ldr	r1, [r2, #0]
 8000e0a:	1855      	adds	r5, r2, r1
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	d10b      	bne.n	8000e28 <_free_r+0x78>
 8000e10:	6824      	ldr	r4, [r4, #0]
 8000e12:	4421      	add	r1, r4
 8000e14:	1854      	adds	r4, r2, r1
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	6011      	str	r1, [r2, #0]
 8000e1a:	d1dd      	bne.n	8000dd8 <_free_r+0x28>
 8000e1c:	681c      	ldr	r4, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	6053      	str	r3, [r2, #4]
 8000e22:	4421      	add	r1, r4
 8000e24:	6011      	str	r1, [r2, #0]
 8000e26:	e7d7      	b.n	8000dd8 <_free_r+0x28>
 8000e28:	d902      	bls.n	8000e30 <_free_r+0x80>
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	6003      	str	r3, [r0, #0]
 8000e2e:	e7d3      	b.n	8000dd8 <_free_r+0x28>
 8000e30:	6825      	ldr	r5, [r4, #0]
 8000e32:	1961      	adds	r1, r4, r5
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf04      	itt	eq
 8000e38:	6819      	ldreq	r1, [r3, #0]
 8000e3a:	685b      	ldreq	r3, [r3, #4]
 8000e3c:	6063      	str	r3, [r4, #4]
 8000e3e:	bf04      	itt	eq
 8000e40:	1949      	addeq	r1, r1, r5
 8000e42:	6021      	streq	r1, [r4, #0]
 8000e44:	6054      	str	r4, [r2, #4]
 8000e46:	e7c7      	b.n	8000dd8 <_free_r+0x28>
 8000e48:	b003      	add	sp, #12
 8000e4a:	bd30      	pop	{r4, r5, pc}
 8000e4c:	20000270 	.word	0x20000270

08000e50 <_malloc_r>:
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	1ccd      	adds	r5, r1, #3
 8000e54:	f025 0503 	bic.w	r5, r5, #3
 8000e58:	3508      	adds	r5, #8
 8000e5a:	2d0c      	cmp	r5, #12
 8000e5c:	bf38      	it	cc
 8000e5e:	250c      	movcc	r5, #12
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	4606      	mov	r6, r0
 8000e64:	db01      	blt.n	8000e6a <_malloc_r+0x1a>
 8000e66:	42a9      	cmp	r1, r5
 8000e68:	d903      	bls.n	8000e72 <_malloc_r+0x22>
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	6033      	str	r3, [r6, #0]
 8000e6e:	2000      	movs	r0, #0
 8000e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e72:	f000 f87d 	bl	8000f70 <__malloc_lock>
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <_malloc_r+0xac>)
 8000e78:	680a      	ldr	r2, [r1, #0]
 8000e7a:	4614      	mov	r4, r2
 8000e7c:	b99c      	cbnz	r4, 8000ea6 <_malloc_r+0x56>
 8000e7e:	4f20      	ldr	r7, [pc, #128]	; (8000f00 <_malloc_r+0xb0>)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b923      	cbnz	r3, 8000e8e <_malloc_r+0x3e>
 8000e84:	4621      	mov	r1, r4
 8000e86:	4630      	mov	r0, r6
 8000e88:	f000 f862 	bl	8000f50 <_sbrk_r>
 8000e8c:	6038      	str	r0, [r7, #0]
 8000e8e:	4629      	mov	r1, r5
 8000e90:	4630      	mov	r0, r6
 8000e92:	f000 f85d 	bl	8000f50 <_sbrk_r>
 8000e96:	1c43      	adds	r3, r0, #1
 8000e98:	d123      	bne.n	8000ee2 <_malloc_r+0x92>
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	6033      	str	r3, [r6, #0]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f000 f86c 	bl	8000f7c <__malloc_unlock>
 8000ea4:	e7e3      	b.n	8000e6e <_malloc_r+0x1e>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	1b5b      	subs	r3, r3, r5
 8000eaa:	d417      	bmi.n	8000edc <_malloc_r+0x8c>
 8000eac:	2b0b      	cmp	r3, #11
 8000eae:	d903      	bls.n	8000eb8 <_malloc_r+0x68>
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	441c      	add	r4, r3
 8000eb4:	6025      	str	r5, [r4, #0]
 8000eb6:	e004      	b.n	8000ec2 <_malloc_r+0x72>
 8000eb8:	6863      	ldr	r3, [r4, #4]
 8000eba:	42a2      	cmp	r2, r4
 8000ebc:	bf0c      	ite	eq
 8000ebe:	600b      	streq	r3, [r1, #0]
 8000ec0:	6053      	strne	r3, [r2, #4]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f000 f85a 	bl	8000f7c <__malloc_unlock>
 8000ec8:	f104 000b 	add.w	r0, r4, #11
 8000ecc:	1d23      	adds	r3, r4, #4
 8000ece:	f020 0007 	bic.w	r0, r0, #7
 8000ed2:	1ac2      	subs	r2, r0, r3
 8000ed4:	d0cc      	beq.n	8000e70 <_malloc_r+0x20>
 8000ed6:	1a1b      	subs	r3, r3, r0
 8000ed8:	50a3      	str	r3, [r4, r2]
 8000eda:	e7c9      	b.n	8000e70 <_malloc_r+0x20>
 8000edc:	4622      	mov	r2, r4
 8000ede:	6864      	ldr	r4, [r4, #4]
 8000ee0:	e7cc      	b.n	8000e7c <_malloc_r+0x2c>
 8000ee2:	1cc4      	adds	r4, r0, #3
 8000ee4:	f024 0403 	bic.w	r4, r4, #3
 8000ee8:	42a0      	cmp	r0, r4
 8000eea:	d0e3      	beq.n	8000eb4 <_malloc_r+0x64>
 8000eec:	1a21      	subs	r1, r4, r0
 8000eee:	4630      	mov	r0, r6
 8000ef0:	f000 f82e 	bl	8000f50 <_sbrk_r>
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	d1dd      	bne.n	8000eb4 <_malloc_r+0x64>
 8000ef8:	e7cf      	b.n	8000e9a <_malloc_r+0x4a>
 8000efa:	bf00      	nop
 8000efc:	20000270 	.word	0x20000270
 8000f00:	20000274 	.word	0x20000274

08000f04 <_realloc_r>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	4607      	mov	r7, r0
 8000f08:	4614      	mov	r4, r2
 8000f0a:	460e      	mov	r6, r1
 8000f0c:	b921      	cbnz	r1, 8000f18 <_realloc_r+0x14>
 8000f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000f12:	4611      	mov	r1, r2
 8000f14:	f7ff bf9c 	b.w	8000e50 <_malloc_r>
 8000f18:	b922      	cbnz	r2, 8000f24 <_realloc_r+0x20>
 8000f1a:	f7ff ff49 	bl	8000db0 <_free_r>
 8000f1e:	4625      	mov	r5, r4
 8000f20:	4628      	mov	r0, r5
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f24:	f000 f830 	bl	8000f88 <_malloc_usable_size_r>
 8000f28:	42a0      	cmp	r0, r4
 8000f2a:	d20f      	bcs.n	8000f4c <_realloc_r+0x48>
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f7ff ff8e 	bl	8000e50 <_malloc_r>
 8000f34:	4605      	mov	r5, r0
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d0f2      	beq.n	8000f20 <_realloc_r+0x1c>
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	f7ff ff0f 	bl	8000d60 <memcpy>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4638      	mov	r0, r7
 8000f46:	f7ff ff33 	bl	8000db0 <_free_r>
 8000f4a:	e7e9      	b.n	8000f20 <_realloc_r+0x1c>
 8000f4c:	4635      	mov	r5, r6
 8000f4e:	e7e7      	b.n	8000f20 <_realloc_r+0x1c>

08000f50 <_sbrk_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4d06      	ldr	r5, [pc, #24]	; (8000f6c <_sbrk_r+0x1c>)
 8000f54:	2300      	movs	r3, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	602b      	str	r3, [r5, #0]
 8000f5c:	f000 f81e 	bl	8000f9c <_sbrk>
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	d102      	bne.n	8000f6a <_sbrk_r+0x1a>
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	b103      	cbz	r3, 8000f6a <_sbrk_r+0x1a>
 8000f68:	6023      	str	r3, [r4, #0]
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	20000294 	.word	0x20000294

08000f70 <__malloc_lock>:
 8000f70:	4801      	ldr	r0, [pc, #4]	; (8000f78 <__malloc_lock+0x8>)
 8000f72:	f000 b811 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 8000f76:	bf00      	nop
 8000f78:	2000029c 	.word	0x2000029c

08000f7c <__malloc_unlock>:
 8000f7c:	4801      	ldr	r0, [pc, #4]	; (8000f84 <__malloc_unlock+0x8>)
 8000f7e:	f000 b80c 	b.w	8000f9a <__retarget_lock_release_recursive>
 8000f82:	bf00      	nop
 8000f84:	2000029c 	.word	0x2000029c

08000f88 <_malloc_usable_size_r>:
 8000f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f8c:	1f18      	subs	r0, r3, #4
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfbc      	itt	lt
 8000f92:	580b      	ldrlt	r3, [r1, r0]
 8000f94:	18c0      	addlt	r0, r0, r3
 8000f96:	4770      	bx	lr

08000f98 <__retarget_lock_acquire_recursive>:
 8000f98:	4770      	bx	lr

08000f9a <__retarget_lock_release_recursive>:
 8000f9a:	4770      	bx	lr

08000f9c <_sbrk>:
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <_sbrk+0x14>)
 8000f9e:	6819      	ldr	r1, [r3, #0]
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	b909      	cbnz	r1, 8000fa8 <_sbrk+0xc>
 8000fa4:	4903      	ldr	r1, [pc, #12]	; (8000fb4 <_sbrk+0x18>)
 8000fa6:	6019      	str	r1, [r3, #0]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	4402      	add	r2, r0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	4770      	bx	lr
 8000fb0:	20000278 	.word	0x20000278
 8000fb4:	200002a8 	.word	0x200002a8

08000fb8 <_init>:
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	bf00      	nop
 8000fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fbe:	bc08      	pop	{r3}
 8000fc0:	469e      	mov	lr, r3
 8000fc2:	4770      	bx	lr

08000fc4 <_fini>:
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc6:	bf00      	nop
 8000fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fca:	bc08      	pop	{r3}
 8000fcc:	469e      	mov	lr, r3
 8000fce:	4770      	bx	lr
