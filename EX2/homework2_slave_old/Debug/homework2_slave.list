
homework2_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002128  08002128  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002128  08002128  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002128  08002128  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  080021a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080021a0  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007d3  00000000  00000000  000230d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  000238a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00023998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018974  00000000  00000000  00023a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017f8  00000000  00000000  0003c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087412  00000000  00000000  0003dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fc8  00000000  00000000  000c5024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000c5fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000c60b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f1c 	.word	0x08001f1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08001f1c 	.word	0x08001f1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <returnHour>:
int motdet = 1;

char* str = "1234567";

//this will be the button interrupt function
char* returnHour(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
    char* toReturn = (char*) malloc(10*sizeof(char));
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fba2 	bl	8000a0c <malloc>
 80002c8:	4603      	mov	r3, r0
 80002ca:	607b      	str	r3, [r7, #4]
	sprintf(toReturn,"%02d:%02d:%02d",hour,minute,second);
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <returnHour+0x34>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <returnHour+0x38>)
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <returnHour+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	460b      	mov	r3, r1
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <returnHour+0x40>)
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 fc66 	bl	8000bb0 <siprintf>
	return toReturn;
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000114 	.word	0x20000114
 80002f4:	20000110 	.word	0x20000110
 80002f8:	2000010c 	.word	0x2000010c
 80002fc:	08001f3c 	.word	0x08001f3c

08000300 <power>:
// power function
int power(int a,int b){
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	int toReturn=1;
 800030a:	2301      	movs	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	e007      	b.n	8000324 <power+0x24>
		toReturn*=a;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3301      	adds	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbf3      	blt.n	8000314 <power+0x14>
	return toReturn;
 800032c:	68fb      	ldr	r3, [r7, #12]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
	...

0800033c <increaseSec>:
//this will be the timer interrupt function
void increaseSec(){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	int minutePass=0;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
	int hourPass=0;
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
	second++;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <increaseSec+0x78>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <increaseSec+0x78>)
 8000352:	6013      	str	r3, [r2, #0]
	if(second==60){
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <increaseSec+0x78>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b3c      	cmp	r3, #60	; 0x3c
 800035a:	d104      	bne.n	8000366 <increaseSec+0x2a>
		second=0;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <increaseSec+0x78>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
		minutePass=1;
 8000362:	2301      	movs	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
	}
	if(minutePass){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00d      	beq.n	8000388 <increaseSec+0x4c>
		minute++;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <increaseSec+0x7c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <increaseSec+0x7c>)
 8000374:	6013      	str	r3, [r2, #0]
		if(minute==60){
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <increaseSec+0x7c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b3c      	cmp	r3, #60	; 0x3c
 800037c:	d104      	bne.n	8000388 <increaseSec+0x4c>
				minute=0;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <increaseSec+0x7c>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
				hourPass=1;
 8000384:	2301      	movs	r3, #1
 8000386:	603b      	str	r3, [r7, #0]
		}
	}
	if(hourPass){
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <increaseSec+0x6a>
			hour++;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <increaseSec+0x80>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <increaseSec+0x80>)
 8000396:	6013      	str	r3, [r2, #0]
			if(hour==24){
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <increaseSec+0x80>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b18      	cmp	r3, #24
 800039e:	d102      	bne.n	80003a6 <increaseSec+0x6a>
					hour=0;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <increaseSec+0x80>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
			}
		}

}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	2000010c 	.word	0x2000010c
 80003b8:	20000110 	.word	0x20000110
 80003bc:	20000114 	.word	0x20000114

080003c0 <inputTime>:

//this will be the function from reading the input from the user
//return 0 if fail, otherwise return 1
int inputTime(char* input){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b092      	sub	sp, #72	; 0x48
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	//parse string - check for correct format
	int len;
	int colon_count=0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	643b      	str	r3, [r7, #64]	; 0x40
	int func_count=0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	int space_count=0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	63bb      	str	r3, [r7, #56]	; 0x38
	for (len = 0; input[len] != '\0'; len++){ // were checking to see what punctual the user used in the hour he put inside
 80003d4:	2300      	movs	r3, #0
 80003d6:	647b      	str	r3, [r7, #68]	; 0x44
 80003d8:	e025      	b.n	8000426 <inputTime+0x66>
		if(input[len]==':') colon_count++;
 80003da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	4413      	add	r3, r2
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b3a      	cmp	r3, #58	; 0x3a
 80003e4:	d102      	bne.n	80003ec <inputTime+0x2c>
 80003e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003e8:	3301      	adds	r3, #1
 80003ea:	643b      	str	r3, [r7, #64]	; 0x40
		if(input[len]==' ') space_count++;
 80003ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b20      	cmp	r3, #32
 80003f6:	d102      	bne.n	80003fe <inputTime+0x3e>
 80003f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003fa:	3301      	adds	r3, #1
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
		if(input[len]=='-'){
 80003fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b2d      	cmp	r3, #45	; 0x2d
 8000408:	d10a      	bne.n	8000420 <inputTime+0x60>
			if(len>0 || func_count)
 800040a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800040c:	2b00      	cmp	r3, #0
 800040e:	dc02      	bgt.n	8000416 <inputTime+0x56>
 8000410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <inputTime+0x5a>
				return 0;
 8000416:	2300      	movs	r3, #0
 8000418:	e090      	b.n	800053c <inputTime+0x17c>
			func_count++;
 800041a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800041c:	3301      	adds	r3, #1
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (len = 0; input[len] != '\0'; len++){ // were checking to see what punctual the user used in the hour he put inside
 8000420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000422:	3301      	adds	r3, #1
 8000424:	647b      	str	r3, [r7, #68]	; 0x44
 8000426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1d3      	bne.n	80003da <inputTime+0x1a>
		}

	}
	if(colon_count != 2 || func_count != 1 || input[0] != '-') return -1; // we check if the input stands in the format we want if not we return a msg.
 8000432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000434:	2b02      	cmp	r3, #2
 8000436:	d106      	bne.n	8000446 <inputTime+0x86>
 8000438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800043a:	2b01      	cmp	r3, #1
 800043c:	d103      	bne.n	8000446 <inputTime+0x86>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b2d      	cmp	r3, #45	; 0x2d
 8000444:	d002      	beq.n	800044c <inputTime+0x8c>
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	e077      	b.n	800053c <inputTime+0x17c>
	//if func call not in system
	if(strstr(input,"-time")==NULL)
 800044c:	493d      	ldr	r1, [pc, #244]	; (8000544 <inputTime+0x184>)
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 fbce 	bl	8000bf0 <strstr>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d102      	bne.n	8000460 <inputTime+0xa0>
		return -1;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
 800045e:	e06d      	b.n	800053c <inputTime+0x17c>

	//check string inputs
	char *token = strtok(input, " "); // doin manipulation over the string we recieved. (swaping all the panctual to " ")
 8000460:	4939      	ldr	r1, [pc, #228]	; (8000548 <inputTime+0x188>)
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 fbdc 	bl	8000c20 <strtok>
 8000468:	6378      	str	r0, [r7, #52]	; 0x34
	token = strtok(NULL, ":");
 800046a:	4938      	ldr	r1, [pc, #224]	; (800054c <inputTime+0x18c>)
 800046c:	2000      	movs	r0, #0
 800046e:	f000 fbd7 	bl	8000c20 <strtok>
 8000472:	6378      	str	r0, [r7, #52]	; 0x34

	int j=0;
 8000474:	2300      	movs	r3, #0
 8000476:	633b      	str	r3, [r7, #48]	; 0x30
	int modArr[3]={24,60,60}; // we put each digit in the right place in our array and perfrmoing MOD action to make sure the hour is in bounds
 8000478:	4a35      	ldr	r2, [pc, #212]	; (8000550 <inputTime+0x190>)
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int timeArr[3]={0,0,0};
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]

	while (token != NULL)
 8000490:	e047      	b.n	8000522 <inputTime+0x162>
	{
        int sum=0;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 8000496:	2300      	movs	r3, #0
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
 800049a:	e020      	b.n	80004de <inputTime+0x11e>
			int c = token[i];
 800049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800049e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004a0:	4413      	add	r3, r2
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
			if(c<48 || c>57) //check if char is digit
 80004a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a8:	2b2f      	cmp	r3, #47	; 0x2f
 80004aa:	dd02      	ble.n	80004b2 <inputTime+0xf2>
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	2b39      	cmp	r3, #57	; 0x39
 80004b0:	dd01      	ble.n	80004b6 <inputTime+0xf6>
				return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e042      	b.n	800053c <inputTime+0x17c>
			c-=48;
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	3b30      	subs	r3, #48	; 0x30
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
			sum+=c*power(10, 2-(i+1));
 80004bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004be:	f1c3 0301 	rsb	r3, r3, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	200a      	movs	r0, #10
 80004c6:	f7ff ff1b 	bl	8000300 <power>
 80004ca:	4602      	mov	r2, r0
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	fb03 f302 	mul.w	r3, r3, r2
 80004d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d4:	4413      	add	r3, r2
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 80004d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004da:	3301      	adds	r3, #1
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80004de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	dddb      	ble.n	800049c <inputTime+0xdc>
		}
		if(sum<0 || sum>=modArr[j])
 80004e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	db09      	blt.n	80004fe <inputTime+0x13e>
 80004ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80004f2:	4413      	add	r3, r2
 80004f4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80004f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004fa:	429a      	cmp	r2, r3
 80004fc:	db01      	blt.n	8000502 <inputTime+0x142>
			return 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	e01c      	b.n	800053c <inputTime+0x17c>
//		printf("sum:\t%d\n",sum);
		timeArr[j]=sum;
 8000502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800050a:	4413      	add	r3, r2
 800050c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800050e:	f843 2c3c 	str.w	r2, [r3, #-60]

		token = strtok(NULL, ":");
 8000512:	490e      	ldr	r1, [pc, #56]	; (800054c <inputTime+0x18c>)
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb83 	bl	8000c20 <strtok>
 800051a:	6378      	str	r0, [r7, #52]	; 0x34
		j++;
 800051c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800051e:	3301      	adds	r3, #1
 8000520:	633b      	str	r3, [r7, #48]	; 0x30
	while (token != NULL)
 8000522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1b4      	bne.n	8000492 <inputTime+0xd2>
	}
	//if no errors, change time vars accordingly
	hour=timeArr[0];
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <inputTime+0x194>)
 800052c:	6013      	str	r3, [r2, #0]
	minute=timeArr[1];
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <inputTime+0x198>)
 8000532:	6013      	str	r3, [r2, #0]
	second=timeArr[2];
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <inputTime+0x19c>)
 8000538:	6013      	str	r3, [r2, #0]
	return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	3748      	adds	r7, #72	; 0x48
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08001f4c 	.word	0x08001f4c
 8000548:	08001f54 	.word	0x08001f54
 800054c:	08001f58 	.word	0x08001f58
 8000550:	08001f5c 	.word	0x08001f5c
 8000554:	20000114 	.word	0x20000114
 8000558:	20000110 	.word	0x20000110
 800055c:	2000010c 	.word	0x2000010c

08000560 <send_clock>:




void send_clock(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~0x00000100; // Write 0 to A0
 8000564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000572:	6153      	str	r3, [r2, #20]
	SPI_Transmit(returnHour(), 8);
 8000574:	f7ff fea2 	bl	80002bc <returnHour>
 8000578:	4603      	mov	r3, r0
 800057a:	2108      	movs	r1, #8
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f93b 	bl	80007f8 <SPI_Transmit>
	GPIOA->ODR |= 0x00000100; // Write 0x00000001 to A0
 8000582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000590:	6153      	str	r3, [r2, #20]
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <EXTI15_10_IRQHandler>:


// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){ // turning off the interrupt flag
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <EXTI15_10_IRQHandler+0x3c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <EXTI15_10_IRQHandler+0x3c>)
 80005a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005a8:	6153      	str	r3, [r2, #20]
	char* toPrint = returnHour(); // printing the current time
 80005aa:	f7ff fe87 	bl	80002bc <returnHour>
 80005ae:	6078      	str	r0, [r7, #4]
	SPI_Transmit(str,8);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <EXTI15_10_IRQHandler+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2108      	movs	r1, #8
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f91e 	bl	80007f8 <SPI_Transmit>
	print("%s\n",toPrint);
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <EXTI15_10_IRQHandler+0x44>)
 80005c0:	f000 f968 	bl	8000894 <print>
	free(toPrint);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 fa29 	bl	8000a1c <free>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40010400 	.word	0x40010400
 80005d8:	20000008 	.word	0x20000008
 80005dc:	08001f68 	.word	0x08001f68

080005e0 <TIM2_IRQHandler>:


// ------------------------------------------------------Timer handler function
void TIM2_IRQHandler(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	flip^=1; // for full-second check
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <TIM2_IRQHandler+0x44>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <TIM2_IRQHandler+0x44>)
 80005ee:	6013      	str	r3, [r2, #0]
	if(first && flip){
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <TIM2_IRQHandler+0x48>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <TIM2_IRQHandler+0x2a>
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <TIM2_IRQHandler+0x44>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <TIM2_IRQHandler+0x2a>
		//if we've been to the function at least once
		increaseSec(); // increase time by 1 second
 8000600:	f7ff fe9c 	bl	800033c <increaseSec>
		motdet=1;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <TIM2_IRQHandler+0x4c>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
	}
	first = 1; //indicate we've visited function at least once
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <TIM2_IRQHandler+0x48>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
//	GPIOA->ODR ^= 0x00000020; // Write 0x00000020 to the address 0x48000014


	TIM2->SR&=0XFFFFFFFE; // reenable timer interrupt
 8000610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	6113      	str	r3, [r2, #16]


}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000118 	.word	0x20000118
 800062c:	20000004 	.word	0x20000004

08000630 <main>:


//------------------------------------------------------ Main
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000E0000;
 8000634:	4b40      	ldr	r3, [pc, #256]	; (8000738 <main+0x108>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a3f      	ldr	r2, [pc, #252]	; (8000738 <main+0x108>)
 800063a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800063e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <main+0x108>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a3c      	ldr	r2, [pc, #240]	; (8000738 <main+0x108>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 800064c:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <main+0x108>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a39      	ldr	r2, [pc, #228]	; (8000738 <main+0x108>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 8000658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 8000668:	4b34      	ldr	r3, [pc, #208]	; (800073c <main+0x10c>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a33      	ldr	r2, [pc, #204]	; (800073c <main+0x10c>)
 800066e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000672:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 8000674:	4b31      	ldr	r3, [pc, #196]	; (800073c <main+0x10c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <main+0x10c>)
 800067a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800067e:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 8000680:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <main+0x110>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <main+0x110>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6153      	str	r3, [r2, #20]
// ------------------------------------------------------
    // Configure GPIOA pin 5,0 as output .
    GPIOA->MODER |= 0x00010400;
 800068c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000696:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 800069a:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000121; // (1 << 5);
 800069c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	6053      	str	r3, [r2, #4]





    TIM2->ARR= 8000000/2; // same as writing TIM2->ARR =0x003D0900*2 = the timer2 interrupt speed
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b4:	4a23      	ldr	r2, [pc, #140]	; (8000744 <main+0x114>)
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1|=0x00000001; // TIM2 counter enable
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn); //TIM2 interrupt function enable
 80006c8:	201c      	movs	r0, #28
 80006ca:	f7ff fdd9 	bl	8000280 <__NVIC_EnableIRQ>


    GPIOA->ODR=0;
 80006ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]

    USART2_init();
 80006d6:	f000 f8f5 	bl	80008c4 <USART2_init>
    SPI1_init();
 80006da:	f000 f841 	bl	8000760 <SPI1_init>
    print("Hello!\nThis is the secondary machine in the 2-machine exercise you are running!\n");
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <main+0x118>)
 80006e0:	f000 f8d8 	bl	8000894 <print>

    while(1)
    {
    	if((GPIOA->IDR&0x2)==0x2){
 80006e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d10b      	bne.n	800070a <main+0xda>
    		if(motdet){
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <main+0x11c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <main+0xda>
				print("MotDet ON!");
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <main+0x120>)
 80006fc:	f000 f8ca 	bl	8000894 <print>
				send_clock();
 8000700:	f7ff ff2e 	bl	8000560 <send_clock>
				motdet=0;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <main+0x11c>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
    		}
    	}
    	if((SPI1->SR&0x3)==0x3){
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <main+0x124>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	2b03      	cmp	r3, #3
 8000714:	d1e6      	bne.n	80006e4 <main+0xb4>
    		memset(SPI_A_Buffer,'\0',9);
 8000716:	2209      	movs	r2, #9
 8000718:	2100      	movs	r1, #0
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <main+0x128>)
 800071c:	f000 f986 	bl	8000a2c <memset>
    		SPI_Receive(SPI_A_Buffer,8);
 8000720:	2108      	movs	r1, #8
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <main+0x128>)
 8000724:	f000 f890 	bl	8000848 <SPI_Receive>
    		inputTime(SPI_A_Buffer);
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <main+0x128>)
 800072a:	f7ff fe49 	bl	80003c0 <inputTime>
    		print("clock received\n");
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0x12c>)
 8000730:	f000 f8b0 	bl	8000894 <print>
    	if((GPIOA->IDR&0x2)==0x2){
 8000734:	e7d6      	b.n	80006e4 <main+0xb4>
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	40010400 	.word	0x40010400
 8000740:	40010000 	.word	0x40010000
 8000744:	003d0900 	.word	0x003d0900
 8000748:	08001f6c 	.word	0x08001f6c
 800074c:	20000004 	.word	0x20000004
 8000750:	08001fc0 	.word	0x08001fc0
 8000754:	40013000 	.word	0x40013000
 8000758:	2000008c 	.word	0x2000008c
 800075c:	08001fcc 	.word	0x08001fcc

08000760 <SPI1_init>:
int A_Buffer_PLACE=0;



void SPI1_init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	2100      	movs	r1, #0
 8000768:	481e      	ldr	r0, [pc, #120]	; (80007e4 <SPI1_init+0x84>)
 800076a:	f000 f95f 	bl	8000a2c <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	2100      	movs	r1, #0
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <SPI1_init+0x88>)
 8000774:	f000 f95a 	bl	8000a2c <memset>
	*SPI_B_Buffer='\0';
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <SPI1_init+0x88>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]


	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <SPI1_init+0x8c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <SPI1_init+0x8c>)
 8000784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000788:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 800078a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000794:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 8000798:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 800079a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079e:	6a1b      	ldr	r3, [r3, #32]
 80007a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80007a8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80007ac:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000080; // Configure GPIOB pins 3  as alternate function 5, which is SPI1.
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <SPI1_init+0x90>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <SPI1_init+0x90>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PB3
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <SPI1_init+0x90>)
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <SPI1_init+0x90>)
 80007c0:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80007c4:	6213      	str	r3, [r2, #32]

	SPI1->CR2 |= 0x000000040;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <SPI1_init+0x94>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <SPI1_init+0x94>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d0:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x000000040;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <SPI1_init+0x94>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <SPI1_init+0x94>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6013      	str	r3, [r2, #0]



}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	2000019c 	.word	0x2000019c
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000400 	.word	0x48000400
 80007f4:	40013000 	.word	0x40013000

080007f8 <SPI_Transmit>:

void SPI_Transmit (char *data, int size)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]

	int i=0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
	while (i<size){
 8000806:	e012      	b.n	800082e <SPI_Transmit+0x36>
	   SPI1->DR = data[i];  // load the data into the Data Register
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <SPI_Transmit+0x4c>)
 8000812:	60da      	str	r2, [r3, #12]
	   while((SPI1->SR&0x3)!=0x3){}
 8000814:	bf00      	nop
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <SPI_Transmit+0x4c>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b03      	cmp	r3, #3
 8000820:	d1f9      	bne.n	8000816 <SPI_Transmit+0x1e>
	   uint8_t temp = SPI1->DR;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <SPI_Transmit+0x4c>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	72fb      	strb	r3, [r7, #11]
	   i++;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
	while (i<size){
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	dbe8      	blt.n	8000808 <SPI_Transmit+0x10>
	}

}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40013000 	.word	0x40013000

08000848 <SPI_Receive>:

void SPI_Receive (char *data, int size)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	while (size){
 8000852:	e013      	b.n	800087c <SPI_Receive+0x34>
		SPI1->DR = 0;  // send dummy data
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <SPI_Receive+0x48>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
		while((SPI1->SR&0x3)!=0x3){}
 800085a:	bf00      	nop
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <SPI_Receive+0x48>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	2b03      	cmp	r3, #3
 8000866:	d1f9      	bne.n	800085c <SPI_Receive+0x14>
		*data++ = (SPI1->DR);
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <SPI_Receive+0x48>)
 800086a:	68d9      	ldr	r1, [r3, #12]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
		size--;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	603b      	str	r3, [r7, #0]
	while (size){
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1e8      	bne.n	8000854 <SPI_Receive+0xc>
	}
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40013000 	.word	0x40013000

08000894 <print>:
 8000894:	b40f      	push	{r0, r1, r2, r3}
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6939      	ldr	r1, [r7, #16]
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <print+0x2c>)
 80008a8:	f000 fa2c 	bl	8000d04 <vsiprintf>
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <print+0x2c>)
 80008ae:	f000 f83d 	bl	800092c <USART2_print>
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008bc:	b004      	add	sp, #16
 80008be:	4770      	bx	lr
 80008c0:	2000021c 	.word	0x2000021c

080008c4 <USART2_init>:
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <USART2_init+0x60>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <USART2_init+0x60>)
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d2:	6153      	str	r3, [r2, #20]
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <USART2_init+0x60>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <USART2_init+0x60>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	61d3      	str	r3, [r2, #28]
 80008e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008f4:	6a1b      	ldr	r3, [r3, #32]
 80008f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008fa:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80008fe:	6213      	str	r3, [r2, #32]
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <USART2_init+0x64>)
 8000902:	f240 3241 	movw	r2, #833	; 0x341
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <USART2_init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <USART2_init+0x64>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <USART2_init+0x64>)
 8000914:	f043 0309 	orr.w	r3, r3, #9
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000
 8000928:	40004400 	.word	0x40004400

0800092c <USART2_print>:
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	e00e      	b.n	8000954 <USART2_print+0x28>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <USART2_print+0x40>)
 800093c:	b292      	uxth	r2, r2
 800093e:	851a      	strh	r2, [r3, #40]	; 0x28
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	bf00      	nop
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <USART2_print+0x40>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f9      	beq.n	8000948 <USART2_print+0x1c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1ec      	bne.n	8000936 <USART2_print+0xa>
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400

08000970 <Reset_Handler>:
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopForever+0x2>)
 8000972:	4685      	mov	sp, r0
 8000974:	f3af 8000 	nop.w
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopForever+0x6>)
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopForever+0xa>)
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopForever+0xe>)
 800097e:	2300      	movs	r3, #0
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:
 8000982:	58d4      	ldr	r4, [r2, r3]
 8000984:	50c4      	str	r4, [r0, r3]
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:
 8000988:	18c4      	adds	r4, r0, r3
 800098a:	428c      	cmp	r4, r1
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopForever+0x12>)
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopForever+0x16>)
 8000992:	2300      	movs	r3, #0
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:
 800099a:	42a2      	cmp	r2, r4
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>
 800099e:	f000 f811 	bl	80009c4 <__libc_init_array>
 80009a2:	f7ff fe45 	bl	8000630 <main>

080009a6 <LoopForever>:
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
 80009a8:	20010000 	.word	0x20010000
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000070 	.word	0x20000070
 80009b4:	08002130 	.word	0x08002130
 80009b8:	20000070 	.word	0x20000070
 80009bc:	200002b8 	.word	0x200002b8

080009c0 <ADC1_2_IRQHandler>:
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <__libc_init_array>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	4d0d      	ldr	r5, [pc, #52]	; (80009fc <__libc_init_array+0x38>)
 80009c8:	4c0d      	ldr	r4, [pc, #52]	; (8000a00 <__libc_init_array+0x3c>)
 80009ca:	1b64      	subs	r4, r4, r5
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	2600      	movs	r6, #0
 80009d0:	42a6      	cmp	r6, r4
 80009d2:	d109      	bne.n	80009e8 <__libc_init_array+0x24>
 80009d4:	4d0b      	ldr	r5, [pc, #44]	; (8000a04 <__libc_init_array+0x40>)
 80009d6:	4c0c      	ldr	r4, [pc, #48]	; (8000a08 <__libc_init_array+0x44>)
 80009d8:	f001 faa0 	bl	8001f1c <_init>
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	10a4      	asrs	r4, r4, #2
 80009e0:	2600      	movs	r6, #0
 80009e2:	42a6      	cmp	r6, r4
 80009e4:	d105      	bne.n	80009f2 <__libc_init_array+0x2e>
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ec:	4798      	blx	r3
 80009ee:	3601      	adds	r6, #1
 80009f0:	e7ee      	b.n	80009d0 <__libc_init_array+0xc>
 80009f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f6:	4798      	blx	r3
 80009f8:	3601      	adds	r6, #1
 80009fa:	e7f2      	b.n	80009e2 <__libc_init_array+0x1e>
 80009fc:	08002128 	.word	0x08002128
 8000a00:	08002128 	.word	0x08002128
 8000a04:	08002128 	.word	0x08002128
 8000a08:	0800212c 	.word	0x0800212c

08000a0c <malloc>:
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <malloc+0xc>)
 8000a0e:	4601      	mov	r1, r0
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	f000 b863 	b.w	8000adc <_malloc_r>
 8000a16:	bf00      	nop
 8000a18:	2000000c 	.word	0x2000000c

08000a1c <free>:
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <free+0xc>)
 8000a1e:	4601      	mov	r1, r0
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	f000 b80b 	b.w	8000a3c <_free_r>
 8000a26:	bf00      	nop
 8000a28:	2000000c 	.word	0x2000000c

08000a2c <memset>:
 8000a2c:	4402      	add	r2, r0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d100      	bne.n	8000a36 <memset+0xa>
 8000a34:	4770      	bx	lr
 8000a36:	f803 1b01 	strb.w	r1, [r3], #1
 8000a3a:	e7f9      	b.n	8000a30 <memset+0x4>

08000a3c <_free_r>:
 8000a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	d048      	beq.n	8000ad4 <_free_r+0x98>
 8000a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a46:	9001      	str	r0, [sp, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8000a4e:	bfb8      	it	lt
 8000a50:	18e4      	addlt	r4, r4, r3
 8000a52:	f000 f991 	bl	8000d78 <__malloc_lock>
 8000a56:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <_free_r+0x9c>)
 8000a58:	9801      	ldr	r0, [sp, #4]
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	b933      	cbnz	r3, 8000a6e <_free_r+0x32>
 8000a60:	6063      	str	r3, [r4, #4]
 8000a62:	6014      	str	r4, [r2, #0]
 8000a64:	b003      	add	sp, #12
 8000a66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a6a:	f000 b98b 	b.w	8000d84 <__malloc_unlock>
 8000a6e:	42a3      	cmp	r3, r4
 8000a70:	d90b      	bls.n	8000a8a <_free_r+0x4e>
 8000a72:	6821      	ldr	r1, [r4, #0]
 8000a74:	1862      	adds	r2, r4, r1
 8000a76:	4293      	cmp	r3, r2
 8000a78:	bf04      	itt	eq
 8000a7a:	681a      	ldreq	r2, [r3, #0]
 8000a7c:	685b      	ldreq	r3, [r3, #4]
 8000a7e:	6063      	str	r3, [r4, #4]
 8000a80:	bf04      	itt	eq
 8000a82:	1852      	addeq	r2, r2, r1
 8000a84:	6022      	streq	r2, [r4, #0]
 8000a86:	602c      	str	r4, [r5, #0]
 8000a88:	e7ec      	b.n	8000a64 <_free_r+0x28>
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	b10b      	cbz	r3, 8000a94 <_free_r+0x58>
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	d9fa      	bls.n	8000a8a <_free_r+0x4e>
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	1855      	adds	r5, r2, r1
 8000a98:	42a5      	cmp	r5, r4
 8000a9a:	d10b      	bne.n	8000ab4 <_free_r+0x78>
 8000a9c:	6824      	ldr	r4, [r4, #0]
 8000a9e:	4421      	add	r1, r4
 8000aa0:	1854      	adds	r4, r2, r1
 8000aa2:	42a3      	cmp	r3, r4
 8000aa4:	6011      	str	r1, [r2, #0]
 8000aa6:	d1dd      	bne.n	8000a64 <_free_r+0x28>
 8000aa8:	681c      	ldr	r4, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	6053      	str	r3, [r2, #4]
 8000aae:	4421      	add	r1, r4
 8000ab0:	6011      	str	r1, [r2, #0]
 8000ab2:	e7d7      	b.n	8000a64 <_free_r+0x28>
 8000ab4:	d902      	bls.n	8000abc <_free_r+0x80>
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	6003      	str	r3, [r0, #0]
 8000aba:	e7d3      	b.n	8000a64 <_free_r+0x28>
 8000abc:	6825      	ldr	r5, [r4, #0]
 8000abe:	1961      	adds	r1, r4, r5
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf04      	itt	eq
 8000ac4:	6819      	ldreq	r1, [r3, #0]
 8000ac6:	685b      	ldreq	r3, [r3, #4]
 8000ac8:	6063      	str	r3, [r4, #4]
 8000aca:	bf04      	itt	eq
 8000acc:	1949      	addeq	r1, r1, r5
 8000ace:	6021      	streq	r1, [r4, #0]
 8000ad0:	6054      	str	r4, [r2, #4]
 8000ad2:	e7c7      	b.n	8000a64 <_free_r+0x28>
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd30      	pop	{r4, r5, pc}
 8000ad8:	2000029c 	.word	0x2000029c

08000adc <_malloc_r>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	1ccd      	adds	r5, r1, #3
 8000ae0:	f025 0503 	bic.w	r5, r5, #3
 8000ae4:	3508      	adds	r5, #8
 8000ae6:	2d0c      	cmp	r5, #12
 8000ae8:	bf38      	it	cc
 8000aea:	250c      	movcc	r5, #12
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	4606      	mov	r6, r0
 8000af0:	db01      	blt.n	8000af6 <_malloc_r+0x1a>
 8000af2:	42a9      	cmp	r1, r5
 8000af4:	d903      	bls.n	8000afe <_malloc_r+0x22>
 8000af6:	230c      	movs	r3, #12
 8000af8:	6033      	str	r3, [r6, #0]
 8000afa:	2000      	movs	r0, #0
 8000afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000afe:	f000 f93b 	bl	8000d78 <__malloc_lock>
 8000b02:	4921      	ldr	r1, [pc, #132]	; (8000b88 <_malloc_r+0xac>)
 8000b04:	680a      	ldr	r2, [r1, #0]
 8000b06:	4614      	mov	r4, r2
 8000b08:	b99c      	cbnz	r4, 8000b32 <_malloc_r+0x56>
 8000b0a:	4f20      	ldr	r7, [pc, #128]	; (8000b8c <_malloc_r+0xb0>)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b923      	cbnz	r3, 8000b1a <_malloc_r+0x3e>
 8000b10:	4621      	mov	r1, r4
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 f83c 	bl	8000b90 <_sbrk_r>
 8000b18:	6038      	str	r0, [r7, #0]
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f000 f837 	bl	8000b90 <_sbrk_r>
 8000b22:	1c43      	adds	r3, r0, #1
 8000b24:	d123      	bne.n	8000b6e <_malloc_r+0x92>
 8000b26:	230c      	movs	r3, #12
 8000b28:	6033      	str	r3, [r6, #0]
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	f000 f92a 	bl	8000d84 <__malloc_unlock>
 8000b30:	e7e3      	b.n	8000afa <_malloc_r+0x1e>
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	d417      	bmi.n	8000b68 <_malloc_r+0x8c>
 8000b38:	2b0b      	cmp	r3, #11
 8000b3a:	d903      	bls.n	8000b44 <_malloc_r+0x68>
 8000b3c:	6023      	str	r3, [r4, #0]
 8000b3e:	441c      	add	r4, r3
 8000b40:	6025      	str	r5, [r4, #0]
 8000b42:	e004      	b.n	8000b4e <_malloc_r+0x72>
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	42a2      	cmp	r2, r4
 8000b48:	bf0c      	ite	eq
 8000b4a:	600b      	streq	r3, [r1, #0]
 8000b4c:	6053      	strne	r3, [r2, #4]
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f000 f918 	bl	8000d84 <__malloc_unlock>
 8000b54:	f104 000b 	add.w	r0, r4, #11
 8000b58:	1d23      	adds	r3, r4, #4
 8000b5a:	f020 0007 	bic.w	r0, r0, #7
 8000b5e:	1ac2      	subs	r2, r0, r3
 8000b60:	d0cc      	beq.n	8000afc <_malloc_r+0x20>
 8000b62:	1a1b      	subs	r3, r3, r0
 8000b64:	50a3      	str	r3, [r4, r2]
 8000b66:	e7c9      	b.n	8000afc <_malloc_r+0x20>
 8000b68:	4622      	mov	r2, r4
 8000b6a:	6864      	ldr	r4, [r4, #4]
 8000b6c:	e7cc      	b.n	8000b08 <_malloc_r+0x2c>
 8000b6e:	1cc4      	adds	r4, r0, #3
 8000b70:	f024 0403 	bic.w	r4, r4, #3
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d0e3      	beq.n	8000b40 <_malloc_r+0x64>
 8000b78:	1a21      	subs	r1, r4, r0
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	f000 f808 	bl	8000b90 <_sbrk_r>
 8000b80:	3001      	adds	r0, #1
 8000b82:	d1dd      	bne.n	8000b40 <_malloc_r+0x64>
 8000b84:	e7cf      	b.n	8000b26 <_malloc_r+0x4a>
 8000b86:	bf00      	nop
 8000b88:	2000029c 	.word	0x2000029c
 8000b8c:	200002a0 	.word	0x200002a0

08000b90 <_sbrk_r>:
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4d06      	ldr	r5, [pc, #24]	; (8000bac <_sbrk_r+0x1c>)
 8000b94:	2300      	movs	r3, #0
 8000b96:	4604      	mov	r4, r0
 8000b98:	4608      	mov	r0, r1
 8000b9a:	602b      	str	r3, [r5, #0]
 8000b9c:	f001 f9a6 	bl	8001eec <_sbrk>
 8000ba0:	1c43      	adds	r3, r0, #1
 8000ba2:	d102      	bne.n	8000baa <_sbrk_r+0x1a>
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	b103      	cbz	r3, 8000baa <_sbrk_r+0x1a>
 8000ba8:	6023      	str	r3, [r4, #0]
 8000baa:	bd38      	pop	{r3, r4, r5, pc}
 8000bac:	200002a8 	.word	0x200002a8

08000bb0 <siprintf>:
 8000bb0:	b40e      	push	{r1, r2, r3}
 8000bb2:	b500      	push	{lr}
 8000bb4:	b09c      	sub	sp, #112	; 0x70
 8000bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8000bb8:	9002      	str	r0, [sp, #8]
 8000bba:	9006      	str	r0, [sp, #24]
 8000bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <siprintf+0x38>)
 8000bc2:	9107      	str	r1, [sp, #28]
 8000bc4:	9104      	str	r1, [sp, #16]
 8000bc6:	4909      	ldr	r1, [pc, #36]	; (8000bec <siprintf+0x3c>)
 8000bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bcc:	9105      	str	r1, [sp, #20]
 8000bce:	6800      	ldr	r0, [r0, #0]
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	a902      	add	r1, sp, #8
 8000bd4:	f000 f938 	bl	8000e48 <_svfiprintf_r>
 8000bd8:	9b02      	ldr	r3, [sp, #8]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	b01c      	add	sp, #112	; 0x70
 8000be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000be4:	b003      	add	sp, #12
 8000be6:	4770      	bx	lr
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	ffff0208 	.word	0xffff0208

08000bf0 <strstr>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	780c      	ldrb	r4, [r1, #0]
 8000bf4:	b164      	cbz	r4, 8000c10 <strstr+0x20>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	1c5e      	adds	r6, r3, #1
 8000bfe:	b90a      	cbnz	r2, 8000c04 <strstr+0x14>
 8000c00:	4610      	mov	r0, r2
 8000c02:	e005      	b.n	8000c10 <strstr+0x20>
 8000c04:	4294      	cmp	r4, r2
 8000c06:	d108      	bne.n	8000c1a <strstr+0x2a>
 8000c08:	460d      	mov	r5, r1
 8000c0a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8000c0e:	b902      	cbnz	r2, 8000c12 <strstr+0x22>
 8000c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c12:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000c16:	4297      	cmp	r7, r2
 8000c18:	d0f7      	beq.n	8000c0a <strstr+0x1a>
 8000c1a:	4633      	mov	r3, r6
 8000c1c:	e7ec      	b.n	8000bf8 <strstr+0x8>
	...

08000c20 <strtok>:
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <strtok+0x5c>)
 8000c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c24:	681e      	ldr	r6, [r3, #0]
 8000c26:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8000c28:	4605      	mov	r5, r0
 8000c2a:	b9fc      	cbnz	r4, 8000c6c <strtok+0x4c>
 8000c2c:	2050      	movs	r0, #80	; 0x50
 8000c2e:	9101      	str	r1, [sp, #4]
 8000c30:	f7ff feec 	bl	8000a0c <malloc>
 8000c34:	9901      	ldr	r1, [sp, #4]
 8000c36:	65b0      	str	r0, [r6, #88]	; 0x58
 8000c38:	4602      	mov	r2, r0
 8000c3a:	b920      	cbnz	r0, 8000c46 <strtok+0x26>
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <strtok+0x60>)
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <strtok+0x64>)
 8000c40:	2157      	movs	r1, #87	; 0x57
 8000c42:	f000 f869 	bl	8000d18 <__assert_func>
 8000c46:	e9c0 4400 	strd	r4, r4, [r0]
 8000c4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000c4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000c52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000c56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000c5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000c5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000c62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000c66:	6184      	str	r4, [r0, #24]
 8000c68:	7704      	strb	r4, [r0, #28]
 8000c6a:	6244      	str	r4, [r0, #36]	; 0x24
 8000c6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4628      	mov	r0, r5
 8000c72:	b002      	add	sp, #8
 8000c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000c78:	f000 b806 	b.w	8000c88 <__strtok_r>
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	08001fe0 	.word	0x08001fe0
 8000c84:	08001ff7 	.word	0x08001ff7

08000c88 <__strtok_r>:
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b908      	cbnz	r0, 8000c90 <__strtok_r+0x8>
 8000c8c:	6810      	ldr	r0, [r2, #0]
 8000c8e:	b188      	cbz	r0, 8000cb4 <__strtok_r+0x2c>
 8000c90:	4604      	mov	r4, r0
 8000c92:	4620      	mov	r0, r4
 8000c94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000c98:	460f      	mov	r7, r1
 8000c9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000c9e:	b91e      	cbnz	r6, 8000ca8 <__strtok_r+0x20>
 8000ca0:	b965      	cbnz	r5, 8000cbc <__strtok_r+0x34>
 8000ca2:	6015      	str	r5, [r2, #0]
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	e005      	b.n	8000cb4 <__strtok_r+0x2c>
 8000ca8:	42b5      	cmp	r5, r6
 8000caa:	d1f6      	bne.n	8000c9a <__strtok_r+0x12>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f0      	bne.n	8000c92 <__strtok_r+0xa>
 8000cb0:	6014      	str	r4, [r2, #0]
 8000cb2:	7003      	strb	r3, [r0, #0]
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	e00c      	b.n	8000cd4 <__strtok_r+0x4c>
 8000cba:	b915      	cbnz	r5, 8000cc2 <__strtok_r+0x3a>
 8000cbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000cc0:	460e      	mov	r6, r1
 8000cc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	d1f7      	bne.n	8000cba <__strtok_r+0x32>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f3      	beq.n	8000cb6 <__strtok_r+0x2e>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000cd4:	6014      	str	r4, [r2, #0]
 8000cd6:	e7ed      	b.n	8000cb4 <__strtok_r+0x2c>

08000cd8 <_vsiprintf_r>:
 8000cd8:	b500      	push	{lr}
 8000cda:	b09b      	sub	sp, #108	; 0x6c
 8000cdc:	9100      	str	r1, [sp, #0]
 8000cde:	9104      	str	r1, [sp, #16]
 8000ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ce4:	9105      	str	r1, [sp, #20]
 8000ce6:	9102      	str	r1, [sp, #8]
 8000ce8:	4905      	ldr	r1, [pc, #20]	; (8000d00 <_vsiprintf_r+0x28>)
 8000cea:	9103      	str	r1, [sp, #12]
 8000cec:	4669      	mov	r1, sp
 8000cee:	f000 f8ab 	bl	8000e48 <_svfiprintf_r>
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	b01b      	add	sp, #108	; 0x6c
 8000cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cfe:	bf00      	nop
 8000d00:	ffff0208 	.word	0xffff0208

08000d04 <vsiprintf>:
 8000d04:	4613      	mov	r3, r2
 8000d06:	460a      	mov	r2, r1
 8000d08:	4601      	mov	r1, r0
 8000d0a:	4802      	ldr	r0, [pc, #8]	; (8000d14 <vsiprintf+0x10>)
 8000d0c:	6800      	ldr	r0, [r0, #0]
 8000d0e:	f7ff bfe3 	b.w	8000cd8 <_vsiprintf_r>
 8000d12:	bf00      	nop
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <__assert_func>:
 8000d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d1a:	4614      	mov	r4, r2
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <__assert_func+0x2c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4605      	mov	r5, r0
 8000d24:	68d8      	ldr	r0, [r3, #12]
 8000d26:	b14c      	cbz	r4, 8000d3c <__assert_func+0x24>
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <__assert_func+0x30>)
 8000d2a:	9100      	str	r1, [sp, #0]
 8000d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000d30:	4906      	ldr	r1, [pc, #24]	; (8000d4c <__assert_func+0x34>)
 8000d32:	462b      	mov	r3, r5
 8000d34:	f000 f80e 	bl	8000d54 <fiprintf>
 8000d38:	f000 fd34 	bl	80017a4 <abort>
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__assert_func+0x38>)
 8000d3e:	461c      	mov	r4, r3
 8000d40:	e7f3      	b.n	8000d2a <__assert_func+0x12>
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	08002058 	.word	0x08002058
 8000d4c:	08002065 	.word	0x08002065
 8000d50:	08002093 	.word	0x08002093

08000d54 <fiprintf>:
 8000d54:	b40e      	push	{r1, r2, r3}
 8000d56:	b503      	push	{r0, r1, lr}
 8000d58:	4601      	mov	r1, r0
 8000d5a:	ab03      	add	r3, sp, #12
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <fiprintf+0x20>)
 8000d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d62:	6800      	ldr	r0, [r0, #0]
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	f000 f999 	bl	800109c <_vfiprintf_r>
 8000d6a:	b002      	add	sp, #8
 8000d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d70:	b003      	add	sp, #12
 8000d72:	4770      	bx	lr
 8000d74:	2000000c 	.word	0x2000000c

08000d78 <__malloc_lock>:
 8000d78:	4801      	ldr	r0, [pc, #4]	; (8000d80 <__malloc_lock+0x8>)
 8000d7a:	f000 bed3 	b.w	8001b24 <__retarget_lock_acquire_recursive>
 8000d7e:	bf00      	nop
 8000d80:	200002b0 	.word	0x200002b0

08000d84 <__malloc_unlock>:
 8000d84:	4801      	ldr	r0, [pc, #4]	; (8000d8c <__malloc_unlock+0x8>)
 8000d86:	f000 bece 	b.w	8001b26 <__retarget_lock_release_recursive>
 8000d8a:	bf00      	nop
 8000d8c:	200002b0 	.word	0x200002b0

08000d90 <__ssputs_r>:
 8000d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d94:	688e      	ldr	r6, [r1, #8]
 8000d96:	429e      	cmp	r6, r3
 8000d98:	4682      	mov	sl, r0
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	4690      	mov	r8, r2
 8000d9e:	461f      	mov	r7, r3
 8000da0:	d838      	bhi.n	8000e14 <__ssputs_r+0x84>
 8000da2:	898a      	ldrh	r2, [r1, #12]
 8000da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000da8:	d032      	beq.n	8000e10 <__ssputs_r+0x80>
 8000daa:	6825      	ldr	r5, [r4, #0]
 8000dac:	6909      	ldr	r1, [r1, #16]
 8000dae:	eba5 0901 	sub.w	r9, r5, r1
 8000db2:	6965      	ldr	r5, [r4, #20]
 8000db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	444b      	add	r3, r9
 8000dc0:	106d      	asrs	r5, r5, #1
 8000dc2:	429d      	cmp	r5, r3
 8000dc4:	bf38      	it	cc
 8000dc6:	461d      	movcc	r5, r3
 8000dc8:	0553      	lsls	r3, r2, #21
 8000dca:	d531      	bpl.n	8000e30 <__ssputs_r+0xa0>
 8000dcc:	4629      	mov	r1, r5
 8000dce:	f7ff fe85 	bl	8000adc <_malloc_r>
 8000dd2:	4606      	mov	r6, r0
 8000dd4:	b950      	cbnz	r0, 8000dec <__ssputs_r+0x5c>
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	f8ca 3000 	str.w	r3, [sl]
 8000ddc:	89a3      	ldrh	r3, [r4, #12]
 8000dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de2:	81a3      	strh	r3, [r4, #12]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	6921      	ldr	r1, [r4, #16]
 8000dee:	464a      	mov	r2, r9
 8000df0:	f000 fefe 	bl	8001bf0 <memcpy>
 8000df4:	89a3      	ldrh	r3, [r4, #12]
 8000df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfe:	81a3      	strh	r3, [r4, #12]
 8000e00:	6126      	str	r6, [r4, #16]
 8000e02:	6165      	str	r5, [r4, #20]
 8000e04:	444e      	add	r6, r9
 8000e06:	eba5 0509 	sub.w	r5, r5, r9
 8000e0a:	6026      	str	r6, [r4, #0]
 8000e0c:	60a5      	str	r5, [r4, #8]
 8000e0e:	463e      	mov	r6, r7
 8000e10:	42be      	cmp	r6, r7
 8000e12:	d900      	bls.n	8000e16 <__ssputs_r+0x86>
 8000e14:	463e      	mov	r6, r7
 8000e16:	4632      	mov	r2, r6
 8000e18:	6820      	ldr	r0, [r4, #0]
 8000e1a:	4641      	mov	r1, r8
 8000e1c:	f000 fef6 	bl	8001c0c <memmove>
 8000e20:	68a3      	ldr	r3, [r4, #8]
 8000e22:	6822      	ldr	r2, [r4, #0]
 8000e24:	1b9b      	subs	r3, r3, r6
 8000e26:	4432      	add	r2, r6
 8000e28:	60a3      	str	r3, [r4, #8]
 8000e2a:	6022      	str	r2, [r4, #0]
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7db      	b.n	8000de8 <__ssputs_r+0x58>
 8000e30:	462a      	mov	r2, r5
 8000e32:	f000 ff05 	bl	8001c40 <_realloc_r>
 8000e36:	4606      	mov	r6, r0
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d1e1      	bne.n	8000e00 <__ssputs_r+0x70>
 8000e3c:	6921      	ldr	r1, [r4, #16]
 8000e3e:	4650      	mov	r0, sl
 8000e40:	f7ff fdfc 	bl	8000a3c <_free_r>
 8000e44:	e7c7      	b.n	8000dd6 <__ssputs_r+0x46>
	...

08000e48 <_svfiprintf_r>:
 8000e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	898b      	ldrh	r3, [r1, #12]
 8000e50:	061b      	lsls	r3, r3, #24
 8000e52:	b09d      	sub	sp, #116	; 0x74
 8000e54:	4607      	mov	r7, r0
 8000e56:	460d      	mov	r5, r1
 8000e58:	4614      	mov	r4, r2
 8000e5a:	d50e      	bpl.n	8000e7a <_svfiprintf_r+0x32>
 8000e5c:	690b      	ldr	r3, [r1, #16]
 8000e5e:	b963      	cbnz	r3, 8000e7a <_svfiprintf_r+0x32>
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	f7ff fe3b 	bl	8000adc <_malloc_r>
 8000e66:	6028      	str	r0, [r5, #0]
 8000e68:	6128      	str	r0, [r5, #16]
 8000e6a:	b920      	cbnz	r0, 8000e76 <_svfiprintf_r+0x2e>
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	e0d1      	b.n	800101a <_svfiprintf_r+0x1d2>
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	616b      	str	r3, [r5, #20]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8000e7e:	2320      	movs	r3, #32
 8000e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e88:	2330      	movs	r3, #48	; 0x30
 8000e8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001034 <_svfiprintf_r+0x1ec>
 8000e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e92:	f04f 0901 	mov.w	r9, #1
 8000e96:	4623      	mov	r3, r4
 8000e98:	469a      	mov	sl, r3
 8000e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e9e:	b10a      	cbz	r2, 8000ea4 <_svfiprintf_r+0x5c>
 8000ea0:	2a25      	cmp	r2, #37	; 0x25
 8000ea2:	d1f9      	bne.n	8000e98 <_svfiprintf_r+0x50>
 8000ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ea8:	d00b      	beq.n	8000ec2 <_svfiprintf_r+0x7a>
 8000eaa:	465b      	mov	r3, fp
 8000eac:	4622      	mov	r2, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	f7ff ff6d 	bl	8000d90 <__ssputs_r>
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	f000 80aa 	beq.w	8001010 <_svfiprintf_r+0x1c8>
 8000ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ebe:	445a      	add	r2, fp
 8000ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8000ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a2 	beq.w	8001010 <_svfiprintf_r+0x1c8>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ed6:	f10a 0a01 	add.w	sl, sl, #1
 8000eda:	9304      	str	r3, [sp, #16]
 8000edc:	9307      	str	r3, [sp, #28]
 8000ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8000ee4:	4654      	mov	r4, sl
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eec:	4851      	ldr	r0, [pc, #324]	; (8001034 <_svfiprintf_r+0x1ec>)
 8000eee:	f7ff f977 	bl	80001e0 <memchr>
 8000ef2:	9a04      	ldr	r2, [sp, #16]
 8000ef4:	b9d8      	cbnz	r0, 8000f2e <_svfiprintf_r+0xe6>
 8000ef6:	06d0      	lsls	r0, r2, #27
 8000ef8:	bf44      	itt	mi
 8000efa:	2320      	movmi	r3, #32
 8000efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f00:	0711      	lsls	r1, r2, #28
 8000f02:	bf44      	itt	mi
 8000f04:	232b      	movmi	r3, #43	; 0x2b
 8000f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8000f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8000f10:	d015      	beq.n	8000f3e <_svfiprintf_r+0xf6>
 8000f12:	9a07      	ldr	r2, [sp, #28]
 8000f14:	4654      	mov	r4, sl
 8000f16:	2000      	movs	r0, #0
 8000f18:	f04f 0c0a 	mov.w	ip, #10
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f22:	3b30      	subs	r3, #48	; 0x30
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d94e      	bls.n	8000fc6 <_svfiprintf_r+0x17e>
 8000f28:	b1b0      	cbz	r0, 8000f58 <_svfiprintf_r+0x110>
 8000f2a:	9207      	str	r2, [sp, #28]
 8000f2c:	e014      	b.n	8000f58 <_svfiprintf_r+0x110>
 8000f2e:	eba0 0308 	sub.w	r3, r0, r8
 8000f32:	fa09 f303 	lsl.w	r3, r9, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	46a2      	mov	sl, r4
 8000f3c:	e7d2      	b.n	8000ee4 <_svfiprintf_r+0x9c>
 8000f3e:	9b03      	ldr	r3, [sp, #12]
 8000f40:	1d19      	adds	r1, r3, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	9103      	str	r1, [sp, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bfbb      	ittet	lt
 8000f4a:	425b      	neglt	r3, r3
 8000f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8000f50:	9307      	strge	r3, [sp, #28]
 8000f52:	9307      	strlt	r3, [sp, #28]
 8000f54:	bfb8      	it	lt
 8000f56:	9204      	strlt	r2, [sp, #16]
 8000f58:	7823      	ldrb	r3, [r4, #0]
 8000f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f5c:	d10c      	bne.n	8000f78 <_svfiprintf_r+0x130>
 8000f5e:	7863      	ldrb	r3, [r4, #1]
 8000f60:	2b2a      	cmp	r3, #42	; 0x2a
 8000f62:	d135      	bne.n	8000fd0 <_svfiprintf_r+0x188>
 8000f64:	9b03      	ldr	r3, [sp, #12]
 8000f66:	1d1a      	adds	r2, r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	9203      	str	r2, [sp, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bfb8      	it	lt
 8000f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f74:	3402      	adds	r4, #2
 8000f76:	9305      	str	r3, [sp, #20]
 8000f78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001044 <_svfiprintf_r+0x1fc>
 8000f7c:	7821      	ldrb	r1, [r4, #0]
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4650      	mov	r0, sl
 8000f82:	f7ff f92d 	bl	80001e0 <memchr>
 8000f86:	b140      	cbz	r0, 8000f9a <_svfiprintf_r+0x152>
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	eba0 000a 	sub.w	r0, r0, sl
 8000f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8000f92:	9b04      	ldr	r3, [sp, #16]
 8000f94:	4303      	orrs	r3, r0
 8000f96:	3401      	adds	r4, #1
 8000f98:	9304      	str	r3, [sp, #16]
 8000f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f9e:	4826      	ldr	r0, [pc, #152]	; (8001038 <_svfiprintf_r+0x1f0>)
 8000fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fa4:	2206      	movs	r2, #6
 8000fa6:	f7ff f91b 	bl	80001e0 <memchr>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d038      	beq.n	8001020 <_svfiprintf_r+0x1d8>
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <_svfiprintf_r+0x1f4>)
 8000fb0:	bb1b      	cbnz	r3, 8000ffa <_svfiprintf_r+0x1b2>
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	3307      	adds	r3, #7
 8000fb6:	f023 0307 	bic.w	r3, r3, #7
 8000fba:	3308      	adds	r3, #8
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fc0:	4433      	add	r3, r6
 8000fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8000fc4:	e767      	b.n	8000e96 <_svfiprintf_r+0x4e>
 8000fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fca:	460c      	mov	r4, r1
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e7a5      	b.n	8000f1c <_svfiprintf_r+0xd4>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	3401      	adds	r4, #1
 8000fd4:	9305      	str	r3, [sp, #20]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0c0a 	mov.w	ip, #10
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fe2:	3a30      	subs	r2, #48	; 0x30
 8000fe4:	2a09      	cmp	r2, #9
 8000fe6:	d903      	bls.n	8000ff0 <_svfiprintf_r+0x1a8>
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0c5      	beq.n	8000f78 <_svfiprintf_r+0x130>
 8000fec:	9105      	str	r1, [sp, #20]
 8000fee:	e7c3      	b.n	8000f78 <_svfiprintf_r+0x130>
 8000ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e7f0      	b.n	8000fdc <_svfiprintf_r+0x194>
 8000ffa:	ab03      	add	r3, sp, #12
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	462a      	mov	r2, r5
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <_svfiprintf_r+0x1f8>)
 8001002:	a904      	add	r1, sp, #16
 8001004:	4638      	mov	r0, r7
 8001006:	f3af 8000 	nop.w
 800100a:	1c42      	adds	r2, r0, #1
 800100c:	4606      	mov	r6, r0
 800100e:	d1d6      	bne.n	8000fbe <_svfiprintf_r+0x176>
 8001010:	89ab      	ldrh	r3, [r5, #12]
 8001012:	065b      	lsls	r3, r3, #25
 8001014:	f53f af2c 	bmi.w	8000e70 <_svfiprintf_r+0x28>
 8001018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800101a:	b01d      	add	sp, #116	; 0x74
 800101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001020:	ab03      	add	r3, sp, #12
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	462a      	mov	r2, r5
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <_svfiprintf_r+0x1f8>)
 8001028:	a904      	add	r1, sp, #16
 800102a:	4638      	mov	r0, r7
 800102c:	f000 f9d4 	bl	80013d8 <_printf_i>
 8001030:	e7eb      	b.n	800100a <_svfiprintf_r+0x1c2>
 8001032:	bf00      	nop
 8001034:	08002094 	.word	0x08002094
 8001038:	0800209e 	.word	0x0800209e
 800103c:	00000000 	.word	0x00000000
 8001040:	08000d91 	.word	0x08000d91
 8001044:	0800209a 	.word	0x0800209a

08001048 <__sfputc_r>:
 8001048:	6893      	ldr	r3, [r2, #8]
 800104a:	3b01      	subs	r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	b410      	push	{r4}
 8001050:	6093      	str	r3, [r2, #8]
 8001052:	da08      	bge.n	8001066 <__sfputc_r+0x1e>
 8001054:	6994      	ldr	r4, [r2, #24]
 8001056:	42a3      	cmp	r3, r4
 8001058:	db01      	blt.n	800105e <__sfputc_r+0x16>
 800105a:	290a      	cmp	r1, #10
 800105c:	d103      	bne.n	8001066 <__sfputc_r+0x1e>
 800105e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001062:	f000 badf 	b.w	8001624 <__swbuf_r>
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	1c58      	adds	r0, r3, #1
 800106a:	6010      	str	r0, [r2, #0]
 800106c:	7019      	strb	r1, [r3, #0]
 800106e:	4608      	mov	r0, r1
 8001070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001074:	4770      	bx	lr

08001076 <__sfputs_r>:
 8001076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001078:	4606      	mov	r6, r0
 800107a:	460f      	mov	r7, r1
 800107c:	4614      	mov	r4, r2
 800107e:	18d5      	adds	r5, r2, r3
 8001080:	42ac      	cmp	r4, r5
 8001082:	d101      	bne.n	8001088 <__sfputs_r+0x12>
 8001084:	2000      	movs	r0, #0
 8001086:	e007      	b.n	8001098 <__sfputs_r+0x22>
 8001088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800108c:	463a      	mov	r2, r7
 800108e:	4630      	mov	r0, r6
 8001090:	f7ff ffda 	bl	8001048 <__sfputc_r>
 8001094:	1c43      	adds	r3, r0, #1
 8001096:	d1f3      	bne.n	8001080 <__sfputs_r+0xa>
 8001098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800109c <_vfiprintf_r>:
 800109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a0:	460d      	mov	r5, r1
 80010a2:	b09d      	sub	sp, #116	; 0x74
 80010a4:	4614      	mov	r4, r2
 80010a6:	4698      	mov	r8, r3
 80010a8:	4606      	mov	r6, r0
 80010aa:	b118      	cbz	r0, 80010b4 <_vfiprintf_r+0x18>
 80010ac:	6983      	ldr	r3, [r0, #24]
 80010ae:	b90b      	cbnz	r3, 80010b4 <_vfiprintf_r+0x18>
 80010b0:	f000 fc9a 	bl	80019e8 <__sinit>
 80010b4:	4b89      	ldr	r3, [pc, #548]	; (80012dc <_vfiprintf_r+0x240>)
 80010b6:	429d      	cmp	r5, r3
 80010b8:	d11b      	bne.n	80010f2 <_vfiprintf_r+0x56>
 80010ba:	6875      	ldr	r5, [r6, #4]
 80010bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010be:	07d9      	lsls	r1, r3, #31
 80010c0:	d405      	bmi.n	80010ce <_vfiprintf_r+0x32>
 80010c2:	89ab      	ldrh	r3, [r5, #12]
 80010c4:	059a      	lsls	r2, r3, #22
 80010c6:	d402      	bmi.n	80010ce <_vfiprintf_r+0x32>
 80010c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010ca:	f000 fd2b 	bl	8001b24 <__retarget_lock_acquire_recursive>
 80010ce:	89ab      	ldrh	r3, [r5, #12]
 80010d0:	071b      	lsls	r3, r3, #28
 80010d2:	d501      	bpl.n	80010d8 <_vfiprintf_r+0x3c>
 80010d4:	692b      	ldr	r3, [r5, #16]
 80010d6:	b9eb      	cbnz	r3, 8001114 <_vfiprintf_r+0x78>
 80010d8:	4629      	mov	r1, r5
 80010da:	4630      	mov	r0, r6
 80010dc:	f000 faf4 	bl	80016c8 <__swsetup_r>
 80010e0:	b1c0      	cbz	r0, 8001114 <_vfiprintf_r+0x78>
 80010e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010e4:	07dc      	lsls	r4, r3, #31
 80010e6:	d50e      	bpl.n	8001106 <_vfiprintf_r+0x6a>
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	b01d      	add	sp, #116	; 0x74
 80010ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010f2:	4b7b      	ldr	r3, [pc, #492]	; (80012e0 <_vfiprintf_r+0x244>)
 80010f4:	429d      	cmp	r5, r3
 80010f6:	d101      	bne.n	80010fc <_vfiprintf_r+0x60>
 80010f8:	68b5      	ldr	r5, [r6, #8]
 80010fa:	e7df      	b.n	80010bc <_vfiprintf_r+0x20>
 80010fc:	4b79      	ldr	r3, [pc, #484]	; (80012e4 <_vfiprintf_r+0x248>)
 80010fe:	429d      	cmp	r5, r3
 8001100:	bf08      	it	eq
 8001102:	68f5      	ldreq	r5, [r6, #12]
 8001104:	e7da      	b.n	80010bc <_vfiprintf_r+0x20>
 8001106:	89ab      	ldrh	r3, [r5, #12]
 8001108:	0598      	lsls	r0, r3, #22
 800110a:	d4ed      	bmi.n	80010e8 <_vfiprintf_r+0x4c>
 800110c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800110e:	f000 fd0a 	bl	8001b26 <__retarget_lock_release_recursive>
 8001112:	e7e9      	b.n	80010e8 <_vfiprintf_r+0x4c>
 8001114:	2300      	movs	r3, #0
 8001116:	9309      	str	r3, [sp, #36]	; 0x24
 8001118:	2320      	movs	r3, #32
 800111a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800111e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001122:	2330      	movs	r3, #48	; 0x30
 8001124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80012e8 <_vfiprintf_r+0x24c>
 8001128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800112c:	f04f 0901 	mov.w	r9, #1
 8001130:	4623      	mov	r3, r4
 8001132:	469a      	mov	sl, r3
 8001134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001138:	b10a      	cbz	r2, 800113e <_vfiprintf_r+0xa2>
 800113a:	2a25      	cmp	r2, #37	; 0x25
 800113c:	d1f9      	bne.n	8001132 <_vfiprintf_r+0x96>
 800113e:	ebba 0b04 	subs.w	fp, sl, r4
 8001142:	d00b      	beq.n	800115c <_vfiprintf_r+0xc0>
 8001144:	465b      	mov	r3, fp
 8001146:	4622      	mov	r2, r4
 8001148:	4629      	mov	r1, r5
 800114a:	4630      	mov	r0, r6
 800114c:	f7ff ff93 	bl	8001076 <__sfputs_r>
 8001150:	3001      	adds	r0, #1
 8001152:	f000 80aa 	beq.w	80012aa <_vfiprintf_r+0x20e>
 8001156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001158:	445a      	add	r2, fp
 800115a:	9209      	str	r2, [sp, #36]	; 0x24
 800115c:	f89a 3000 	ldrb.w	r3, [sl]
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80a2 	beq.w	80012aa <_vfiprintf_r+0x20e>
 8001166:	2300      	movs	r3, #0
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001170:	f10a 0a01 	add.w	sl, sl, #1
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	9307      	str	r3, [sp, #28]
 8001178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800117c:	931a      	str	r3, [sp, #104]	; 0x68
 800117e:	4654      	mov	r4, sl
 8001180:	2205      	movs	r2, #5
 8001182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001186:	4858      	ldr	r0, [pc, #352]	; (80012e8 <_vfiprintf_r+0x24c>)
 8001188:	f7ff f82a 	bl	80001e0 <memchr>
 800118c:	9a04      	ldr	r2, [sp, #16]
 800118e:	b9d8      	cbnz	r0, 80011c8 <_vfiprintf_r+0x12c>
 8001190:	06d1      	lsls	r1, r2, #27
 8001192:	bf44      	itt	mi
 8001194:	2320      	movmi	r3, #32
 8001196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800119a:	0713      	lsls	r3, r2, #28
 800119c:	bf44      	itt	mi
 800119e:	232b      	movmi	r3, #43	; 0x2b
 80011a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011a4:	f89a 3000 	ldrb.w	r3, [sl]
 80011a8:	2b2a      	cmp	r3, #42	; 0x2a
 80011aa:	d015      	beq.n	80011d8 <_vfiprintf_r+0x13c>
 80011ac:	9a07      	ldr	r2, [sp, #28]
 80011ae:	4654      	mov	r4, sl
 80011b0:	2000      	movs	r0, #0
 80011b2:	f04f 0c0a 	mov.w	ip, #10
 80011b6:	4621      	mov	r1, r4
 80011b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011bc:	3b30      	subs	r3, #48	; 0x30
 80011be:	2b09      	cmp	r3, #9
 80011c0:	d94e      	bls.n	8001260 <_vfiprintf_r+0x1c4>
 80011c2:	b1b0      	cbz	r0, 80011f2 <_vfiprintf_r+0x156>
 80011c4:	9207      	str	r2, [sp, #28]
 80011c6:	e014      	b.n	80011f2 <_vfiprintf_r+0x156>
 80011c8:	eba0 0308 	sub.w	r3, r0, r8
 80011cc:	fa09 f303 	lsl.w	r3, r9, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	9304      	str	r3, [sp, #16]
 80011d4:	46a2      	mov	sl, r4
 80011d6:	e7d2      	b.n	800117e <_vfiprintf_r+0xe2>
 80011d8:	9b03      	ldr	r3, [sp, #12]
 80011da:	1d19      	adds	r1, r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	9103      	str	r1, [sp, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bfbb      	ittet	lt
 80011e4:	425b      	neglt	r3, r3
 80011e6:	f042 0202 	orrlt.w	r2, r2, #2
 80011ea:	9307      	strge	r3, [sp, #28]
 80011ec:	9307      	strlt	r3, [sp, #28]
 80011ee:	bfb8      	it	lt
 80011f0:	9204      	strlt	r2, [sp, #16]
 80011f2:	7823      	ldrb	r3, [r4, #0]
 80011f4:	2b2e      	cmp	r3, #46	; 0x2e
 80011f6:	d10c      	bne.n	8001212 <_vfiprintf_r+0x176>
 80011f8:	7863      	ldrb	r3, [r4, #1]
 80011fa:	2b2a      	cmp	r3, #42	; 0x2a
 80011fc:	d135      	bne.n	800126a <_vfiprintf_r+0x1ce>
 80011fe:	9b03      	ldr	r3, [sp, #12]
 8001200:	1d1a      	adds	r2, r3, #4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	9203      	str	r2, [sp, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bfb8      	it	lt
 800120a:	f04f 33ff 	movlt.w	r3, #4294967295
 800120e:	3402      	adds	r4, #2
 8001210:	9305      	str	r3, [sp, #20]
 8001212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80012f8 <_vfiprintf_r+0x25c>
 8001216:	7821      	ldrb	r1, [r4, #0]
 8001218:	2203      	movs	r2, #3
 800121a:	4650      	mov	r0, sl
 800121c:	f7fe ffe0 	bl	80001e0 <memchr>
 8001220:	b140      	cbz	r0, 8001234 <_vfiprintf_r+0x198>
 8001222:	2340      	movs	r3, #64	; 0x40
 8001224:	eba0 000a 	sub.w	r0, r0, sl
 8001228:	fa03 f000 	lsl.w	r0, r3, r0
 800122c:	9b04      	ldr	r3, [sp, #16]
 800122e:	4303      	orrs	r3, r0
 8001230:	3401      	adds	r4, #1
 8001232:	9304      	str	r3, [sp, #16]
 8001234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001238:	482c      	ldr	r0, [pc, #176]	; (80012ec <_vfiprintf_r+0x250>)
 800123a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800123e:	2206      	movs	r2, #6
 8001240:	f7fe ffce 	bl	80001e0 <memchr>
 8001244:	2800      	cmp	r0, #0
 8001246:	d03f      	beq.n	80012c8 <_vfiprintf_r+0x22c>
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <_vfiprintf_r+0x254>)
 800124a:	bb1b      	cbnz	r3, 8001294 <_vfiprintf_r+0x1f8>
 800124c:	9b03      	ldr	r3, [sp, #12]
 800124e:	3307      	adds	r3, #7
 8001250:	f023 0307 	bic.w	r3, r3, #7
 8001254:	3308      	adds	r3, #8
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800125a:	443b      	add	r3, r7
 800125c:	9309      	str	r3, [sp, #36]	; 0x24
 800125e:	e767      	b.n	8001130 <_vfiprintf_r+0x94>
 8001260:	fb0c 3202 	mla	r2, ip, r2, r3
 8001264:	460c      	mov	r4, r1
 8001266:	2001      	movs	r0, #1
 8001268:	e7a5      	b.n	80011b6 <_vfiprintf_r+0x11a>
 800126a:	2300      	movs	r3, #0
 800126c:	3401      	adds	r4, #1
 800126e:	9305      	str	r3, [sp, #20]
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0c0a 	mov.w	ip, #10
 8001276:	4620      	mov	r0, r4
 8001278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800127c:	3a30      	subs	r2, #48	; 0x30
 800127e:	2a09      	cmp	r2, #9
 8001280:	d903      	bls.n	800128a <_vfiprintf_r+0x1ee>
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0c5      	beq.n	8001212 <_vfiprintf_r+0x176>
 8001286:	9105      	str	r1, [sp, #20]
 8001288:	e7c3      	b.n	8001212 <_vfiprintf_r+0x176>
 800128a:	fb0c 2101 	mla	r1, ip, r1, r2
 800128e:	4604      	mov	r4, r0
 8001290:	2301      	movs	r3, #1
 8001292:	e7f0      	b.n	8001276 <_vfiprintf_r+0x1da>
 8001294:	ab03      	add	r3, sp, #12
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	462a      	mov	r2, r5
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <_vfiprintf_r+0x258>)
 800129c:	a904      	add	r1, sp, #16
 800129e:	4630      	mov	r0, r6
 80012a0:	f3af 8000 	nop.w
 80012a4:	4607      	mov	r7, r0
 80012a6:	1c78      	adds	r0, r7, #1
 80012a8:	d1d6      	bne.n	8001258 <_vfiprintf_r+0x1bc>
 80012aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012ac:	07d9      	lsls	r1, r3, #31
 80012ae:	d405      	bmi.n	80012bc <_vfiprintf_r+0x220>
 80012b0:	89ab      	ldrh	r3, [r5, #12]
 80012b2:	059a      	lsls	r2, r3, #22
 80012b4:	d402      	bmi.n	80012bc <_vfiprintf_r+0x220>
 80012b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012b8:	f000 fc35 	bl	8001b26 <__retarget_lock_release_recursive>
 80012bc:	89ab      	ldrh	r3, [r5, #12]
 80012be:	065b      	lsls	r3, r3, #25
 80012c0:	f53f af12 	bmi.w	80010e8 <_vfiprintf_r+0x4c>
 80012c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012c6:	e711      	b.n	80010ec <_vfiprintf_r+0x50>
 80012c8:	ab03      	add	r3, sp, #12
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	462a      	mov	r2, r5
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_vfiprintf_r+0x258>)
 80012d0:	a904      	add	r1, sp, #16
 80012d2:	4630      	mov	r0, r6
 80012d4:	f000 f880 	bl	80013d8 <_printf_i>
 80012d8:	e7e4      	b.n	80012a4 <_vfiprintf_r+0x208>
 80012da:	bf00      	nop
 80012dc:	080020e8 	.word	0x080020e8
 80012e0:	08002108 	.word	0x08002108
 80012e4:	080020c8 	.word	0x080020c8
 80012e8:	08002094 	.word	0x08002094
 80012ec:	0800209e 	.word	0x0800209e
 80012f0:	00000000 	.word	0x00000000
 80012f4:	08001077 	.word	0x08001077
 80012f8:	0800209a 	.word	0x0800209a

080012fc <_printf_common>:
 80012fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001300:	4616      	mov	r6, r2
 8001302:	4699      	mov	r9, r3
 8001304:	688a      	ldr	r2, [r1, #8]
 8001306:	690b      	ldr	r3, [r1, #16]
 8001308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800130c:	4293      	cmp	r3, r2
 800130e:	bfb8      	it	lt
 8001310:	4613      	movlt	r3, r2
 8001312:	6033      	str	r3, [r6, #0]
 8001314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001318:	4607      	mov	r7, r0
 800131a:	460c      	mov	r4, r1
 800131c:	b10a      	cbz	r2, 8001322 <_printf_common+0x26>
 800131e:	3301      	adds	r3, #1
 8001320:	6033      	str	r3, [r6, #0]
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	0699      	lsls	r1, r3, #26
 8001326:	bf42      	ittt	mi
 8001328:	6833      	ldrmi	r3, [r6, #0]
 800132a:	3302      	addmi	r3, #2
 800132c:	6033      	strmi	r3, [r6, #0]
 800132e:	6825      	ldr	r5, [r4, #0]
 8001330:	f015 0506 	ands.w	r5, r5, #6
 8001334:	d106      	bne.n	8001344 <_printf_common+0x48>
 8001336:	f104 0a19 	add.w	sl, r4, #25
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	6832      	ldr	r2, [r6, #0]
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	42ab      	cmp	r3, r5
 8001342:	dc26      	bgt.n	8001392 <_printf_common+0x96>
 8001344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001348:	1e13      	subs	r3, r2, #0
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	bf18      	it	ne
 800134e:	2301      	movne	r3, #1
 8001350:	0692      	lsls	r2, r2, #26
 8001352:	d42b      	bmi.n	80013ac <_printf_common+0xb0>
 8001354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001358:	4649      	mov	r1, r9
 800135a:	4638      	mov	r0, r7
 800135c:	47c0      	blx	r8
 800135e:	3001      	adds	r0, #1
 8001360:	d01e      	beq.n	80013a0 <_printf_common+0xa4>
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	68e5      	ldr	r5, [r4, #12]
 8001366:	6832      	ldr	r2, [r6, #0]
 8001368:	f003 0306 	and.w	r3, r3, #6
 800136c:	2b04      	cmp	r3, #4
 800136e:	bf08      	it	eq
 8001370:	1aad      	subeq	r5, r5, r2
 8001372:	68a3      	ldr	r3, [r4, #8]
 8001374:	6922      	ldr	r2, [r4, #16]
 8001376:	bf0c      	ite	eq
 8001378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800137c:	2500      	movne	r5, #0
 800137e:	4293      	cmp	r3, r2
 8001380:	bfc4      	itt	gt
 8001382:	1a9b      	subgt	r3, r3, r2
 8001384:	18ed      	addgt	r5, r5, r3
 8001386:	2600      	movs	r6, #0
 8001388:	341a      	adds	r4, #26
 800138a:	42b5      	cmp	r5, r6
 800138c:	d11a      	bne.n	80013c4 <_printf_common+0xc8>
 800138e:	2000      	movs	r0, #0
 8001390:	e008      	b.n	80013a4 <_printf_common+0xa8>
 8001392:	2301      	movs	r3, #1
 8001394:	4652      	mov	r2, sl
 8001396:	4649      	mov	r1, r9
 8001398:	4638      	mov	r0, r7
 800139a:	47c0      	blx	r8
 800139c:	3001      	adds	r0, #1
 800139e:	d103      	bne.n	80013a8 <_printf_common+0xac>
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a8:	3501      	adds	r5, #1
 80013aa:	e7c6      	b.n	800133a <_printf_common+0x3e>
 80013ac:	18e1      	adds	r1, r4, r3
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	2030      	movs	r0, #48	; 0x30
 80013b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013b6:	4422      	add	r2, r4
 80013b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013c0:	3302      	adds	r3, #2
 80013c2:	e7c7      	b.n	8001354 <_printf_common+0x58>
 80013c4:	2301      	movs	r3, #1
 80013c6:	4622      	mov	r2, r4
 80013c8:	4649      	mov	r1, r9
 80013ca:	4638      	mov	r0, r7
 80013cc:	47c0      	blx	r8
 80013ce:	3001      	adds	r0, #1
 80013d0:	d0e6      	beq.n	80013a0 <_printf_common+0xa4>
 80013d2:	3601      	adds	r6, #1
 80013d4:	e7d9      	b.n	800138a <_printf_common+0x8e>
	...

080013d8 <_printf_i>:
 80013d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013dc:	460c      	mov	r4, r1
 80013de:	4691      	mov	r9, r2
 80013e0:	7e27      	ldrb	r7, [r4, #24]
 80013e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013e4:	2f78      	cmp	r7, #120	; 0x78
 80013e6:	4680      	mov	r8, r0
 80013e8:	469a      	mov	sl, r3
 80013ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013ee:	d807      	bhi.n	8001400 <_printf_i+0x28>
 80013f0:	2f62      	cmp	r7, #98	; 0x62
 80013f2:	d80a      	bhi.n	800140a <_printf_i+0x32>
 80013f4:	2f00      	cmp	r7, #0
 80013f6:	f000 80d8 	beq.w	80015aa <_printf_i+0x1d2>
 80013fa:	2f58      	cmp	r7, #88	; 0x58
 80013fc:	f000 80a3 	beq.w	8001546 <_printf_i+0x16e>
 8001400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001408:	e03a      	b.n	8001480 <_printf_i+0xa8>
 800140a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800140e:	2b15      	cmp	r3, #21
 8001410:	d8f6      	bhi.n	8001400 <_printf_i+0x28>
 8001412:	a001      	add	r0, pc, #4	; (adr r0, 8001418 <_printf_i+0x40>)
 8001414:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001418:	08001471 	.word	0x08001471
 800141c:	08001485 	.word	0x08001485
 8001420:	08001401 	.word	0x08001401
 8001424:	08001401 	.word	0x08001401
 8001428:	08001401 	.word	0x08001401
 800142c:	08001401 	.word	0x08001401
 8001430:	08001485 	.word	0x08001485
 8001434:	08001401 	.word	0x08001401
 8001438:	08001401 	.word	0x08001401
 800143c:	08001401 	.word	0x08001401
 8001440:	08001401 	.word	0x08001401
 8001444:	08001591 	.word	0x08001591
 8001448:	080014b5 	.word	0x080014b5
 800144c:	08001573 	.word	0x08001573
 8001450:	08001401 	.word	0x08001401
 8001454:	08001401 	.word	0x08001401
 8001458:	080015b3 	.word	0x080015b3
 800145c:	08001401 	.word	0x08001401
 8001460:	080014b5 	.word	0x080014b5
 8001464:	08001401 	.word	0x08001401
 8001468:	08001401 	.word	0x08001401
 800146c:	0800157b 	.word	0x0800157b
 8001470:	680b      	ldr	r3, [r1, #0]
 8001472:	1d1a      	adds	r2, r3, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	600a      	str	r2, [r1, #0]
 8001478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800147c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001480:	2301      	movs	r3, #1
 8001482:	e0a3      	b.n	80015cc <_printf_i+0x1f4>
 8001484:	6825      	ldr	r5, [r4, #0]
 8001486:	6808      	ldr	r0, [r1, #0]
 8001488:	062e      	lsls	r6, r5, #24
 800148a:	f100 0304 	add.w	r3, r0, #4
 800148e:	d50a      	bpl.n	80014a6 <_printf_i+0xce>
 8001490:	6805      	ldr	r5, [r0, #0]
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	2d00      	cmp	r5, #0
 8001496:	da03      	bge.n	80014a0 <_printf_i+0xc8>
 8001498:	232d      	movs	r3, #45	; 0x2d
 800149a:	426d      	negs	r5, r5
 800149c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014a0:	485e      	ldr	r0, [pc, #376]	; (800161c <_printf_i+0x244>)
 80014a2:	230a      	movs	r3, #10
 80014a4:	e019      	b.n	80014da <_printf_i+0x102>
 80014a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80014aa:	6805      	ldr	r5, [r0, #0]
 80014ac:	600b      	str	r3, [r1, #0]
 80014ae:	bf18      	it	ne
 80014b0:	b22d      	sxthne	r5, r5
 80014b2:	e7ef      	b.n	8001494 <_printf_i+0xbc>
 80014b4:	680b      	ldr	r3, [r1, #0]
 80014b6:	6825      	ldr	r5, [r4, #0]
 80014b8:	1d18      	adds	r0, r3, #4
 80014ba:	6008      	str	r0, [r1, #0]
 80014bc:	0628      	lsls	r0, r5, #24
 80014be:	d501      	bpl.n	80014c4 <_printf_i+0xec>
 80014c0:	681d      	ldr	r5, [r3, #0]
 80014c2:	e002      	b.n	80014ca <_printf_i+0xf2>
 80014c4:	0669      	lsls	r1, r5, #25
 80014c6:	d5fb      	bpl.n	80014c0 <_printf_i+0xe8>
 80014c8:	881d      	ldrh	r5, [r3, #0]
 80014ca:	4854      	ldr	r0, [pc, #336]	; (800161c <_printf_i+0x244>)
 80014cc:	2f6f      	cmp	r7, #111	; 0x6f
 80014ce:	bf0c      	ite	eq
 80014d0:	2308      	moveq	r3, #8
 80014d2:	230a      	movne	r3, #10
 80014d4:	2100      	movs	r1, #0
 80014d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014da:	6866      	ldr	r6, [r4, #4]
 80014dc:	60a6      	str	r6, [r4, #8]
 80014de:	2e00      	cmp	r6, #0
 80014e0:	bfa2      	ittt	ge
 80014e2:	6821      	ldrge	r1, [r4, #0]
 80014e4:	f021 0104 	bicge.w	r1, r1, #4
 80014e8:	6021      	strge	r1, [r4, #0]
 80014ea:	b90d      	cbnz	r5, 80014f0 <_printf_i+0x118>
 80014ec:	2e00      	cmp	r6, #0
 80014ee:	d04d      	beq.n	800158c <_printf_i+0x1b4>
 80014f0:	4616      	mov	r6, r2
 80014f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80014f6:	fb03 5711 	mls	r7, r3, r1, r5
 80014fa:	5dc7      	ldrb	r7, [r0, r7]
 80014fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001500:	462f      	mov	r7, r5
 8001502:	42bb      	cmp	r3, r7
 8001504:	460d      	mov	r5, r1
 8001506:	d9f4      	bls.n	80014f2 <_printf_i+0x11a>
 8001508:	2b08      	cmp	r3, #8
 800150a:	d10b      	bne.n	8001524 <_printf_i+0x14c>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	07df      	lsls	r7, r3, #31
 8001510:	d508      	bpl.n	8001524 <_printf_i+0x14c>
 8001512:	6923      	ldr	r3, [r4, #16]
 8001514:	6861      	ldr	r1, [r4, #4]
 8001516:	4299      	cmp	r1, r3
 8001518:	bfde      	ittt	le
 800151a:	2330      	movle	r3, #48	; 0x30
 800151c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001524:	1b92      	subs	r2, r2, r6
 8001526:	6122      	str	r2, [r4, #16]
 8001528:	f8cd a000 	str.w	sl, [sp]
 800152c:	464b      	mov	r3, r9
 800152e:	aa03      	add	r2, sp, #12
 8001530:	4621      	mov	r1, r4
 8001532:	4640      	mov	r0, r8
 8001534:	f7ff fee2 	bl	80012fc <_printf_common>
 8001538:	3001      	adds	r0, #1
 800153a:	d14c      	bne.n	80015d6 <_printf_i+0x1fe>
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	b004      	add	sp, #16
 8001542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001546:	4835      	ldr	r0, [pc, #212]	; (800161c <_printf_i+0x244>)
 8001548:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	680e      	ldr	r6, [r1, #0]
 8001550:	061f      	lsls	r7, r3, #24
 8001552:	f856 5b04 	ldr.w	r5, [r6], #4
 8001556:	600e      	str	r6, [r1, #0]
 8001558:	d514      	bpl.n	8001584 <_printf_i+0x1ac>
 800155a:	07d9      	lsls	r1, r3, #31
 800155c:	bf44      	itt	mi
 800155e:	f043 0320 	orrmi.w	r3, r3, #32
 8001562:	6023      	strmi	r3, [r4, #0]
 8001564:	b91d      	cbnz	r5, 800156e <_printf_i+0x196>
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	f023 0320 	bic.w	r3, r3, #32
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	2310      	movs	r3, #16
 8001570:	e7b0      	b.n	80014d4 <_printf_i+0xfc>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	6023      	str	r3, [r4, #0]
 800157a:	2378      	movs	r3, #120	; 0x78
 800157c:	4828      	ldr	r0, [pc, #160]	; (8001620 <_printf_i+0x248>)
 800157e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001582:	e7e3      	b.n	800154c <_printf_i+0x174>
 8001584:	065e      	lsls	r6, r3, #25
 8001586:	bf48      	it	mi
 8001588:	b2ad      	uxthmi	r5, r5
 800158a:	e7e6      	b.n	800155a <_printf_i+0x182>
 800158c:	4616      	mov	r6, r2
 800158e:	e7bb      	b.n	8001508 <_printf_i+0x130>
 8001590:	680b      	ldr	r3, [r1, #0]
 8001592:	6826      	ldr	r6, [r4, #0]
 8001594:	6960      	ldr	r0, [r4, #20]
 8001596:	1d1d      	adds	r5, r3, #4
 8001598:	600d      	str	r5, [r1, #0]
 800159a:	0635      	lsls	r5, r6, #24
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	d501      	bpl.n	80015a4 <_printf_i+0x1cc>
 80015a0:	6018      	str	r0, [r3, #0]
 80015a2:	e002      	b.n	80015aa <_printf_i+0x1d2>
 80015a4:	0671      	lsls	r1, r6, #25
 80015a6:	d5fb      	bpl.n	80015a0 <_printf_i+0x1c8>
 80015a8:	8018      	strh	r0, [r3, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	6123      	str	r3, [r4, #16]
 80015ae:	4616      	mov	r6, r2
 80015b0:	e7ba      	b.n	8001528 <_printf_i+0x150>
 80015b2:	680b      	ldr	r3, [r1, #0]
 80015b4:	1d1a      	adds	r2, r3, #4
 80015b6:	600a      	str	r2, [r1, #0]
 80015b8:	681e      	ldr	r6, [r3, #0]
 80015ba:	6862      	ldr	r2, [r4, #4]
 80015bc:	2100      	movs	r1, #0
 80015be:	4630      	mov	r0, r6
 80015c0:	f7fe fe0e 	bl	80001e0 <memchr>
 80015c4:	b108      	cbz	r0, 80015ca <_printf_i+0x1f2>
 80015c6:	1b80      	subs	r0, r0, r6
 80015c8:	6060      	str	r0, [r4, #4]
 80015ca:	6863      	ldr	r3, [r4, #4]
 80015cc:	6123      	str	r3, [r4, #16]
 80015ce:	2300      	movs	r3, #0
 80015d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015d4:	e7a8      	b.n	8001528 <_printf_i+0x150>
 80015d6:	6923      	ldr	r3, [r4, #16]
 80015d8:	4632      	mov	r2, r6
 80015da:	4649      	mov	r1, r9
 80015dc:	4640      	mov	r0, r8
 80015de:	47d0      	blx	sl
 80015e0:	3001      	adds	r0, #1
 80015e2:	d0ab      	beq.n	800153c <_printf_i+0x164>
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	079b      	lsls	r3, r3, #30
 80015e8:	d413      	bmi.n	8001612 <_printf_i+0x23a>
 80015ea:	68e0      	ldr	r0, [r4, #12]
 80015ec:	9b03      	ldr	r3, [sp, #12]
 80015ee:	4298      	cmp	r0, r3
 80015f0:	bfb8      	it	lt
 80015f2:	4618      	movlt	r0, r3
 80015f4:	e7a4      	b.n	8001540 <_printf_i+0x168>
 80015f6:	2301      	movs	r3, #1
 80015f8:	4632      	mov	r2, r6
 80015fa:	4649      	mov	r1, r9
 80015fc:	4640      	mov	r0, r8
 80015fe:	47d0      	blx	sl
 8001600:	3001      	adds	r0, #1
 8001602:	d09b      	beq.n	800153c <_printf_i+0x164>
 8001604:	3501      	adds	r5, #1
 8001606:	68e3      	ldr	r3, [r4, #12]
 8001608:	9903      	ldr	r1, [sp, #12]
 800160a:	1a5b      	subs	r3, r3, r1
 800160c:	42ab      	cmp	r3, r5
 800160e:	dcf2      	bgt.n	80015f6 <_printf_i+0x21e>
 8001610:	e7eb      	b.n	80015ea <_printf_i+0x212>
 8001612:	2500      	movs	r5, #0
 8001614:	f104 0619 	add.w	r6, r4, #25
 8001618:	e7f5      	b.n	8001606 <_printf_i+0x22e>
 800161a:	bf00      	nop
 800161c:	080020a5 	.word	0x080020a5
 8001620:	080020b6 	.word	0x080020b6

08001624 <__swbuf_r>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	460e      	mov	r6, r1
 8001628:	4614      	mov	r4, r2
 800162a:	4605      	mov	r5, r0
 800162c:	b118      	cbz	r0, 8001636 <__swbuf_r+0x12>
 800162e:	6983      	ldr	r3, [r0, #24]
 8001630:	b90b      	cbnz	r3, 8001636 <__swbuf_r+0x12>
 8001632:	f000 f9d9 	bl	80019e8 <__sinit>
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <__swbuf_r+0x98>)
 8001638:	429c      	cmp	r4, r3
 800163a:	d12b      	bne.n	8001694 <__swbuf_r+0x70>
 800163c:	686c      	ldr	r4, [r5, #4]
 800163e:	69a3      	ldr	r3, [r4, #24]
 8001640:	60a3      	str	r3, [r4, #8]
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	071a      	lsls	r2, r3, #28
 8001646:	d52f      	bpl.n	80016a8 <__swbuf_r+0x84>
 8001648:	6923      	ldr	r3, [r4, #16]
 800164a:	b36b      	cbz	r3, 80016a8 <__swbuf_r+0x84>
 800164c:	6923      	ldr	r3, [r4, #16]
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	1ac0      	subs	r0, r0, r3
 8001652:	6963      	ldr	r3, [r4, #20]
 8001654:	b2f6      	uxtb	r6, r6
 8001656:	4283      	cmp	r3, r0
 8001658:	4637      	mov	r7, r6
 800165a:	dc04      	bgt.n	8001666 <__swbuf_r+0x42>
 800165c:	4621      	mov	r1, r4
 800165e:	4628      	mov	r0, r5
 8001660:	f000 f92e 	bl	80018c0 <_fflush_r>
 8001664:	bb30      	cbnz	r0, 80016b4 <__swbuf_r+0x90>
 8001666:	68a3      	ldr	r3, [r4, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60a3      	str	r3, [r4, #8]
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	6022      	str	r2, [r4, #0]
 8001672:	701e      	strb	r6, [r3, #0]
 8001674:	6963      	ldr	r3, [r4, #20]
 8001676:	3001      	adds	r0, #1
 8001678:	4283      	cmp	r3, r0
 800167a:	d004      	beq.n	8001686 <__swbuf_r+0x62>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	07db      	lsls	r3, r3, #31
 8001680:	d506      	bpl.n	8001690 <__swbuf_r+0x6c>
 8001682:	2e0a      	cmp	r6, #10
 8001684:	d104      	bne.n	8001690 <__swbuf_r+0x6c>
 8001686:	4621      	mov	r1, r4
 8001688:	4628      	mov	r0, r5
 800168a:	f000 f919 	bl	80018c0 <_fflush_r>
 800168e:	b988      	cbnz	r0, 80016b4 <__swbuf_r+0x90>
 8001690:	4638      	mov	r0, r7
 8001692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <__swbuf_r+0x9c>)
 8001696:	429c      	cmp	r4, r3
 8001698:	d101      	bne.n	800169e <__swbuf_r+0x7a>
 800169a:	68ac      	ldr	r4, [r5, #8]
 800169c:	e7cf      	b.n	800163e <__swbuf_r+0x1a>
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <__swbuf_r+0xa0>)
 80016a0:	429c      	cmp	r4, r3
 80016a2:	bf08      	it	eq
 80016a4:	68ec      	ldreq	r4, [r5, #12]
 80016a6:	e7ca      	b.n	800163e <__swbuf_r+0x1a>
 80016a8:	4621      	mov	r1, r4
 80016aa:	4628      	mov	r0, r5
 80016ac:	f000 f80c 	bl	80016c8 <__swsetup_r>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d0cb      	beq.n	800164c <__swbuf_r+0x28>
 80016b4:	f04f 37ff 	mov.w	r7, #4294967295
 80016b8:	e7ea      	b.n	8001690 <__swbuf_r+0x6c>
 80016ba:	bf00      	nop
 80016bc:	080020e8 	.word	0x080020e8
 80016c0:	08002108 	.word	0x08002108
 80016c4:	080020c8 	.word	0x080020c8

080016c8 <__swsetup_r>:
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <__swsetup_r+0xcc>)
 80016ca:	b570      	push	{r4, r5, r6, lr}
 80016cc:	681d      	ldr	r5, [r3, #0]
 80016ce:	4606      	mov	r6, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	b125      	cbz	r5, 80016de <__swsetup_r+0x16>
 80016d4:	69ab      	ldr	r3, [r5, #24]
 80016d6:	b913      	cbnz	r3, 80016de <__swsetup_r+0x16>
 80016d8:	4628      	mov	r0, r5
 80016da:	f000 f985 	bl	80019e8 <__sinit>
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <__swsetup_r+0xd0>)
 80016e0:	429c      	cmp	r4, r3
 80016e2:	d10f      	bne.n	8001704 <__swsetup_r+0x3c>
 80016e4:	686c      	ldr	r4, [r5, #4]
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016ec:	0719      	lsls	r1, r3, #28
 80016ee:	d42c      	bmi.n	800174a <__swsetup_r+0x82>
 80016f0:	06dd      	lsls	r5, r3, #27
 80016f2:	d411      	bmi.n	8001718 <__swsetup_r+0x50>
 80016f4:	2309      	movs	r3, #9
 80016f6:	6033      	str	r3, [r6, #0]
 80016f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016fc:	81a3      	strh	r3, [r4, #12]
 80016fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001702:	e03e      	b.n	8001782 <__swsetup_r+0xba>
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <__swsetup_r+0xd4>)
 8001706:	429c      	cmp	r4, r3
 8001708:	d101      	bne.n	800170e <__swsetup_r+0x46>
 800170a:	68ac      	ldr	r4, [r5, #8]
 800170c:	e7eb      	b.n	80016e6 <__swsetup_r+0x1e>
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <__swsetup_r+0xd8>)
 8001710:	429c      	cmp	r4, r3
 8001712:	bf08      	it	eq
 8001714:	68ec      	ldreq	r4, [r5, #12]
 8001716:	e7e6      	b.n	80016e6 <__swsetup_r+0x1e>
 8001718:	0758      	lsls	r0, r3, #29
 800171a:	d512      	bpl.n	8001742 <__swsetup_r+0x7a>
 800171c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800171e:	b141      	cbz	r1, 8001732 <__swsetup_r+0x6a>
 8001720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001724:	4299      	cmp	r1, r3
 8001726:	d002      	beq.n	800172e <__swsetup_r+0x66>
 8001728:	4630      	mov	r0, r6
 800172a:	f7ff f987 	bl	8000a3c <_free_r>
 800172e:	2300      	movs	r3, #0
 8001730:	6363      	str	r3, [r4, #52]	; 0x34
 8001732:	89a3      	ldrh	r3, [r4, #12]
 8001734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001738:	81a3      	strh	r3, [r4, #12]
 800173a:	2300      	movs	r3, #0
 800173c:	6063      	str	r3, [r4, #4]
 800173e:	6923      	ldr	r3, [r4, #16]
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	89a3      	ldrh	r3, [r4, #12]
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	81a3      	strh	r3, [r4, #12]
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	b94b      	cbnz	r3, 8001762 <__swsetup_r+0x9a>
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001758:	d003      	beq.n	8001762 <__swsetup_r+0x9a>
 800175a:	4621      	mov	r1, r4
 800175c:	4630      	mov	r0, r6
 800175e:	f000 fa07 	bl	8001b70 <__smakebuf_r>
 8001762:	89a0      	ldrh	r0, [r4, #12]
 8001764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001768:	f010 0301 	ands.w	r3, r0, #1
 800176c:	d00a      	beq.n	8001784 <__swsetup_r+0xbc>
 800176e:	2300      	movs	r3, #0
 8001770:	60a3      	str	r3, [r4, #8]
 8001772:	6963      	ldr	r3, [r4, #20]
 8001774:	425b      	negs	r3, r3
 8001776:	61a3      	str	r3, [r4, #24]
 8001778:	6923      	ldr	r3, [r4, #16]
 800177a:	b943      	cbnz	r3, 800178e <__swsetup_r+0xc6>
 800177c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001780:	d1ba      	bne.n	80016f8 <__swsetup_r+0x30>
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	0781      	lsls	r1, r0, #30
 8001786:	bf58      	it	pl
 8001788:	6963      	ldrpl	r3, [r4, #20]
 800178a:	60a3      	str	r3, [r4, #8]
 800178c:	e7f4      	b.n	8001778 <__swsetup_r+0xb0>
 800178e:	2000      	movs	r0, #0
 8001790:	e7f7      	b.n	8001782 <__swsetup_r+0xba>
 8001792:	bf00      	nop
 8001794:	2000000c 	.word	0x2000000c
 8001798:	080020e8 	.word	0x080020e8
 800179c:	08002108 	.word	0x08002108
 80017a0:	080020c8 	.word	0x080020c8

080017a4 <abort>:
 80017a4:	b508      	push	{r3, lr}
 80017a6:	2006      	movs	r0, #6
 80017a8:	f000 fa98 	bl	8001cdc <raise>
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 fbb3 	bl	8001f18 <_exit>
	...

080017b4 <__sflush_r>:
 80017b4:	898a      	ldrh	r2, [r1, #12]
 80017b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ba:	4605      	mov	r5, r0
 80017bc:	0710      	lsls	r0, r2, #28
 80017be:	460c      	mov	r4, r1
 80017c0:	d458      	bmi.n	8001874 <__sflush_r+0xc0>
 80017c2:	684b      	ldr	r3, [r1, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dc05      	bgt.n	80017d4 <__sflush_r+0x20>
 80017c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	dc02      	bgt.n	80017d4 <__sflush_r+0x20>
 80017ce:	2000      	movs	r0, #0
 80017d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	d0f9      	beq.n	80017ce <__sflush_r+0x1a>
 80017da:	2300      	movs	r3, #0
 80017dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017e0:	682f      	ldr	r7, [r5, #0]
 80017e2:	602b      	str	r3, [r5, #0]
 80017e4:	d032      	beq.n	800184c <__sflush_r+0x98>
 80017e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017e8:	89a3      	ldrh	r3, [r4, #12]
 80017ea:	075a      	lsls	r2, r3, #29
 80017ec:	d505      	bpl.n	80017fa <__sflush_r+0x46>
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	1ac0      	subs	r0, r0, r3
 80017f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017f4:	b10b      	cbz	r3, 80017fa <__sflush_r+0x46>
 80017f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017f8:	1ac0      	subs	r0, r0, r3
 80017fa:	2300      	movs	r3, #0
 80017fc:	4602      	mov	r2, r0
 80017fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001800:	6a21      	ldr	r1, [r4, #32]
 8001802:	4628      	mov	r0, r5
 8001804:	47b0      	blx	r6
 8001806:	1c43      	adds	r3, r0, #1
 8001808:	89a3      	ldrh	r3, [r4, #12]
 800180a:	d106      	bne.n	800181a <__sflush_r+0x66>
 800180c:	6829      	ldr	r1, [r5, #0]
 800180e:	291d      	cmp	r1, #29
 8001810:	d82c      	bhi.n	800186c <__sflush_r+0xb8>
 8001812:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <__sflush_r+0x108>)
 8001814:	40ca      	lsrs	r2, r1
 8001816:	07d6      	lsls	r6, r2, #31
 8001818:	d528      	bpl.n	800186c <__sflush_r+0xb8>
 800181a:	2200      	movs	r2, #0
 800181c:	6062      	str	r2, [r4, #4]
 800181e:	04d9      	lsls	r1, r3, #19
 8001820:	6922      	ldr	r2, [r4, #16]
 8001822:	6022      	str	r2, [r4, #0]
 8001824:	d504      	bpl.n	8001830 <__sflush_r+0x7c>
 8001826:	1c42      	adds	r2, r0, #1
 8001828:	d101      	bne.n	800182e <__sflush_r+0x7a>
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	b903      	cbnz	r3, 8001830 <__sflush_r+0x7c>
 800182e:	6560      	str	r0, [r4, #84]	; 0x54
 8001830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001832:	602f      	str	r7, [r5, #0]
 8001834:	2900      	cmp	r1, #0
 8001836:	d0ca      	beq.n	80017ce <__sflush_r+0x1a>
 8001838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800183c:	4299      	cmp	r1, r3
 800183e:	d002      	beq.n	8001846 <__sflush_r+0x92>
 8001840:	4628      	mov	r0, r5
 8001842:	f7ff f8fb 	bl	8000a3c <_free_r>
 8001846:	2000      	movs	r0, #0
 8001848:	6360      	str	r0, [r4, #52]	; 0x34
 800184a:	e7c1      	b.n	80017d0 <__sflush_r+0x1c>
 800184c:	6a21      	ldr	r1, [r4, #32]
 800184e:	2301      	movs	r3, #1
 8001850:	4628      	mov	r0, r5
 8001852:	47b0      	blx	r6
 8001854:	1c41      	adds	r1, r0, #1
 8001856:	d1c7      	bne.n	80017e8 <__sflush_r+0x34>
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0c4      	beq.n	80017e8 <__sflush_r+0x34>
 800185e:	2b1d      	cmp	r3, #29
 8001860:	d001      	beq.n	8001866 <__sflush_r+0xb2>
 8001862:	2b16      	cmp	r3, #22
 8001864:	d101      	bne.n	800186a <__sflush_r+0xb6>
 8001866:	602f      	str	r7, [r5, #0]
 8001868:	e7b1      	b.n	80017ce <__sflush_r+0x1a>
 800186a:	89a3      	ldrh	r3, [r4, #12]
 800186c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001870:	81a3      	strh	r3, [r4, #12]
 8001872:	e7ad      	b.n	80017d0 <__sflush_r+0x1c>
 8001874:	690f      	ldr	r7, [r1, #16]
 8001876:	2f00      	cmp	r7, #0
 8001878:	d0a9      	beq.n	80017ce <__sflush_r+0x1a>
 800187a:	0793      	lsls	r3, r2, #30
 800187c:	680e      	ldr	r6, [r1, #0]
 800187e:	bf08      	it	eq
 8001880:	694b      	ldreq	r3, [r1, #20]
 8001882:	600f      	str	r7, [r1, #0]
 8001884:	bf18      	it	ne
 8001886:	2300      	movne	r3, #0
 8001888:	eba6 0807 	sub.w	r8, r6, r7
 800188c:	608b      	str	r3, [r1, #8]
 800188e:	f1b8 0f00 	cmp.w	r8, #0
 8001892:	dd9c      	ble.n	80017ce <__sflush_r+0x1a>
 8001894:	6a21      	ldr	r1, [r4, #32]
 8001896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001898:	4643      	mov	r3, r8
 800189a:	463a      	mov	r2, r7
 800189c:	4628      	mov	r0, r5
 800189e:	47b0      	blx	r6
 80018a0:	2800      	cmp	r0, #0
 80018a2:	dc06      	bgt.n	80018b2 <__sflush_r+0xfe>
 80018a4:	89a3      	ldrh	r3, [r4, #12]
 80018a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018aa:	81a3      	strh	r3, [r4, #12]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	e78e      	b.n	80017d0 <__sflush_r+0x1c>
 80018b2:	4407      	add	r7, r0
 80018b4:	eba8 0800 	sub.w	r8, r8, r0
 80018b8:	e7e9      	b.n	800188e <__sflush_r+0xda>
 80018ba:	bf00      	nop
 80018bc:	20400001 	.word	0x20400001

080018c0 <_fflush_r>:
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	690b      	ldr	r3, [r1, #16]
 80018c4:	4605      	mov	r5, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	b913      	cbnz	r3, 80018d0 <_fflush_r+0x10>
 80018ca:	2500      	movs	r5, #0
 80018cc:	4628      	mov	r0, r5
 80018ce:	bd38      	pop	{r3, r4, r5, pc}
 80018d0:	b118      	cbz	r0, 80018da <_fflush_r+0x1a>
 80018d2:	6983      	ldr	r3, [r0, #24]
 80018d4:	b90b      	cbnz	r3, 80018da <_fflush_r+0x1a>
 80018d6:	f000 f887 	bl	80019e8 <__sinit>
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <_fflush_r+0x6c>)
 80018dc:	429c      	cmp	r4, r3
 80018de:	d11b      	bne.n	8001918 <_fflush_r+0x58>
 80018e0:	686c      	ldr	r4, [r5, #4]
 80018e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ef      	beq.n	80018ca <_fflush_r+0xa>
 80018ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018ec:	07d0      	lsls	r0, r2, #31
 80018ee:	d404      	bmi.n	80018fa <_fflush_r+0x3a>
 80018f0:	0599      	lsls	r1, r3, #22
 80018f2:	d402      	bmi.n	80018fa <_fflush_r+0x3a>
 80018f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018f6:	f000 f915 	bl	8001b24 <__retarget_lock_acquire_recursive>
 80018fa:	4628      	mov	r0, r5
 80018fc:	4621      	mov	r1, r4
 80018fe:	f7ff ff59 	bl	80017b4 <__sflush_r>
 8001902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001904:	07da      	lsls	r2, r3, #31
 8001906:	4605      	mov	r5, r0
 8001908:	d4e0      	bmi.n	80018cc <_fflush_r+0xc>
 800190a:	89a3      	ldrh	r3, [r4, #12]
 800190c:	059b      	lsls	r3, r3, #22
 800190e:	d4dd      	bmi.n	80018cc <_fflush_r+0xc>
 8001910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001912:	f000 f908 	bl	8001b26 <__retarget_lock_release_recursive>
 8001916:	e7d9      	b.n	80018cc <_fflush_r+0xc>
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <_fflush_r+0x70>)
 800191a:	429c      	cmp	r4, r3
 800191c:	d101      	bne.n	8001922 <_fflush_r+0x62>
 800191e:	68ac      	ldr	r4, [r5, #8]
 8001920:	e7df      	b.n	80018e2 <_fflush_r+0x22>
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <_fflush_r+0x74>)
 8001924:	429c      	cmp	r4, r3
 8001926:	bf08      	it	eq
 8001928:	68ec      	ldreq	r4, [r5, #12]
 800192a:	e7da      	b.n	80018e2 <_fflush_r+0x22>
 800192c:	080020e8 	.word	0x080020e8
 8001930:	08002108 	.word	0x08002108
 8001934:	080020c8 	.word	0x080020c8

08001938 <std>:
 8001938:	2300      	movs	r3, #0
 800193a:	b510      	push	{r4, lr}
 800193c:	4604      	mov	r4, r0
 800193e:	e9c0 3300 	strd	r3, r3, [r0]
 8001942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001946:	6083      	str	r3, [r0, #8]
 8001948:	8181      	strh	r1, [r0, #12]
 800194a:	6643      	str	r3, [r0, #100]	; 0x64
 800194c:	81c2      	strh	r2, [r0, #14]
 800194e:	6183      	str	r3, [r0, #24]
 8001950:	4619      	mov	r1, r3
 8001952:	2208      	movs	r2, #8
 8001954:	305c      	adds	r0, #92	; 0x5c
 8001956:	f7ff f869 	bl	8000a2c <memset>
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <std+0x38>)
 800195c:	6263      	str	r3, [r4, #36]	; 0x24
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <std+0x3c>)
 8001960:	62a3      	str	r3, [r4, #40]	; 0x28
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <std+0x40>)
 8001964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <std+0x44>)
 8001968:	6224      	str	r4, [r4, #32]
 800196a:	6323      	str	r3, [r4, #48]	; 0x30
 800196c:	bd10      	pop	{r4, pc}
 800196e:	bf00      	nop
 8001970:	08001d15 	.word	0x08001d15
 8001974:	08001d37 	.word	0x08001d37
 8001978:	08001d6f 	.word	0x08001d6f
 800197c:	08001d93 	.word	0x08001d93

08001980 <_cleanup_r>:
 8001980:	4901      	ldr	r1, [pc, #4]	; (8001988 <_cleanup_r+0x8>)
 8001982:	f000 b8af 	b.w	8001ae4 <_fwalk_reent>
 8001986:	bf00      	nop
 8001988:	080018c1 	.word	0x080018c1

0800198c <__sfmoreglue>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	1e4a      	subs	r2, r1, #1
 8001990:	2568      	movs	r5, #104	; 0x68
 8001992:	4355      	muls	r5, r2
 8001994:	460e      	mov	r6, r1
 8001996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800199a:	f7ff f89f 	bl	8000adc <_malloc_r>
 800199e:	4604      	mov	r4, r0
 80019a0:	b140      	cbz	r0, 80019b4 <__sfmoreglue+0x28>
 80019a2:	2100      	movs	r1, #0
 80019a4:	e9c0 1600 	strd	r1, r6, [r0]
 80019a8:	300c      	adds	r0, #12
 80019aa:	60a0      	str	r0, [r4, #8]
 80019ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019b0:	f7ff f83c 	bl	8000a2c <memset>
 80019b4:	4620      	mov	r0, r4
 80019b6:	bd70      	pop	{r4, r5, r6, pc}

080019b8 <__sfp_lock_acquire>:
 80019b8:	4801      	ldr	r0, [pc, #4]	; (80019c0 <__sfp_lock_acquire+0x8>)
 80019ba:	f000 b8b3 	b.w	8001b24 <__retarget_lock_acquire_recursive>
 80019be:	bf00      	nop
 80019c0:	200002b4 	.word	0x200002b4

080019c4 <__sfp_lock_release>:
 80019c4:	4801      	ldr	r0, [pc, #4]	; (80019cc <__sfp_lock_release+0x8>)
 80019c6:	f000 b8ae 	b.w	8001b26 <__retarget_lock_release_recursive>
 80019ca:	bf00      	nop
 80019cc:	200002b4 	.word	0x200002b4

080019d0 <__sinit_lock_acquire>:
 80019d0:	4801      	ldr	r0, [pc, #4]	; (80019d8 <__sinit_lock_acquire+0x8>)
 80019d2:	f000 b8a7 	b.w	8001b24 <__retarget_lock_acquire_recursive>
 80019d6:	bf00      	nop
 80019d8:	200002af 	.word	0x200002af

080019dc <__sinit_lock_release>:
 80019dc:	4801      	ldr	r0, [pc, #4]	; (80019e4 <__sinit_lock_release+0x8>)
 80019de:	f000 b8a2 	b.w	8001b26 <__retarget_lock_release_recursive>
 80019e2:	bf00      	nop
 80019e4:	200002af 	.word	0x200002af

080019e8 <__sinit>:
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4604      	mov	r4, r0
 80019ec:	f7ff fff0 	bl	80019d0 <__sinit_lock_acquire>
 80019f0:	69a3      	ldr	r3, [r4, #24]
 80019f2:	b11b      	cbz	r3, 80019fc <__sinit+0x14>
 80019f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019f8:	f7ff bff0 	b.w	80019dc <__sinit_lock_release>
 80019fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001a00:	6523      	str	r3, [r4, #80]	; 0x50
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <__sinit+0x68>)
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <__sinit+0x6c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	62a2      	str	r2, [r4, #40]	; 0x28
 8001a0a:	42a3      	cmp	r3, r4
 8001a0c:	bf04      	itt	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	61a3      	streq	r3, [r4, #24]
 8001a12:	4620      	mov	r0, r4
 8001a14:	f000 f820 	bl	8001a58 <__sfp>
 8001a18:	6060      	str	r0, [r4, #4]
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f000 f81c 	bl	8001a58 <__sfp>
 8001a20:	60a0      	str	r0, [r4, #8]
 8001a22:	4620      	mov	r0, r4
 8001a24:	f000 f818 	bl	8001a58 <__sfp>
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60e0      	str	r0, [r4, #12]
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	6860      	ldr	r0, [r4, #4]
 8001a30:	f7ff ff82 	bl	8001938 <std>
 8001a34:	68a0      	ldr	r0, [r4, #8]
 8001a36:	2201      	movs	r2, #1
 8001a38:	2109      	movs	r1, #9
 8001a3a:	f7ff ff7d 	bl	8001938 <std>
 8001a3e:	68e0      	ldr	r0, [r4, #12]
 8001a40:	2202      	movs	r2, #2
 8001a42:	2112      	movs	r1, #18
 8001a44:	f7ff ff78 	bl	8001938 <std>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61a3      	str	r3, [r4, #24]
 8001a4c:	e7d2      	b.n	80019f4 <__sinit+0xc>
 8001a4e:	bf00      	nop
 8001a50:	08001fdc 	.word	0x08001fdc
 8001a54:	08001981 	.word	0x08001981

08001a58 <__sfp>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	4607      	mov	r7, r0
 8001a5c:	f7ff ffac 	bl	80019b8 <__sfp_lock_acquire>
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <__sfp+0x84>)
 8001a62:	681e      	ldr	r6, [r3, #0]
 8001a64:	69b3      	ldr	r3, [r6, #24]
 8001a66:	b913      	cbnz	r3, 8001a6e <__sfp+0x16>
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f7ff ffbd 	bl	80019e8 <__sinit>
 8001a6e:	3648      	adds	r6, #72	; 0x48
 8001a70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	d503      	bpl.n	8001a80 <__sfp+0x28>
 8001a78:	6833      	ldr	r3, [r6, #0]
 8001a7a:	b30b      	cbz	r3, 8001ac0 <__sfp+0x68>
 8001a7c:	6836      	ldr	r6, [r6, #0]
 8001a7e:	e7f7      	b.n	8001a70 <__sfp+0x18>
 8001a80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a84:	b9d5      	cbnz	r5, 8001abc <__sfp+0x64>
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <__sfp+0x88>)
 8001a88:	60e3      	str	r3, [r4, #12]
 8001a8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a8e:	6665      	str	r5, [r4, #100]	; 0x64
 8001a90:	f000 f847 	bl	8001b22 <__retarget_lock_init_recursive>
 8001a94:	f7ff ff96 	bl	80019c4 <__sfp_lock_release>
 8001a98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001aa0:	6025      	str	r5, [r4, #0]
 8001aa2:	61a5      	str	r5, [r4, #24]
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001aac:	f7fe ffbe 	bl	8000a2c <memset>
 8001ab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ab8:	4620      	mov	r0, r4
 8001aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001abc:	3468      	adds	r4, #104	; 0x68
 8001abe:	e7d9      	b.n	8001a74 <__sfp+0x1c>
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f7ff ff62 	bl	800198c <__sfmoreglue>
 8001ac8:	4604      	mov	r4, r0
 8001aca:	6030      	str	r0, [r6, #0]
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d1d5      	bne.n	8001a7c <__sfp+0x24>
 8001ad0:	f7ff ff78 	bl	80019c4 <__sfp_lock_release>
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	e7ee      	b.n	8001ab8 <__sfp+0x60>
 8001ada:	bf00      	nop
 8001adc:	08001fdc 	.word	0x08001fdc
 8001ae0:	ffff0001 	.word	0xffff0001

08001ae4 <_fwalk_reent>:
 8001ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ae8:	4606      	mov	r6, r0
 8001aea:	4688      	mov	r8, r1
 8001aec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001af0:	2700      	movs	r7, #0
 8001af2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001af6:	f1b9 0901 	subs.w	r9, r9, #1
 8001afa:	d505      	bpl.n	8001b08 <_fwalk_reent+0x24>
 8001afc:	6824      	ldr	r4, [r4, #0]
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d1f7      	bne.n	8001af2 <_fwalk_reent+0xe>
 8001b02:	4638      	mov	r0, r7
 8001b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b08:	89ab      	ldrh	r3, [r5, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d907      	bls.n	8001b1e <_fwalk_reent+0x3a>
 8001b0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b12:	3301      	adds	r3, #1
 8001b14:	d003      	beq.n	8001b1e <_fwalk_reent+0x3a>
 8001b16:	4629      	mov	r1, r5
 8001b18:	4630      	mov	r0, r6
 8001b1a:	47c0      	blx	r8
 8001b1c:	4307      	orrs	r7, r0
 8001b1e:	3568      	adds	r5, #104	; 0x68
 8001b20:	e7e9      	b.n	8001af6 <_fwalk_reent+0x12>

08001b22 <__retarget_lock_init_recursive>:
 8001b22:	4770      	bx	lr

08001b24 <__retarget_lock_acquire_recursive>:
 8001b24:	4770      	bx	lr

08001b26 <__retarget_lock_release_recursive>:
 8001b26:	4770      	bx	lr

08001b28 <__swhatbuf_r>:
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	460e      	mov	r6, r1
 8001b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b30:	2900      	cmp	r1, #0
 8001b32:	b096      	sub	sp, #88	; 0x58
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	da07      	bge.n	8001b4a <__swhatbuf_r+0x22>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	602b      	str	r3, [r5, #0]
 8001b3e:	89b3      	ldrh	r3, [r6, #12]
 8001b40:	061a      	lsls	r2, r3, #24
 8001b42:	d410      	bmi.n	8001b66 <__swhatbuf_r+0x3e>
 8001b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b48:	e00e      	b.n	8001b68 <__swhatbuf_r+0x40>
 8001b4a:	466a      	mov	r2, sp
 8001b4c:	f000 f948 	bl	8001de0 <_fstat_r>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	dbf2      	blt.n	8001b3a <__swhatbuf_r+0x12>
 8001b54:	9a01      	ldr	r2, [sp, #4]
 8001b56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b5e:	425a      	negs	r2, r3
 8001b60:	415a      	adcs	r2, r3
 8001b62:	602a      	str	r2, [r5, #0]
 8001b64:	e7ee      	b.n	8001b44 <__swhatbuf_r+0x1c>
 8001b66:	2340      	movs	r3, #64	; 0x40
 8001b68:	2000      	movs	r0, #0
 8001b6a:	6023      	str	r3, [r4, #0]
 8001b6c:	b016      	add	sp, #88	; 0x58
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}

08001b70 <__smakebuf_r>:
 8001b70:	898b      	ldrh	r3, [r1, #12]
 8001b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b74:	079d      	lsls	r5, r3, #30
 8001b76:	4606      	mov	r6, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	d507      	bpl.n	8001b8c <__smakebuf_r+0x1c>
 8001b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b80:	6023      	str	r3, [r4, #0]
 8001b82:	6123      	str	r3, [r4, #16]
 8001b84:	2301      	movs	r3, #1
 8001b86:	6163      	str	r3, [r4, #20]
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	ab01      	add	r3, sp, #4
 8001b8e:	466a      	mov	r2, sp
 8001b90:	f7ff ffca 	bl	8001b28 <__swhatbuf_r>
 8001b94:	9900      	ldr	r1, [sp, #0]
 8001b96:	4605      	mov	r5, r0
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f7fe ff9f 	bl	8000adc <_malloc_r>
 8001b9e:	b948      	cbnz	r0, 8001bb4 <__smakebuf_r+0x44>
 8001ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ba4:	059a      	lsls	r2, r3, #22
 8001ba6:	d4ef      	bmi.n	8001b88 <__smakebuf_r+0x18>
 8001ba8:	f023 0303 	bic.w	r3, r3, #3
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	81a3      	strh	r3, [r4, #12]
 8001bb2:	e7e3      	b.n	8001b7c <__smakebuf_r+0xc>
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <__smakebuf_r+0x7c>)
 8001bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001bb8:	89a3      	ldrh	r3, [r4, #12]
 8001bba:	6020      	str	r0, [r4, #0]
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc0:	81a3      	strh	r3, [r4, #12]
 8001bc2:	9b00      	ldr	r3, [sp, #0]
 8001bc4:	6163      	str	r3, [r4, #20]
 8001bc6:	9b01      	ldr	r3, [sp, #4]
 8001bc8:	6120      	str	r0, [r4, #16]
 8001bca:	b15b      	cbz	r3, 8001be4 <__smakebuf_r+0x74>
 8001bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f000 f917 	bl	8001e04 <_isatty_r>
 8001bd6:	b128      	cbz	r0, 8001be4 <__smakebuf_r+0x74>
 8001bd8:	89a3      	ldrh	r3, [r4, #12]
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	81a3      	strh	r3, [r4, #12]
 8001be4:	89a0      	ldrh	r0, [r4, #12]
 8001be6:	4305      	orrs	r5, r0
 8001be8:	81a5      	strh	r5, [r4, #12]
 8001bea:	e7cd      	b.n	8001b88 <__smakebuf_r+0x18>
 8001bec:	08001981 	.word	0x08001981

08001bf0 <memcpy>:
 8001bf0:	440a      	add	r2, r1
 8001bf2:	4291      	cmp	r1, r2
 8001bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001bf8:	d100      	bne.n	8001bfc <memcpy+0xc>
 8001bfa:	4770      	bx	lr
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c06:	4291      	cmp	r1, r2
 8001c08:	d1f9      	bne.n	8001bfe <memcpy+0xe>
 8001c0a:	bd10      	pop	{r4, pc}

08001c0c <memmove>:
 8001c0c:	4288      	cmp	r0, r1
 8001c0e:	b510      	push	{r4, lr}
 8001c10:	eb01 0402 	add.w	r4, r1, r2
 8001c14:	d902      	bls.n	8001c1c <memmove+0x10>
 8001c16:	4284      	cmp	r4, r0
 8001c18:	4623      	mov	r3, r4
 8001c1a:	d807      	bhi.n	8001c2c <memmove+0x20>
 8001c1c:	1e43      	subs	r3, r0, #1
 8001c1e:	42a1      	cmp	r1, r4
 8001c20:	d008      	beq.n	8001c34 <memmove+0x28>
 8001c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c2a:	e7f8      	b.n	8001c1e <memmove+0x12>
 8001c2c:	4402      	add	r2, r0
 8001c2e:	4601      	mov	r1, r0
 8001c30:	428a      	cmp	r2, r1
 8001c32:	d100      	bne.n	8001c36 <memmove+0x2a>
 8001c34:	bd10      	pop	{r4, pc}
 8001c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c3e:	e7f7      	b.n	8001c30 <memmove+0x24>

08001c40 <_realloc_r>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	4607      	mov	r7, r0
 8001c44:	4614      	mov	r4, r2
 8001c46:	460e      	mov	r6, r1
 8001c48:	b921      	cbnz	r1, 8001c54 <_realloc_r+0x14>
 8001c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001c4e:	4611      	mov	r1, r2
 8001c50:	f7fe bf44 	b.w	8000adc <_malloc_r>
 8001c54:	b922      	cbnz	r2, 8001c60 <_realloc_r+0x20>
 8001c56:	f7fe fef1 	bl	8000a3c <_free_r>
 8001c5a:	4625      	mov	r5, r4
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c60:	f000 f8f2 	bl	8001e48 <_malloc_usable_size_r>
 8001c64:	42a0      	cmp	r0, r4
 8001c66:	d20f      	bcs.n	8001c88 <_realloc_r+0x48>
 8001c68:	4621      	mov	r1, r4
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f7fe ff36 	bl	8000adc <_malloc_r>
 8001c70:	4605      	mov	r5, r0
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d0f2      	beq.n	8001c5c <_realloc_r+0x1c>
 8001c76:	4631      	mov	r1, r6
 8001c78:	4622      	mov	r2, r4
 8001c7a:	f7ff ffb9 	bl	8001bf0 <memcpy>
 8001c7e:	4631      	mov	r1, r6
 8001c80:	4638      	mov	r0, r7
 8001c82:	f7fe fedb 	bl	8000a3c <_free_r>
 8001c86:	e7e9      	b.n	8001c5c <_realloc_r+0x1c>
 8001c88:	4635      	mov	r5, r6
 8001c8a:	e7e7      	b.n	8001c5c <_realloc_r+0x1c>

08001c8c <_raise_r>:
 8001c8c:	291f      	cmp	r1, #31
 8001c8e:	b538      	push	{r3, r4, r5, lr}
 8001c90:	4604      	mov	r4, r0
 8001c92:	460d      	mov	r5, r1
 8001c94:	d904      	bls.n	8001ca0 <_raise_r+0x14>
 8001c96:	2316      	movs	r3, #22
 8001c98:	6003      	str	r3, [r0, #0]
 8001c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ca2:	b112      	cbz	r2, 8001caa <_raise_r+0x1e>
 8001ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ca8:	b94b      	cbnz	r3, 8001cbe <_raise_r+0x32>
 8001caa:	4620      	mov	r0, r4
 8001cac:	f000 f830 	bl	8001d10 <_getpid_r>
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cba:	f000 b817 	b.w	8001cec <_kill_r>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d00a      	beq.n	8001cd8 <_raise_r+0x4c>
 8001cc2:	1c59      	adds	r1, r3, #1
 8001cc4:	d103      	bne.n	8001cce <_raise_r+0x42>
 8001cc6:	2316      	movs	r3, #22
 8001cc8:	6003      	str	r3, [r0, #0]
 8001cca:	2001      	movs	r0, #1
 8001ccc:	e7e7      	b.n	8001c9e <_raise_r+0x12>
 8001cce:	2400      	movs	r4, #0
 8001cd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	4798      	blx	r3
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7e0      	b.n	8001c9e <_raise_r+0x12>

08001cdc <raise>:
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <raise+0xc>)
 8001cde:	4601      	mov	r1, r0
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f7ff bfd3 	b.w	8001c8c <_raise_r>
 8001ce6:	bf00      	nop
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <_kill_r>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4d07      	ldr	r5, [pc, #28]	; (8001d0c <_kill_r+0x20>)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	602b      	str	r3, [r5, #0]
 8001cfa:	f000 f8df 	bl	8001ebc <_kill>
 8001cfe:	1c43      	adds	r3, r0, #1
 8001d00:	d102      	bne.n	8001d08 <_kill_r+0x1c>
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	b103      	cbz	r3, 8001d08 <_kill_r+0x1c>
 8001d06:	6023      	str	r3, [r4, #0]
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200002a8 	.word	0x200002a8

08001d10 <_getpid_r>:
 8001d10:	f000 b8c4 	b.w	8001e9c <_getpid>

08001d14 <__sread>:
 8001d14:	b510      	push	{r4, lr}
 8001d16:	460c      	mov	r4, r1
 8001d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d1c:	f000 f89c 	bl	8001e58 <_read_r>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	bfab      	itete	ge
 8001d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d26:	89a3      	ldrhlt	r3, [r4, #12]
 8001d28:	181b      	addge	r3, r3, r0
 8001d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d2e:	bfac      	ite	ge
 8001d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d32:	81a3      	strhlt	r3, [r4, #12]
 8001d34:	bd10      	pop	{r4, pc}

08001d36 <__swrite>:
 8001d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3a:	461f      	mov	r7, r3
 8001d3c:	898b      	ldrh	r3, [r1, #12]
 8001d3e:	05db      	lsls	r3, r3, #23
 8001d40:	4605      	mov	r5, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	4616      	mov	r6, r2
 8001d46:	d505      	bpl.n	8001d54 <__swrite+0x1e>
 8001d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f000 f868 	bl	8001e24 <_lseek_r>
 8001d54:	89a3      	ldrh	r3, [r4, #12]
 8001d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d5e:	81a3      	strh	r3, [r4, #12]
 8001d60:	4632      	mov	r2, r6
 8001d62:	463b      	mov	r3, r7
 8001d64:	4628      	mov	r0, r5
 8001d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6a:	f000 b817 	b.w	8001d9c <_write_r>

08001d6e <__sseek>:
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	460c      	mov	r4, r1
 8001d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d76:	f000 f855 	bl	8001e24 <_lseek_r>
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	89a3      	ldrh	r3, [r4, #12]
 8001d7e:	bf15      	itete	ne
 8001d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d8a:	81a3      	strheq	r3, [r4, #12]
 8001d8c:	bf18      	it	ne
 8001d8e:	81a3      	strhne	r3, [r4, #12]
 8001d90:	bd10      	pop	{r4, pc}

08001d92 <__sclose>:
 8001d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d96:	f000 b813 	b.w	8001dc0 <_close_r>
	...

08001d9c <_write_r>:
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4d07      	ldr	r5, [pc, #28]	; (8001dbc <_write_r+0x20>)
 8001da0:	4604      	mov	r4, r0
 8001da2:	4608      	mov	r0, r1
 8001da4:	4611      	mov	r1, r2
 8001da6:	2200      	movs	r2, #0
 8001da8:	602a      	str	r2, [r5, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f000 f8ac 	bl	8001f08 <_write>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d102      	bne.n	8001dba <_write_r+0x1e>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	b103      	cbz	r3, 8001dba <_write_r+0x1e>
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	200002a8 	.word	0x200002a8

08001dc0 <_close_r>:
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4d06      	ldr	r5, [pc, #24]	; (8001ddc <_close_r+0x1c>)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	602b      	str	r3, [r5, #0]
 8001dcc:	f000 f856 	bl	8001e7c <_close>
 8001dd0:	1c43      	adds	r3, r0, #1
 8001dd2:	d102      	bne.n	8001dda <_close_r+0x1a>
 8001dd4:	682b      	ldr	r3, [r5, #0]
 8001dd6:	b103      	cbz	r3, 8001dda <_close_r+0x1a>
 8001dd8:	6023      	str	r3, [r4, #0]
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
 8001ddc:	200002a8 	.word	0x200002a8

08001de0 <_fstat_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4d07      	ldr	r5, [pc, #28]	; (8001e00 <_fstat_r+0x20>)
 8001de4:	2300      	movs	r3, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	602b      	str	r3, [r5, #0]
 8001dee:	f000 f84d 	bl	8001e8c <_fstat>
 8001df2:	1c43      	adds	r3, r0, #1
 8001df4:	d102      	bne.n	8001dfc <_fstat_r+0x1c>
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	b103      	cbz	r3, 8001dfc <_fstat_r+0x1c>
 8001dfa:	6023      	str	r3, [r4, #0]
 8001dfc:	bd38      	pop	{r3, r4, r5, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002a8 	.word	0x200002a8

08001e04 <_isatty_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4d06      	ldr	r5, [pc, #24]	; (8001e20 <_isatty_r+0x1c>)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	602b      	str	r3, [r5, #0]
 8001e10:	f000 f84c 	bl	8001eac <_isatty>
 8001e14:	1c43      	adds	r3, r0, #1
 8001e16:	d102      	bne.n	8001e1e <_isatty_r+0x1a>
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	b103      	cbz	r3, 8001e1e <_isatty_r+0x1a>
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
 8001e20:	200002a8 	.word	0x200002a8

08001e24 <_lseek_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4d07      	ldr	r5, [pc, #28]	; (8001e44 <_lseek_r+0x20>)
 8001e28:	4604      	mov	r4, r0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	602a      	str	r2, [r5, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f000 f84a 	bl	8001ecc <_lseek>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d102      	bne.n	8001e42 <_lseek_r+0x1e>
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	b103      	cbz	r3, 8001e42 <_lseek_r+0x1e>
 8001e40:	6023      	str	r3, [r4, #0]
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
 8001e44:	200002a8 	.word	0x200002a8

08001e48 <_malloc_usable_size_r>:
 8001e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e4c:	1f18      	subs	r0, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bfbc      	itt	lt
 8001e52:	580b      	ldrlt	r3, [r1, r0]
 8001e54:	18c0      	addlt	r0, r0, r3
 8001e56:	4770      	bx	lr

08001e58 <_read_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4d07      	ldr	r5, [pc, #28]	; (8001e78 <_read_r+0x20>)
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	4608      	mov	r0, r1
 8001e60:	4611      	mov	r1, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	602a      	str	r2, [r5, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f000 f838 	bl	8001edc <_read>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d102      	bne.n	8001e76 <_read_r+0x1e>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b103      	cbz	r3, 8001e76 <_read_r+0x1e>
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	200002a8 	.word	0x200002a8

08001e7c <_close>:
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <_close+0xc>)
 8001e7e:	2258      	movs	r2, #88	; 0x58
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f04f 30ff 	mov.w	r0, #4294967295
 8001e86:	4770      	bx	lr
 8001e88:	200002a8 	.word	0x200002a8

08001e8c <_fstat>:
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <_fstat+0xc>)
 8001e8e:	2258      	movs	r2, #88	; 0x58
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f04f 30ff 	mov.w	r0, #4294967295
 8001e96:	4770      	bx	lr
 8001e98:	200002a8 	.word	0x200002a8

08001e9c <_getpid>:
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <_getpid+0xc>)
 8001e9e:	2258      	movs	r2, #88	; 0x58
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea6:	4770      	bx	lr
 8001ea8:	200002a8 	.word	0x200002a8

08001eac <_isatty>:
 8001eac:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <_isatty+0xc>)
 8001eae:	2258      	movs	r2, #88	; 0x58
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200002a8 	.word	0x200002a8

08001ebc <_kill>:
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <_kill+0xc>)
 8001ebe:	2258      	movs	r2, #88	; 0x58
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	4770      	bx	lr
 8001ec8:	200002a8 	.word	0x200002a8

08001ecc <_lseek>:
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <_lseek+0xc>)
 8001ece:	2258      	movs	r2, #88	; 0x58
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed6:	4770      	bx	lr
 8001ed8:	200002a8 	.word	0x200002a8

08001edc <_read>:
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <_read+0xc>)
 8001ede:	2258      	movs	r2, #88	; 0x58
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee6:	4770      	bx	lr
 8001ee8:	200002a8 	.word	0x200002a8

08001eec <_sbrk>:
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <_sbrk+0x14>)
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	b909      	cbnz	r1, 8001ef8 <_sbrk+0xc>
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <_sbrk+0x18>)
 8001ef6:	6019      	str	r1, [r3, #0]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	4402      	add	r2, r0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	4770      	bx	lr
 8001f00:	200002a4 	.word	0x200002a4
 8001f04:	200002b8 	.word	0x200002b8

08001f08 <_write>:
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <_write+0xc>)
 8001f0a:	2258      	movs	r2, #88	; 0x58
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f12:	4770      	bx	lr
 8001f14:	200002a8 	.word	0x200002a8

08001f18 <_exit>:
 8001f18:	e7fe      	b.n	8001f18 <_exit>
	...

08001f1c <_init>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	bf00      	nop
 8001f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f22:	bc08      	pop	{r3}
 8001f24:	469e      	mov	lr, r3
 8001f26:	4770      	bx	lr

08001f28 <_fini>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	bf00      	nop
 8001f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2e:	bc08      	pop	{r3}
 8001f30:	469e      	mov	lr, r3
 8001f32:	4770      	bx	lr
