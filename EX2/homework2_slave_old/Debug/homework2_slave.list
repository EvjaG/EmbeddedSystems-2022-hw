
homework2_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c0  080020c0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080020c0  080020c0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c0  080020c0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c0  080020c0  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080020c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000006c  08002134  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08002134  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003037  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007eb  00000000  00000000  000230d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  000238c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  000239b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018974  00000000  00000000  00023a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017a7  00000000  00000000  0003c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873f8  00000000  00000000  0003db83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f98  00000000  00000000  000c4fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000c5f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000c6034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e88 	.word	0x08001e88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08001e88 	.word	0x08001e88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <returnHour>:
int motdet = 1;

char* str = "1234567";

//this will be the button interrupt function
char* returnHour(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
    char* toReturn = (char*) malloc(10*sizeof(char));
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fb70 	bl	80009a8 <malloc>
 80002c8:	4603      	mov	r3, r0
 80002ca:	607b      	str	r3, [r7, #4]
	sprintf(toReturn,"%02d:%02d:%02d",hour,minute,second);
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <returnHour+0x34>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <returnHour+0x38>)
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <returnHour+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	460b      	mov	r3, r1
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <returnHour+0x40>)
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 fc34 	bl	8000b4c <siprintf>
	return toReturn;
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000110 	.word	0x20000110
 80002f4:	2000010c 	.word	0x2000010c
 80002f8:	20000108 	.word	0x20000108
 80002fc:	08001ea8 	.word	0x08001ea8

08000300 <power>:
// power function
int power(int a,int b){
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	int toReturn=1;
 800030a:	2301      	movs	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	e007      	b.n	8000324 <power+0x24>
		toReturn*=a;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<b;i++)
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3301      	adds	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbf3      	blt.n	8000314 <power+0x14>
	return toReturn;
 800032c:	68fb      	ldr	r3, [r7, #12]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
	...

0800033c <increaseSec>:
//this will be the timer interrupt function
void increaseSec(){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	int minutePass=0;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
	int hourPass=0;
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
	second++;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <increaseSec+0x78>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <increaseSec+0x78>)
 8000352:	6013      	str	r3, [r2, #0]
	if(second==60){
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <increaseSec+0x78>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b3c      	cmp	r3, #60	; 0x3c
 800035a:	d104      	bne.n	8000366 <increaseSec+0x2a>
		second=0;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <increaseSec+0x78>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
		minutePass=1;
 8000362:	2301      	movs	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
	}
	if(minutePass){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00d      	beq.n	8000388 <increaseSec+0x4c>
		minute++;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <increaseSec+0x7c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <increaseSec+0x7c>)
 8000374:	6013      	str	r3, [r2, #0]
		if(minute==60){
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <increaseSec+0x7c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b3c      	cmp	r3, #60	; 0x3c
 800037c:	d104      	bne.n	8000388 <increaseSec+0x4c>
				minute=0;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <increaseSec+0x7c>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
				hourPass=1;
 8000384:	2301      	movs	r3, #1
 8000386:	603b      	str	r3, [r7, #0]
		}
	}
	if(hourPass){
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <increaseSec+0x6a>
			hour++;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <increaseSec+0x80>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <increaseSec+0x80>)
 8000396:	6013      	str	r3, [r2, #0]
			if(hour==24){
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <increaseSec+0x80>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b18      	cmp	r3, #24
 800039e:	d102      	bne.n	80003a6 <increaseSec+0x6a>
					hour=0;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <increaseSec+0x80>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
			}
		}

}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000108 	.word	0x20000108
 80003b8:	2000010c 	.word	0x2000010c
 80003bc:	20000110 	.word	0x20000110

080003c0 <inputTime>:

//this will be the function from reading the input from the user
//return 0 if fail, otherwise return 1
int inputTime(char* input){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08e      	sub	sp, #56	; 0x38
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]


	//check string inputs
	char *token = strtok(input, " "); // doin manipulation over the string we recieved. (swaping all the panctual to " ")
 80003c8:	4938      	ldr	r1, [pc, #224]	; (80004ac <inputTime+0xec>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f000 fbde 	bl	8000b8c <strtok>
 80003d0:	6378      	str	r0, [r7, #52]	; 0x34
	token = strtok(NULL, ":");
 80003d2:	4937      	ldr	r1, [pc, #220]	; (80004b0 <inputTime+0xf0>)
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 fbd9 	bl	8000b8c <strtok>
 80003da:	6378      	str	r0, [r7, #52]	; 0x34

	int j=0;
 80003dc:	2300      	movs	r3, #0
 80003de:	633b      	str	r3, [r7, #48]	; 0x30
	int modArr[3]={24,60,60}; // we put each digit in the right place in our array and perfrmoing MOD action to make sure the hour is in bounds
 80003e0:	4a34      	ldr	r2, [pc, #208]	; (80004b4 <inputTime+0xf4>)
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80003e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int timeArr[3]={0,0,0};
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

	while (token != NULL)
 80003f8:	e047      	b.n	800048a <inputTime+0xca>
	{
        int sum=0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 80003fe:	2300      	movs	r3, #0
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
 8000402:	e020      	b.n	8000446 <inputTime+0x86>
			int c = token[i];
 8000404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000408:	4413      	add	r3, r2
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	627b      	str	r3, [r7, #36]	; 0x24
			if(c<48 || c>57) //check if char is digit
 800040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000410:	2b2f      	cmp	r3, #47	; 0x2f
 8000412:	dd02      	ble.n	800041a <inputTime+0x5a>
 8000414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000416:	2b39      	cmp	r3, #57	; 0x39
 8000418:	dd01      	ble.n	800041e <inputTime+0x5e>
				return 0;
 800041a:	2300      	movs	r3, #0
 800041c:	e042      	b.n	80004a4 <inputTime+0xe4>
			c-=48;
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	3b30      	subs	r3, #48	; 0x30
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
			sum+=c*power(10, 2-(i+1));
 8000424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000426:	f1c3 0301 	rsb	r3, r3, #1
 800042a:	4619      	mov	r1, r3
 800042c:	200a      	movs	r0, #10
 800042e:	f7ff ff67 	bl	8000300 <power>
 8000432:	4602      	mov	r2, r0
 8000434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000436:	fb03 f302 	mul.w	r3, r3, r2
 800043a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800043c:	4413      	add	r3, r2
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0;i<2;i++){
 8000440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000442:	3301      	adds	r3, #1
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
 8000446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000448:	2b01      	cmp	r3, #1
 800044a:	dddb      	ble.n	8000404 <inputTime+0x44>
		}
		if(sum<0 || sum>=modArr[j])
 800044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800044e:	2b00      	cmp	r3, #0
 8000450:	db09      	blt.n	8000466 <inputTime+0xa6>
 8000452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800045a:	4413      	add	r3, r2
 800045c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000462:	429a      	cmp	r2, r3
 8000464:	db01      	blt.n	800046a <inputTime+0xaa>
			return 0;
 8000466:	2300      	movs	r3, #0
 8000468:	e01c      	b.n	80004a4 <inputTime+0xe4>
//		printf("sum:\t%d\n",sum);
		timeArr[j]=sum;
 800046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000472:	4413      	add	r3, r2
 8000474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000476:	f843 2c2c 	str.w	r2, [r3, #-44]

		token = strtok(NULL, ":");
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <inputTime+0xf0>)
 800047c:	2000      	movs	r0, #0
 800047e:	f000 fb85 	bl	8000b8c <strtok>
 8000482:	6378      	str	r0, [r7, #52]	; 0x34
		j++;
 8000484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000486:	3301      	adds	r3, #1
 8000488:	633b      	str	r3, [r7, #48]	; 0x30
	while (token != NULL)
 800048a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1b4      	bne.n	80003fa <inputTime+0x3a>
	}
	//if no errors, change time vars accordingly
	hour=timeArr[0];
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <inputTime+0xf8>)
 8000494:	6013      	str	r3, [r2, #0]
	minute=timeArr[1];
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	4a08      	ldr	r2, [pc, #32]	; (80004bc <inputTime+0xfc>)
 800049a:	6013      	str	r3, [r2, #0]
	second=timeArr[2];
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <inputTime+0x100>)
 80004a0:	6013      	str	r3, [r2, #0]
	return 1;
 80004a2:	2301      	movs	r3, #1
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3738      	adds	r7, #56	; 0x38
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	08001eb8 	.word	0x08001eb8
 80004b0:	08001ebc 	.word	0x08001ebc
 80004b4:	08001ec0 	.word	0x08001ec0
 80004b8:	20000110 	.word	0x20000110
 80004bc:	2000010c 	.word	0x2000010c
 80004c0:	20000108 	.word	0x20000108

080004c4 <send_clock>:




void send_clock(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
//	GPIOA->ODR |= 0x00000100; // Write 0x00000001 to A0
//	GPIOA->ODR &= ~0x00000100; // Write 0 to A0
	GPIOA->ODR ^= 0x00000100;
 80004c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d2:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80004d6:	6153      	str	r3, [r2, #20]
	print("in send_clock time is = %s\n",returnHour());
 80004d8:	f7ff fef0 	bl	80002bc <returnHour>
 80004dc:	4603      	mov	r3, r0
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <send_clock+0x34>)
 80004e2:	f000 f9a5 	bl	8000830 <print>
	SPI_Transmit(returnHour(), 8);
 80004e6:	f7ff fee9 	bl	80002bc <returnHour>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2108      	movs	r1, #8
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f93c 	bl	800076c <SPI_Transmit>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	08001ecc 	.word	0x08001ecc

080004fc <EXTI15_10_IRQHandler>:


// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){ // turning off the interrupt flag
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <EXTI15_10_IRQHandler+0x30>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a09      	ldr	r2, [pc, #36]	; (800052c <EXTI15_10_IRQHandler+0x30>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050c:	6153      	str	r3, [r2, #20]
	char* toPrint = returnHour(); // printing the current time
 800050e:	f7ff fed5 	bl	80002bc <returnHour>
 8000512:	6078      	str	r0, [r7, #4]
//	SPI_Transmit(str,8);
	print("%s\n",toPrint);
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <EXTI15_10_IRQHandler+0x34>)
 8000518:	f000 f98a 	bl	8000830 <print>
	free(toPrint);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 fa4b 	bl	80009b8 <free>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40010400 	.word	0x40010400
 8000530:	08001ee8 	.word	0x08001ee8

08000534 <TIM2_IRQHandler>:


// ------------------------------------------------------Timer handler function
void TIM2_IRQHandler(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	flip^=1; // for full-second check
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <TIM2_IRQHandler+0x54>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f083 0301 	eor.w	r3, r3, #1
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <TIM2_IRQHandler+0x54>)
 8000542:	6013      	str	r3, [r2, #0]
	if(first && flip){
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <TIM2_IRQHandler+0x58>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d008      	beq.n	800055e <TIM2_IRQHandler+0x2a>
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <TIM2_IRQHandler+0x54>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <TIM2_IRQHandler+0x2a>
		//if we've been to the function at least once
		increaseSec(); // increase time by 1 second
 8000554:	f7ff fef2 	bl	800033c <increaseSec>
		motdet=1;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <TIM2_IRQHandler+0x5c>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
	}
	first = 1; //indicate we've visited function at least once
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <TIM2_IRQHandler+0x58>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
	GPIOA->ODR ^= 0x00000020; // Write 0x00000020 to the address 0x48000014
 8000564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056e:	f083 0320 	eor.w	r3, r3, #32
 8000572:	6153      	str	r3, [r2, #20]


	TIM2->SR&=0XFFFFFFFE; // reenable timer interrupt
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6113      	str	r3, [r2, #16]


}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000114 	.word	0x20000114
 8000590:	20000004 	.word	0x20000004

08000594 <main>:


//------------------------------------------------------ Main
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000E0000;
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <main+0x118>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a43      	ldr	r2, [pc, #268]	; (80006ac <main+0x118>)
 80005a0:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80005a4:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 80005a6:	4b41      	ldr	r3, [pc, #260]	; (80006ac <main+0x118>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a40      	ldr	r2, [pc, #256]	; (80006ac <main+0x118>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 80005b2:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <main+0x118>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a3d      	ldr	r2, [pc, #244]	; (80006ac <main+0x118>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 80005be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 80005ce:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <main+0x11c>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <main+0x11c>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d8:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <main+0x11c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <main+0x11c>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e4:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 80005e6:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <main+0x120>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a32      	ldr	r2, [pc, #200]	; (80006b4 <main+0x120>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	6153      	str	r3, [r2, #20]
// ------------------------------------------------------
    // Configure GPIOA pin 5,0 as output .
    GPIOA->MODER |= 0x00010400;
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fc:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 8000600:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000121; // (1 << 5);
 8000602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000610:	f023 0301 	bic.w	r3, r3, #1
 8000614:	6053      	str	r3, [r2, #4]





    TIM2->ARR= 8000000/2; // same as writing TIM2->ARR =0x003D0900*2 = the timer2 interrupt speed
 8000616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061a:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <main+0x124>)
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1|=0x00000001; // TIM2 counter enable
 800061e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn); //TIM2 interrupt function enable
 800062e:	201c      	movs	r0, #28
 8000630:	f7ff fe26 	bl	8000280 <__NVIC_EnableIRQ>


    GPIOA->ODR=0;
 8000634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]

    USART2_init();
 800063c:	f000 f910 	bl	8000860 <USART2_init>
    SPI1_init();
 8000640:	f000 f848 	bl	80006d4 <SPI1_init>
    print("Hello!\nThis is the secondary machine in the 2-machine exercise you are running!\n");
 8000644:	481d      	ldr	r0, [pc, #116]	; (80006bc <main+0x128>)
 8000646:	f000 f8f3 	bl	8000830 <print>

    while(1)
    {
    	if((GPIOA->IDR&0x2)==0x2){
 800064a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b02      	cmp	r3, #2
 8000656:	d10b      	bne.n	8000670 <main+0xdc>
    		if(motdet){
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <main+0x12c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <main+0xdc>
				print("MotDet ON!");
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <main+0x130>)
 8000662:	f000 f8e5 	bl	8000830 <print>
				send_clock();
 8000666:	f7ff ff2d 	bl	80004c4 <send_clock>
				motdet=0;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <main+0x12c>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
    		}
    	}
    	if((SPI1->SR&0x3)==0x3){
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <main+0x134>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	2b03      	cmp	r3, #3
 800067a:	d1e6      	bne.n	800064a <main+0xb6>
    		memset(SPI_A_Buffer,'\0',9);
 800067c:	2209      	movs	r2, #9
 800067e:	2100      	movs	r1, #0
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <main+0x138>)
 8000682:	f000 f9a1 	bl	80009c8 <memset>
//    		print("going to spi recive");
    		char * copySPI_A_Buffer = SPI_A_Buffer;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0x138>)
 8000688:	607b      	str	r3, [r7, #4]
    		SPI_Receive(SPI_A_Buffer,6);
 800068a:	2106      	movs	r1, #6
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <main+0x138>)
 800068e:	f000 f895 	bl	80007bc <SPI_Receive>
//    		print("return from spi recive");
    		if(SPI_A_Buffer[0] != '\0'){
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <main+0x138>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0d7      	beq.n	800064a <main+0xb6>
    			print("time recived = %s\n",copySPI_A_Buffer);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0x13c>)
 800069e:	f000 f8c7 	bl	8000830 <print>
    			inputTime(copySPI_A_Buffer);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fe8c 	bl	80003c0 <inputTime>
    	if((GPIOA->IDR&0x2)==0x2){
 80006a8:	e7cf      	b.n	800064a <main+0xb6>
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010400 	.word	0x40010400
 80006b4:	40010000 	.word	0x40010000
 80006b8:	003d0900 	.word	0x003d0900
 80006bc:	08001eec 	.word	0x08001eec
 80006c0:	20000004 	.word	0x20000004
 80006c4:	08001f40 	.word	0x08001f40
 80006c8:	40013000 	.word	0x40013000
 80006cc:	20000088 	.word	0x20000088
 80006d0:	08001f4c 	.word	0x08001f4c

080006d4 <SPI1_init>:
int A_Buffer_PLACE=0;



void SPI1_init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	2100      	movs	r1, #0
 80006dc:	481e      	ldr	r0, [pc, #120]	; (8000758 <SPI1_init+0x84>)
 80006de:	f000 f973 	bl	80009c8 <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	2100      	movs	r1, #0
 80006e6:	481d      	ldr	r0, [pc, #116]	; (800075c <SPI1_init+0x88>)
 80006e8:	f000 f96e 	bl	80009c8 <memset>
	*SPI_B_Buffer='\0';
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <SPI1_init+0x88>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]


	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <SPI1_init+0x8c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <SPI1_init+0x8c>)
 80006f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fc:	6193      	str	r3, [r2, #24]

	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 80006fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000708:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 800070c:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 800070e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000718:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800071c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000720:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000080; // Configure GPIOB pins 3  as alternate function 5, which is SPI1.
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <SPI1_init+0x90>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <SPI1_init+0x90>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PB3
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SPI1_init+0x90>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <SPI1_init+0x90>)
 8000734:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000738:	6213      	str	r3, [r2, #32]

	SPI1->CR2 |= 0x000000040;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <SPI1_init+0x94>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SPI1_init+0x94>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000744:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x000000040;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SPI1_init+0x94>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <SPI1_init+0x94>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	6013      	str	r3, [r2, #0]



}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000118 	.word	0x20000118
 800075c:	20000198 	.word	0x20000198
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400
 8000768:	40013000 	.word	0x40013000

0800076c <SPI_Transmit>:

void SPI_Transmit (char *data, int size)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]

	int i=0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
	while (i<size){
 800077a:	e012      	b.n	80007a2 <SPI_Transmit+0x36>
	   SPI1->DR = data[i];  // load the data into the Data Register
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <SPI_Transmit+0x4c>)
 8000786:	60da      	str	r2, [r3, #12]
	   while((SPI1->SR&0x3)!=0x3){}
 8000788:	bf00      	nop
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <SPI_Transmit+0x4c>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	2b03      	cmp	r3, #3
 8000794:	d1f9      	bne.n	800078a <SPI_Transmit+0x1e>
	   uint8_t temp = SPI1->DR;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <SPI_Transmit+0x4c>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	72fb      	strb	r3, [r7, #11]
	   i++;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
	while (i<size){
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbe8      	blt.n	800077c <SPI_Transmit+0x10>
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40013000 	.word	0x40013000

080007bc <SPI_Receive>:

void SPI_Receive (char *data, int size)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	int copy = size;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
	while (size){
 80007ca:	e020      	b.n	800080e <SPI_Receive+0x52>
		SPI1->DR = 0;  // send dummy data
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <SPI_Receive+0x6c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
		while((SPI1->SR&0x3)!=0x3){}
 80007d2:	bf00      	nop
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <SPI_Receive+0x6c>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f003 0303 	and.w	r3, r3, #3
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d1f9      	bne.n	80007d4 <SPI_Receive+0x18>
		*data = (uint8_t)(SPI1->DR);
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <SPI_Receive+0x6c>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	701a      	strb	r2, [r3, #0]
		data++;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
		size--;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	603b      	str	r3, [r7, #0]
		if(*(data-1)!= '\0'){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d006      	beq.n	800080e <SPI_Receive+0x52>
			print("char received = %c",(uint8_t)*(data-1));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <SPI_Receive+0x70>)
 800080a:	f000 f811 	bl	8000830 <print>
	while (size){
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1db      	bne.n	80007cc <SPI_Receive+0x10>
		}
	}
	data = data - copy;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	425b      	negs	r3, r3
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	607b      	str	r3, [r7, #4]
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40013000 	.word	0x40013000
 800082c:	08001f60 	.word	0x08001f60

08000830 <print>:
 8000830:	b40f      	push	{r0, r1, r2, r3}
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	6939      	ldr	r1, [r7, #16]
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <print+0x2c>)
 8000844:	f000 fa14 	bl	8000c70 <vsiprintf>
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <print+0x2c>)
 800084a:	f000 f83d 	bl	80008c8 <USART2_print>
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr
 800085c:	20000218 	.word	0x20000218

08000860 <USART2_init>:
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <USART2_init+0x60>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <USART2_init+0x60>)
 800086a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086e:	6153      	str	r3, [r2, #20]
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <USART2_init+0x60>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <USART2_init+0x60>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000886:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000896:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800089a:	6213      	str	r3, [r2, #32]
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <USART2_init+0x64>)
 800089e:	f240 3241 	movw	r2, #833	; 0x341
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <USART2_init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <USART2_init+0x64>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <USART2_init+0x64>)
 80008b0:	f043 0309 	orr.w	r3, r3, #9
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40004400 	.word	0x40004400

080008c8 <USART2_print>:
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	e00e      	b.n	80008f0 <USART2_print+0x28>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <USART2_print+0x40>)
 80008d8:	b292      	uxth	r2, r2
 80008da:	851a      	strh	r2, [r3, #40]	; 0x28
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3301      	adds	r3, #1
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	bf00      	nop
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <USART2_print+0x40>)
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <USART2_print+0x1c>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1ec      	bne.n	80008d2 <USART2_print+0xa>
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40004400 	.word	0x40004400

0800090c <Reset_Handler>:
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x2>)
 800090e:	4685      	mov	sp, r0
 8000910:	f3af 8000 	nop.w
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <LoopForever+0x6>)
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <LoopForever+0xa>)
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <LoopForever+0xe>)
 800091a:	2300      	movs	r3, #0
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:
 800091e:	58d4      	ldr	r4, [r2, r3]
 8000920:	50c4      	str	r4, [r0, r3]
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:
 8000924:	18c4      	adds	r4, r0, r3
 8000926:	428c      	cmp	r4, r1
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopForever+0x12>)
 800092c:	4c0a      	ldr	r4, [pc, #40]	; (8000958 <LoopForever+0x16>)
 800092e:	2300      	movs	r3, #0
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:
 8000936:	42a2      	cmp	r2, r4
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>
 800093a:	f000 f811 	bl	8000960 <__libc_init_array>
 800093e:	f7ff fe29 	bl	8000594 <main>

08000942 <LoopForever>:
 8000942:	e7fe      	b.n	8000942 <LoopForever>
 8000944:	20010000 	.word	0x20010000
 8000948:	20000000 	.word	0x20000000
 800094c:	2000006c 	.word	0x2000006c
 8000950:	080020c8 	.word	0x080020c8
 8000954:	2000006c 	.word	0x2000006c
 8000958:	200002b4 	.word	0x200002b4

0800095c <ADC1_2_IRQHandler>:
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <__libc_init_array>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	4d0d      	ldr	r5, [pc, #52]	; (8000998 <__libc_init_array+0x38>)
 8000964:	4c0d      	ldr	r4, [pc, #52]	; (800099c <__libc_init_array+0x3c>)
 8000966:	1b64      	subs	r4, r4, r5
 8000968:	10a4      	asrs	r4, r4, #2
 800096a:	2600      	movs	r6, #0
 800096c:	42a6      	cmp	r6, r4
 800096e:	d109      	bne.n	8000984 <__libc_init_array+0x24>
 8000970:	4d0b      	ldr	r5, [pc, #44]	; (80009a0 <__libc_init_array+0x40>)
 8000972:	4c0c      	ldr	r4, [pc, #48]	; (80009a4 <__libc_init_array+0x44>)
 8000974:	f001 fa88 	bl	8001e88 <_init>
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	2600      	movs	r6, #0
 800097e:	42a6      	cmp	r6, r4
 8000980:	d105      	bne.n	800098e <__libc_init_array+0x2e>
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f855 3b04 	ldr.w	r3, [r5], #4
 8000988:	4798      	blx	r3
 800098a:	3601      	adds	r6, #1
 800098c:	e7ee      	b.n	800096c <__libc_init_array+0xc>
 800098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000992:	4798      	blx	r3
 8000994:	3601      	adds	r6, #1
 8000996:	e7f2      	b.n	800097e <__libc_init_array+0x1e>
 8000998:	080020c0 	.word	0x080020c0
 800099c:	080020c0 	.word	0x080020c0
 80009a0:	080020c0 	.word	0x080020c0
 80009a4:	080020c4 	.word	0x080020c4

080009a8 <malloc>:
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <malloc+0xc>)
 80009aa:	4601      	mov	r1, r0
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	f000 b863 	b.w	8000a78 <_malloc_r>
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <free>:
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <free+0xc>)
 80009ba:	4601      	mov	r1, r0
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	f000 b80b 	b.w	80009d8 <_free_r>
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <memset>:
 80009c8:	4402      	add	r2, r0
 80009ca:	4603      	mov	r3, r0
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d100      	bne.n	80009d2 <memset+0xa>
 80009d0:	4770      	bx	lr
 80009d2:	f803 1b01 	strb.w	r1, [r3], #1
 80009d6:	e7f9      	b.n	80009cc <memset+0x4>

080009d8 <_free_r>:
 80009d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009da:	2900      	cmp	r1, #0
 80009dc:	d048      	beq.n	8000a70 <_free_r+0x98>
 80009de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009e2:	9001      	str	r0, [sp, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f1a1 0404 	sub.w	r4, r1, #4
 80009ea:	bfb8      	it	lt
 80009ec:	18e4      	addlt	r4, r4, r3
 80009ee:	f000 f979 	bl	8000ce4 <__malloc_lock>
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <_free_r+0x9c>)
 80009f4:	9801      	ldr	r0, [sp, #4]
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	4615      	mov	r5, r2
 80009fa:	b933      	cbnz	r3, 8000a0a <_free_r+0x32>
 80009fc:	6063      	str	r3, [r4, #4]
 80009fe:	6014      	str	r4, [r2, #0]
 8000a00:	b003      	add	sp, #12
 8000a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a06:	f000 b973 	b.w	8000cf0 <__malloc_unlock>
 8000a0a:	42a3      	cmp	r3, r4
 8000a0c:	d90b      	bls.n	8000a26 <_free_r+0x4e>
 8000a0e:	6821      	ldr	r1, [r4, #0]
 8000a10:	1862      	adds	r2, r4, r1
 8000a12:	4293      	cmp	r3, r2
 8000a14:	bf04      	itt	eq
 8000a16:	681a      	ldreq	r2, [r3, #0]
 8000a18:	685b      	ldreq	r3, [r3, #4]
 8000a1a:	6063      	str	r3, [r4, #4]
 8000a1c:	bf04      	itt	eq
 8000a1e:	1852      	addeq	r2, r2, r1
 8000a20:	6022      	streq	r2, [r4, #0]
 8000a22:	602c      	str	r4, [r5, #0]
 8000a24:	e7ec      	b.n	8000a00 <_free_r+0x28>
 8000a26:	461a      	mov	r2, r3
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	b10b      	cbz	r3, 8000a30 <_free_r+0x58>
 8000a2c:	42a3      	cmp	r3, r4
 8000a2e:	d9fa      	bls.n	8000a26 <_free_r+0x4e>
 8000a30:	6811      	ldr	r1, [r2, #0]
 8000a32:	1855      	adds	r5, r2, r1
 8000a34:	42a5      	cmp	r5, r4
 8000a36:	d10b      	bne.n	8000a50 <_free_r+0x78>
 8000a38:	6824      	ldr	r4, [r4, #0]
 8000a3a:	4421      	add	r1, r4
 8000a3c:	1854      	adds	r4, r2, r1
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	6011      	str	r1, [r2, #0]
 8000a42:	d1dd      	bne.n	8000a00 <_free_r+0x28>
 8000a44:	681c      	ldr	r4, [r3, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	6053      	str	r3, [r2, #4]
 8000a4a:	4421      	add	r1, r4
 8000a4c:	6011      	str	r1, [r2, #0]
 8000a4e:	e7d7      	b.n	8000a00 <_free_r+0x28>
 8000a50:	d902      	bls.n	8000a58 <_free_r+0x80>
 8000a52:	230c      	movs	r3, #12
 8000a54:	6003      	str	r3, [r0, #0]
 8000a56:	e7d3      	b.n	8000a00 <_free_r+0x28>
 8000a58:	6825      	ldr	r5, [r4, #0]
 8000a5a:	1961      	adds	r1, r4, r5
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	bf04      	itt	eq
 8000a60:	6819      	ldreq	r1, [r3, #0]
 8000a62:	685b      	ldreq	r3, [r3, #4]
 8000a64:	6063      	str	r3, [r4, #4]
 8000a66:	bf04      	itt	eq
 8000a68:	1949      	addeq	r1, r1, r5
 8000a6a:	6021      	streq	r1, [r4, #0]
 8000a6c:	6054      	str	r4, [r2, #4]
 8000a6e:	e7c7      	b.n	8000a00 <_free_r+0x28>
 8000a70:	b003      	add	sp, #12
 8000a72:	bd30      	pop	{r4, r5, pc}
 8000a74:	20000298 	.word	0x20000298

08000a78 <_malloc_r>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	1ccd      	adds	r5, r1, #3
 8000a7c:	f025 0503 	bic.w	r5, r5, #3
 8000a80:	3508      	adds	r5, #8
 8000a82:	2d0c      	cmp	r5, #12
 8000a84:	bf38      	it	cc
 8000a86:	250c      	movcc	r5, #12
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	4606      	mov	r6, r0
 8000a8c:	db01      	blt.n	8000a92 <_malloc_r+0x1a>
 8000a8e:	42a9      	cmp	r1, r5
 8000a90:	d903      	bls.n	8000a9a <_malloc_r+0x22>
 8000a92:	230c      	movs	r3, #12
 8000a94:	6033      	str	r3, [r6, #0]
 8000a96:	2000      	movs	r0, #0
 8000a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9a:	f000 f923 	bl	8000ce4 <__malloc_lock>
 8000a9e:	4921      	ldr	r1, [pc, #132]	; (8000b24 <_malloc_r+0xac>)
 8000aa0:	680a      	ldr	r2, [r1, #0]
 8000aa2:	4614      	mov	r4, r2
 8000aa4:	b99c      	cbnz	r4, 8000ace <_malloc_r+0x56>
 8000aa6:	4f20      	ldr	r7, [pc, #128]	; (8000b28 <_malloc_r+0xb0>)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b923      	cbnz	r3, 8000ab6 <_malloc_r+0x3e>
 8000aac:	4621      	mov	r1, r4
 8000aae:	4630      	mov	r0, r6
 8000ab0:	f000 f83c 	bl	8000b2c <_sbrk_r>
 8000ab4:	6038      	str	r0, [r7, #0]
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	4630      	mov	r0, r6
 8000aba:	f000 f837 	bl	8000b2c <_sbrk_r>
 8000abe:	1c43      	adds	r3, r0, #1
 8000ac0:	d123      	bne.n	8000b0a <_malloc_r+0x92>
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	6033      	str	r3, [r6, #0]
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f000 f912 	bl	8000cf0 <__malloc_unlock>
 8000acc:	e7e3      	b.n	8000a96 <_malloc_r+0x1e>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	1b5b      	subs	r3, r3, r5
 8000ad2:	d417      	bmi.n	8000b04 <_malloc_r+0x8c>
 8000ad4:	2b0b      	cmp	r3, #11
 8000ad6:	d903      	bls.n	8000ae0 <_malloc_r+0x68>
 8000ad8:	6023      	str	r3, [r4, #0]
 8000ada:	441c      	add	r4, r3
 8000adc:	6025      	str	r5, [r4, #0]
 8000ade:	e004      	b.n	8000aea <_malloc_r+0x72>
 8000ae0:	6863      	ldr	r3, [r4, #4]
 8000ae2:	42a2      	cmp	r2, r4
 8000ae4:	bf0c      	ite	eq
 8000ae6:	600b      	streq	r3, [r1, #0]
 8000ae8:	6053      	strne	r3, [r2, #4]
 8000aea:	4630      	mov	r0, r6
 8000aec:	f000 f900 	bl	8000cf0 <__malloc_unlock>
 8000af0:	f104 000b 	add.w	r0, r4, #11
 8000af4:	1d23      	adds	r3, r4, #4
 8000af6:	f020 0007 	bic.w	r0, r0, #7
 8000afa:	1ac2      	subs	r2, r0, r3
 8000afc:	d0cc      	beq.n	8000a98 <_malloc_r+0x20>
 8000afe:	1a1b      	subs	r3, r3, r0
 8000b00:	50a3      	str	r3, [r4, r2]
 8000b02:	e7c9      	b.n	8000a98 <_malloc_r+0x20>
 8000b04:	4622      	mov	r2, r4
 8000b06:	6864      	ldr	r4, [r4, #4]
 8000b08:	e7cc      	b.n	8000aa4 <_malloc_r+0x2c>
 8000b0a:	1cc4      	adds	r4, r0, #3
 8000b0c:	f024 0403 	bic.w	r4, r4, #3
 8000b10:	42a0      	cmp	r0, r4
 8000b12:	d0e3      	beq.n	8000adc <_malloc_r+0x64>
 8000b14:	1a21      	subs	r1, r4, r0
 8000b16:	4630      	mov	r0, r6
 8000b18:	f000 f808 	bl	8000b2c <_sbrk_r>
 8000b1c:	3001      	adds	r0, #1
 8000b1e:	d1dd      	bne.n	8000adc <_malloc_r+0x64>
 8000b20:	e7cf      	b.n	8000ac2 <_malloc_r+0x4a>
 8000b22:	bf00      	nop
 8000b24:	20000298 	.word	0x20000298
 8000b28:	2000029c 	.word	0x2000029c

08000b2c <_sbrk_r>:
 8000b2c:	b538      	push	{r3, r4, r5, lr}
 8000b2e:	4d06      	ldr	r5, [pc, #24]	; (8000b48 <_sbrk_r+0x1c>)
 8000b30:	2300      	movs	r3, #0
 8000b32:	4604      	mov	r4, r0
 8000b34:	4608      	mov	r0, r1
 8000b36:	602b      	str	r3, [r5, #0]
 8000b38:	f001 f98e 	bl	8001e58 <_sbrk>
 8000b3c:	1c43      	adds	r3, r0, #1
 8000b3e:	d102      	bne.n	8000b46 <_sbrk_r+0x1a>
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	b103      	cbz	r3, 8000b46 <_sbrk_r+0x1a>
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	200002a4 	.word	0x200002a4

08000b4c <siprintf>:
 8000b4c:	b40e      	push	{r1, r2, r3}
 8000b4e:	b500      	push	{lr}
 8000b50:	b09c      	sub	sp, #112	; 0x70
 8000b52:	ab1d      	add	r3, sp, #116	; 0x74
 8000b54:	9002      	str	r0, [sp, #8]
 8000b56:	9006      	str	r0, [sp, #24]
 8000b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <siprintf+0x38>)
 8000b5e:	9107      	str	r1, [sp, #28]
 8000b60:	9104      	str	r1, [sp, #16]
 8000b62:	4909      	ldr	r1, [pc, #36]	; (8000b88 <siprintf+0x3c>)
 8000b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b68:	9105      	str	r1, [sp, #20]
 8000b6a:	6800      	ldr	r0, [r0, #0]
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	a902      	add	r1, sp, #8
 8000b70:	f000 f920 	bl	8000db4 <_svfiprintf_r>
 8000b74:	9b02      	ldr	r3, [sp, #8]
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	b01c      	add	sp, #112	; 0x70
 8000b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b80:	b003      	add	sp, #12
 8000b82:	4770      	bx	lr
 8000b84:	20000008 	.word	0x20000008
 8000b88:	ffff0208 	.word	0xffff0208

08000b8c <strtok>:
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <strtok+0x5c>)
 8000b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b90:	681e      	ldr	r6, [r3, #0]
 8000b92:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8000b94:	4605      	mov	r5, r0
 8000b96:	b9fc      	cbnz	r4, 8000bd8 <strtok+0x4c>
 8000b98:	2050      	movs	r0, #80	; 0x50
 8000b9a:	9101      	str	r1, [sp, #4]
 8000b9c:	f7ff ff04 	bl	80009a8 <malloc>
 8000ba0:	9901      	ldr	r1, [sp, #4]
 8000ba2:	65b0      	str	r0, [r6, #88]	; 0x58
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	b920      	cbnz	r0, 8000bb2 <strtok+0x26>
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <strtok+0x60>)
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <strtok+0x64>)
 8000bac:	2157      	movs	r1, #87	; 0x57
 8000bae:	f000 f869 	bl	8000c84 <__assert_func>
 8000bb2:	e9c0 4400 	strd	r4, r4, [r0]
 8000bb6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000bba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000bbe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000bc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000bc6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000bca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000bce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000bd2:	6184      	str	r4, [r0, #24]
 8000bd4:	7704      	strb	r4, [r0, #28]
 8000bd6:	6244      	str	r4, [r0, #36]	; 0x24
 8000bd8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8000bda:	2301      	movs	r3, #1
 8000bdc:	4628      	mov	r0, r5
 8000bde:	b002      	add	sp, #8
 8000be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000be4:	f000 b806 	b.w	8000bf4 <__strtok_r>
 8000be8:	20000008 	.word	0x20000008
 8000bec:	08001f78 	.word	0x08001f78
 8000bf0:	08001f8f 	.word	0x08001f8f

08000bf4 <__strtok_r>:
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	b908      	cbnz	r0, 8000bfc <__strtok_r+0x8>
 8000bf8:	6810      	ldr	r0, [r2, #0]
 8000bfa:	b188      	cbz	r0, 8000c20 <__strtok_r+0x2c>
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000c04:	460f      	mov	r7, r1
 8000c06:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000c0a:	b91e      	cbnz	r6, 8000c14 <__strtok_r+0x20>
 8000c0c:	b965      	cbnz	r5, 8000c28 <__strtok_r+0x34>
 8000c0e:	6015      	str	r5, [r2, #0]
 8000c10:	4628      	mov	r0, r5
 8000c12:	e005      	b.n	8000c20 <__strtok_r+0x2c>
 8000c14:	42b5      	cmp	r5, r6
 8000c16:	d1f6      	bne.n	8000c06 <__strtok_r+0x12>
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f0      	bne.n	8000bfe <__strtok_r+0xa>
 8000c1c:	6014      	str	r4, [r2, #0]
 8000c1e:	7003      	strb	r3, [r0, #0]
 8000c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c22:	461c      	mov	r4, r3
 8000c24:	e00c      	b.n	8000c40 <__strtok_r+0x4c>
 8000c26:	b915      	cbnz	r5, 8000c2e <__strtok_r+0x3a>
 8000c28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000c2c:	460e      	mov	r6, r1
 8000c2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d1f7      	bne.n	8000c26 <__strtok_r+0x32>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f3      	beq.n	8000c22 <__strtok_r+0x2e>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000c40:	6014      	str	r4, [r2, #0]
 8000c42:	e7ed      	b.n	8000c20 <__strtok_r+0x2c>

08000c44 <_vsiprintf_r>:
 8000c44:	b500      	push	{lr}
 8000c46:	b09b      	sub	sp, #108	; 0x6c
 8000c48:	9100      	str	r1, [sp, #0]
 8000c4a:	9104      	str	r1, [sp, #16]
 8000c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c50:	9105      	str	r1, [sp, #20]
 8000c52:	9102      	str	r1, [sp, #8]
 8000c54:	4905      	ldr	r1, [pc, #20]	; (8000c6c <_vsiprintf_r+0x28>)
 8000c56:	9103      	str	r1, [sp, #12]
 8000c58:	4669      	mov	r1, sp
 8000c5a:	f000 f8ab 	bl	8000db4 <_svfiprintf_r>
 8000c5e:	9b00      	ldr	r3, [sp, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	b01b      	add	sp, #108	; 0x6c
 8000c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c6a:	bf00      	nop
 8000c6c:	ffff0208 	.word	0xffff0208

08000c70 <vsiprintf>:
 8000c70:	4613      	mov	r3, r2
 8000c72:	460a      	mov	r2, r1
 8000c74:	4601      	mov	r1, r0
 8000c76:	4802      	ldr	r0, [pc, #8]	; (8000c80 <vsiprintf+0x10>)
 8000c78:	6800      	ldr	r0, [r0, #0]
 8000c7a:	f7ff bfe3 	b.w	8000c44 <_vsiprintf_r>
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008

08000c84 <__assert_func>:
 8000c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c86:	4614      	mov	r4, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <__assert_func+0x2c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4605      	mov	r5, r0
 8000c90:	68d8      	ldr	r0, [r3, #12]
 8000c92:	b14c      	cbz	r4, 8000ca8 <__assert_func+0x24>
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__assert_func+0x30>)
 8000c96:	9100      	str	r1, [sp, #0]
 8000c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <__assert_func+0x34>)
 8000c9e:	462b      	mov	r3, r5
 8000ca0:	f000 f80e 	bl	8000cc0 <fiprintf>
 8000ca4:	f000 fd34 	bl	8001710 <abort>
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__assert_func+0x38>)
 8000caa:	461c      	mov	r4, r3
 8000cac:	e7f3      	b.n	8000c96 <__assert_func+0x12>
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	08001ff0 	.word	0x08001ff0
 8000cb8:	08001ffd 	.word	0x08001ffd
 8000cbc:	0800202b 	.word	0x0800202b

08000cc0 <fiprintf>:
 8000cc0:	b40e      	push	{r1, r2, r3}
 8000cc2:	b503      	push	{r0, r1, lr}
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	ab03      	add	r3, sp, #12
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <fiprintf+0x20>)
 8000cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cce:	6800      	ldr	r0, [r0, #0]
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	f000 f999 	bl	8001008 <_vfiprintf_r>
 8000cd6:	b002      	add	sp, #8
 8000cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cdc:	b003      	add	sp, #12
 8000cde:	4770      	bx	lr
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <__malloc_lock>:
 8000ce4:	4801      	ldr	r0, [pc, #4]	; (8000cec <__malloc_lock+0x8>)
 8000ce6:	f000 bed3 	b.w	8001a90 <__retarget_lock_acquire_recursive>
 8000cea:	bf00      	nop
 8000cec:	200002ac 	.word	0x200002ac

08000cf0 <__malloc_unlock>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	; (8000cf8 <__malloc_unlock+0x8>)
 8000cf2:	f000 bece 	b.w	8001a92 <__retarget_lock_release_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200002ac 	.word	0x200002ac

08000cfc <__ssputs_r>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	688e      	ldr	r6, [r1, #8]
 8000d02:	429e      	cmp	r6, r3
 8000d04:	4682      	mov	sl, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	461f      	mov	r7, r3
 8000d0c:	d838      	bhi.n	8000d80 <__ssputs_r+0x84>
 8000d0e:	898a      	ldrh	r2, [r1, #12]
 8000d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d14:	d032      	beq.n	8000d7c <__ssputs_r+0x80>
 8000d16:	6825      	ldr	r5, [r4, #0]
 8000d18:	6909      	ldr	r1, [r1, #16]
 8000d1a:	eba5 0901 	sub.w	r9, r5, r1
 8000d1e:	6965      	ldr	r5, [r4, #20]
 8000d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d28:	3301      	adds	r3, #1
 8000d2a:	444b      	add	r3, r9
 8000d2c:	106d      	asrs	r5, r5, #1
 8000d2e:	429d      	cmp	r5, r3
 8000d30:	bf38      	it	cc
 8000d32:	461d      	movcc	r5, r3
 8000d34:	0553      	lsls	r3, r2, #21
 8000d36:	d531      	bpl.n	8000d9c <__ssputs_r+0xa0>
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f7ff fe9d 	bl	8000a78 <_malloc_r>
 8000d3e:	4606      	mov	r6, r0
 8000d40:	b950      	cbnz	r0, 8000d58 <__ssputs_r+0x5c>
 8000d42:	230c      	movs	r3, #12
 8000d44:	f8ca 3000 	str.w	r3, [sl]
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4e:	81a3      	strh	r3, [r4, #12]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	6921      	ldr	r1, [r4, #16]
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	f000 fefe 	bl	8001b5c <memcpy>
 8000d60:	89a3      	ldrh	r3, [r4, #12]
 8000d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6a:	81a3      	strh	r3, [r4, #12]
 8000d6c:	6126      	str	r6, [r4, #16]
 8000d6e:	6165      	str	r5, [r4, #20]
 8000d70:	444e      	add	r6, r9
 8000d72:	eba5 0509 	sub.w	r5, r5, r9
 8000d76:	6026      	str	r6, [r4, #0]
 8000d78:	60a5      	str	r5, [r4, #8]
 8000d7a:	463e      	mov	r6, r7
 8000d7c:	42be      	cmp	r6, r7
 8000d7e:	d900      	bls.n	8000d82 <__ssputs_r+0x86>
 8000d80:	463e      	mov	r6, r7
 8000d82:	4632      	mov	r2, r6
 8000d84:	6820      	ldr	r0, [r4, #0]
 8000d86:	4641      	mov	r1, r8
 8000d88:	f000 fef6 	bl	8001b78 <memmove>
 8000d8c:	68a3      	ldr	r3, [r4, #8]
 8000d8e:	6822      	ldr	r2, [r4, #0]
 8000d90:	1b9b      	subs	r3, r3, r6
 8000d92:	4432      	add	r2, r6
 8000d94:	60a3      	str	r3, [r4, #8]
 8000d96:	6022      	str	r2, [r4, #0]
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e7db      	b.n	8000d54 <__ssputs_r+0x58>
 8000d9c:	462a      	mov	r2, r5
 8000d9e:	f000 ff05 	bl	8001bac <_realloc_r>
 8000da2:	4606      	mov	r6, r0
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d1e1      	bne.n	8000d6c <__ssputs_r+0x70>
 8000da8:	6921      	ldr	r1, [r4, #16]
 8000daa:	4650      	mov	r0, sl
 8000dac:	f7ff fe14 	bl	80009d8 <_free_r>
 8000db0:	e7c7      	b.n	8000d42 <__ssputs_r+0x46>
	...

08000db4 <_svfiprintf_r>:
 8000db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db8:	4698      	mov	r8, r3
 8000dba:	898b      	ldrh	r3, [r1, #12]
 8000dbc:	061b      	lsls	r3, r3, #24
 8000dbe:	b09d      	sub	sp, #116	; 0x74
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	d50e      	bpl.n	8000de6 <_svfiprintf_r+0x32>
 8000dc8:	690b      	ldr	r3, [r1, #16]
 8000dca:	b963      	cbnz	r3, 8000de6 <_svfiprintf_r+0x32>
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	f7ff fe53 	bl	8000a78 <_malloc_r>
 8000dd2:	6028      	str	r0, [r5, #0]
 8000dd4:	6128      	str	r0, [r5, #16]
 8000dd6:	b920      	cbnz	r0, 8000de2 <_svfiprintf_r+0x2e>
 8000dd8:	230c      	movs	r3, #12
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	e0d1      	b.n	8000f86 <_svfiprintf_r+0x1d2>
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	616b      	str	r3, [r5, #20]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9309      	str	r3, [sp, #36]	; 0x24
 8000dea:	2320      	movs	r3, #32
 8000dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000df4:	2330      	movs	r3, #48	; 0x30
 8000df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000fa0 <_svfiprintf_r+0x1ec>
 8000dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dfe:	f04f 0901 	mov.w	r9, #1
 8000e02:	4623      	mov	r3, r4
 8000e04:	469a      	mov	sl, r3
 8000e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e0a:	b10a      	cbz	r2, 8000e10 <_svfiprintf_r+0x5c>
 8000e0c:	2a25      	cmp	r2, #37	; 0x25
 8000e0e:	d1f9      	bne.n	8000e04 <_svfiprintf_r+0x50>
 8000e10:	ebba 0b04 	subs.w	fp, sl, r4
 8000e14:	d00b      	beq.n	8000e2e <_svfiprintf_r+0x7a>
 8000e16:	465b      	mov	r3, fp
 8000e18:	4622      	mov	r2, r4
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	f7ff ff6d 	bl	8000cfc <__ssputs_r>
 8000e22:	3001      	adds	r0, #1
 8000e24:	f000 80aa 	beq.w	8000f7c <_svfiprintf_r+0x1c8>
 8000e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e2a:	445a      	add	r2, fp
 8000e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8000e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 80a2 	beq.w	8000f7c <_svfiprintf_r+0x1c8>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e42:	f10a 0a01 	add.w	sl, sl, #1
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	9307      	str	r3, [sp, #28]
 8000e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8000e50:	4654      	mov	r4, sl
 8000e52:	2205      	movs	r2, #5
 8000e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e58:	4851      	ldr	r0, [pc, #324]	; (8000fa0 <_svfiprintf_r+0x1ec>)
 8000e5a:	f7ff f9c1 	bl	80001e0 <memchr>
 8000e5e:	9a04      	ldr	r2, [sp, #16]
 8000e60:	b9d8      	cbnz	r0, 8000e9a <_svfiprintf_r+0xe6>
 8000e62:	06d0      	lsls	r0, r2, #27
 8000e64:	bf44      	itt	mi
 8000e66:	2320      	movmi	r3, #32
 8000e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e6c:	0711      	lsls	r1, r2, #28
 8000e6e:	bf44      	itt	mi
 8000e70:	232b      	movmi	r3, #43	; 0x2b
 8000e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e76:	f89a 3000 	ldrb.w	r3, [sl]
 8000e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8000e7c:	d015      	beq.n	8000eaa <_svfiprintf_r+0xf6>
 8000e7e:	9a07      	ldr	r2, [sp, #28]
 8000e80:	4654      	mov	r4, sl
 8000e82:	2000      	movs	r0, #0
 8000e84:	f04f 0c0a 	mov.w	ip, #10
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e8e:	3b30      	subs	r3, #48	; 0x30
 8000e90:	2b09      	cmp	r3, #9
 8000e92:	d94e      	bls.n	8000f32 <_svfiprintf_r+0x17e>
 8000e94:	b1b0      	cbz	r0, 8000ec4 <_svfiprintf_r+0x110>
 8000e96:	9207      	str	r2, [sp, #28]
 8000e98:	e014      	b.n	8000ec4 <_svfiprintf_r+0x110>
 8000e9a:	eba0 0308 	sub.w	r3, r0, r8
 8000e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	9304      	str	r3, [sp, #16]
 8000ea6:	46a2      	mov	sl, r4
 8000ea8:	e7d2      	b.n	8000e50 <_svfiprintf_r+0x9c>
 8000eaa:	9b03      	ldr	r3, [sp, #12]
 8000eac:	1d19      	adds	r1, r3, #4
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	9103      	str	r1, [sp, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bfbb      	ittet	lt
 8000eb6:	425b      	neglt	r3, r3
 8000eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8000ebc:	9307      	strge	r3, [sp, #28]
 8000ebe:	9307      	strlt	r3, [sp, #28]
 8000ec0:	bfb8      	it	lt
 8000ec2:	9204      	strlt	r2, [sp, #16]
 8000ec4:	7823      	ldrb	r3, [r4, #0]
 8000ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8000ec8:	d10c      	bne.n	8000ee4 <_svfiprintf_r+0x130>
 8000eca:	7863      	ldrb	r3, [r4, #1]
 8000ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ece:	d135      	bne.n	8000f3c <_svfiprintf_r+0x188>
 8000ed0:	9b03      	ldr	r3, [sp, #12]
 8000ed2:	1d1a      	adds	r2, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	9203      	str	r2, [sp, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfb8      	it	lt
 8000edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ee0:	3402      	adds	r4, #2
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000fb0 <_svfiprintf_r+0x1fc>
 8000ee8:	7821      	ldrb	r1, [r4, #0]
 8000eea:	2203      	movs	r2, #3
 8000eec:	4650      	mov	r0, sl
 8000eee:	f7ff f977 	bl	80001e0 <memchr>
 8000ef2:	b140      	cbz	r0, 8000f06 <_svfiprintf_r+0x152>
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	eba0 000a 	sub.w	r0, r0, sl
 8000efa:	fa03 f000 	lsl.w	r0, r3, r0
 8000efe:	9b04      	ldr	r3, [sp, #16]
 8000f00:	4303      	orrs	r3, r0
 8000f02:	3401      	adds	r4, #1
 8000f04:	9304      	str	r3, [sp, #16]
 8000f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f0a:	4826      	ldr	r0, [pc, #152]	; (8000fa4 <_svfiprintf_r+0x1f0>)
 8000f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f10:	2206      	movs	r2, #6
 8000f12:	f7ff f965 	bl	80001e0 <memchr>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d038      	beq.n	8000f8c <_svfiprintf_r+0x1d8>
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <_svfiprintf_r+0x1f4>)
 8000f1c:	bb1b      	cbnz	r3, 8000f66 <_svfiprintf_r+0x1b2>
 8000f1e:	9b03      	ldr	r3, [sp, #12]
 8000f20:	3307      	adds	r3, #7
 8000f22:	f023 0307 	bic.w	r3, r3, #7
 8000f26:	3308      	adds	r3, #8
 8000f28:	9303      	str	r3, [sp, #12]
 8000f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f2c:	4433      	add	r3, r6
 8000f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f30:	e767      	b.n	8000e02 <_svfiprintf_r+0x4e>
 8000f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f36:	460c      	mov	r4, r1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e7a5      	b.n	8000e88 <_svfiprintf_r+0xd4>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	3401      	adds	r4, #1
 8000f40:	9305      	str	r3, [sp, #20]
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 0c0a 	mov.w	ip, #10
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f4e:	3a30      	subs	r2, #48	; 0x30
 8000f50:	2a09      	cmp	r2, #9
 8000f52:	d903      	bls.n	8000f5c <_svfiprintf_r+0x1a8>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0c5      	beq.n	8000ee4 <_svfiprintf_r+0x130>
 8000f58:	9105      	str	r1, [sp, #20]
 8000f5a:	e7c3      	b.n	8000ee4 <_svfiprintf_r+0x130>
 8000f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f60:	4604      	mov	r4, r0
 8000f62:	2301      	movs	r3, #1
 8000f64:	e7f0      	b.n	8000f48 <_svfiprintf_r+0x194>
 8000f66:	ab03      	add	r3, sp, #12
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	462a      	mov	r2, r5
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <_svfiprintf_r+0x1f8>)
 8000f6e:	a904      	add	r1, sp, #16
 8000f70:	4638      	mov	r0, r7
 8000f72:	f3af 8000 	nop.w
 8000f76:	1c42      	adds	r2, r0, #1
 8000f78:	4606      	mov	r6, r0
 8000f7a:	d1d6      	bne.n	8000f2a <_svfiprintf_r+0x176>
 8000f7c:	89ab      	ldrh	r3, [r5, #12]
 8000f7e:	065b      	lsls	r3, r3, #25
 8000f80:	f53f af2c 	bmi.w	8000ddc <_svfiprintf_r+0x28>
 8000f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f86:	b01d      	add	sp, #116	; 0x74
 8000f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f8c:	ab03      	add	r3, sp, #12
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	462a      	mov	r2, r5
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <_svfiprintf_r+0x1f8>)
 8000f94:	a904      	add	r1, sp, #16
 8000f96:	4638      	mov	r0, r7
 8000f98:	f000 f9d4 	bl	8001344 <_printf_i>
 8000f9c:	e7eb      	b.n	8000f76 <_svfiprintf_r+0x1c2>
 8000f9e:	bf00      	nop
 8000fa0:	0800202c 	.word	0x0800202c
 8000fa4:	08002036 	.word	0x08002036
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	08000cfd 	.word	0x08000cfd
 8000fb0:	08002032 	.word	0x08002032

08000fb4 <__sfputc_r>:
 8000fb4:	6893      	ldr	r3, [r2, #8]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	b410      	push	{r4}
 8000fbc:	6093      	str	r3, [r2, #8]
 8000fbe:	da08      	bge.n	8000fd2 <__sfputc_r+0x1e>
 8000fc0:	6994      	ldr	r4, [r2, #24]
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	db01      	blt.n	8000fca <__sfputc_r+0x16>
 8000fc6:	290a      	cmp	r1, #10
 8000fc8:	d103      	bne.n	8000fd2 <__sfputc_r+0x1e>
 8000fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fce:	f000 badf 	b.w	8001590 <__swbuf_r>
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	1c58      	adds	r0, r3, #1
 8000fd6:	6010      	str	r0, [r2, #0]
 8000fd8:	7019      	strb	r1, [r3, #0]
 8000fda:	4608      	mov	r0, r1
 8000fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <__sfputs_r>:
 8000fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	460f      	mov	r7, r1
 8000fe8:	4614      	mov	r4, r2
 8000fea:	18d5      	adds	r5, r2, r3
 8000fec:	42ac      	cmp	r4, r5
 8000fee:	d101      	bne.n	8000ff4 <__sfputs_r+0x12>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e007      	b.n	8001004 <__sfputs_r+0x22>
 8000ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ff8:	463a      	mov	r2, r7
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f7ff ffda 	bl	8000fb4 <__sfputc_r>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d1f3      	bne.n	8000fec <__sfputs_r+0xa>
 8001004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001008 <_vfiprintf_r>:
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800100c:	460d      	mov	r5, r1
 800100e:	b09d      	sub	sp, #116	; 0x74
 8001010:	4614      	mov	r4, r2
 8001012:	4698      	mov	r8, r3
 8001014:	4606      	mov	r6, r0
 8001016:	b118      	cbz	r0, 8001020 <_vfiprintf_r+0x18>
 8001018:	6983      	ldr	r3, [r0, #24]
 800101a:	b90b      	cbnz	r3, 8001020 <_vfiprintf_r+0x18>
 800101c:	f000 fc9a 	bl	8001954 <__sinit>
 8001020:	4b89      	ldr	r3, [pc, #548]	; (8001248 <_vfiprintf_r+0x240>)
 8001022:	429d      	cmp	r5, r3
 8001024:	d11b      	bne.n	800105e <_vfiprintf_r+0x56>
 8001026:	6875      	ldr	r5, [r6, #4]
 8001028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800102a:	07d9      	lsls	r1, r3, #31
 800102c:	d405      	bmi.n	800103a <_vfiprintf_r+0x32>
 800102e:	89ab      	ldrh	r3, [r5, #12]
 8001030:	059a      	lsls	r2, r3, #22
 8001032:	d402      	bmi.n	800103a <_vfiprintf_r+0x32>
 8001034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001036:	f000 fd2b 	bl	8001a90 <__retarget_lock_acquire_recursive>
 800103a:	89ab      	ldrh	r3, [r5, #12]
 800103c:	071b      	lsls	r3, r3, #28
 800103e:	d501      	bpl.n	8001044 <_vfiprintf_r+0x3c>
 8001040:	692b      	ldr	r3, [r5, #16]
 8001042:	b9eb      	cbnz	r3, 8001080 <_vfiprintf_r+0x78>
 8001044:	4629      	mov	r1, r5
 8001046:	4630      	mov	r0, r6
 8001048:	f000 faf4 	bl	8001634 <__swsetup_r>
 800104c:	b1c0      	cbz	r0, 8001080 <_vfiprintf_r+0x78>
 800104e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001050:	07dc      	lsls	r4, r3, #31
 8001052:	d50e      	bpl.n	8001072 <_vfiprintf_r+0x6a>
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	b01d      	add	sp, #116	; 0x74
 800105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <_vfiprintf_r+0x244>)
 8001060:	429d      	cmp	r5, r3
 8001062:	d101      	bne.n	8001068 <_vfiprintf_r+0x60>
 8001064:	68b5      	ldr	r5, [r6, #8]
 8001066:	e7df      	b.n	8001028 <_vfiprintf_r+0x20>
 8001068:	4b79      	ldr	r3, [pc, #484]	; (8001250 <_vfiprintf_r+0x248>)
 800106a:	429d      	cmp	r5, r3
 800106c:	bf08      	it	eq
 800106e:	68f5      	ldreq	r5, [r6, #12]
 8001070:	e7da      	b.n	8001028 <_vfiprintf_r+0x20>
 8001072:	89ab      	ldrh	r3, [r5, #12]
 8001074:	0598      	lsls	r0, r3, #22
 8001076:	d4ed      	bmi.n	8001054 <_vfiprintf_r+0x4c>
 8001078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800107a:	f000 fd0a 	bl	8001a92 <__retarget_lock_release_recursive>
 800107e:	e7e9      	b.n	8001054 <_vfiprintf_r+0x4c>
 8001080:	2300      	movs	r3, #0
 8001082:	9309      	str	r3, [sp, #36]	; 0x24
 8001084:	2320      	movs	r3, #32
 8001086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800108a:	f8cd 800c 	str.w	r8, [sp, #12]
 800108e:	2330      	movs	r3, #48	; 0x30
 8001090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001254 <_vfiprintf_r+0x24c>
 8001094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001098:	f04f 0901 	mov.w	r9, #1
 800109c:	4623      	mov	r3, r4
 800109e:	469a      	mov	sl, r3
 80010a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010a4:	b10a      	cbz	r2, 80010aa <_vfiprintf_r+0xa2>
 80010a6:	2a25      	cmp	r2, #37	; 0x25
 80010a8:	d1f9      	bne.n	800109e <_vfiprintf_r+0x96>
 80010aa:	ebba 0b04 	subs.w	fp, sl, r4
 80010ae:	d00b      	beq.n	80010c8 <_vfiprintf_r+0xc0>
 80010b0:	465b      	mov	r3, fp
 80010b2:	4622      	mov	r2, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	4630      	mov	r0, r6
 80010b8:	f7ff ff93 	bl	8000fe2 <__sfputs_r>
 80010bc:	3001      	adds	r0, #1
 80010be:	f000 80aa 	beq.w	8001216 <_vfiprintf_r+0x20e>
 80010c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010c4:	445a      	add	r2, fp
 80010c6:	9209      	str	r2, [sp, #36]	; 0x24
 80010c8:	f89a 3000 	ldrb.w	r3, [sl]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80a2 	beq.w	8001216 <_vfiprintf_r+0x20e>
 80010d2:	2300      	movs	r3, #0
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010dc:	f10a 0a01 	add.w	sl, sl, #1
 80010e0:	9304      	str	r3, [sp, #16]
 80010e2:	9307      	str	r3, [sp, #28]
 80010e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010e8:	931a      	str	r3, [sp, #104]	; 0x68
 80010ea:	4654      	mov	r4, sl
 80010ec:	2205      	movs	r2, #5
 80010ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010f2:	4858      	ldr	r0, [pc, #352]	; (8001254 <_vfiprintf_r+0x24c>)
 80010f4:	f7ff f874 	bl	80001e0 <memchr>
 80010f8:	9a04      	ldr	r2, [sp, #16]
 80010fa:	b9d8      	cbnz	r0, 8001134 <_vfiprintf_r+0x12c>
 80010fc:	06d1      	lsls	r1, r2, #27
 80010fe:	bf44      	itt	mi
 8001100:	2320      	movmi	r3, #32
 8001102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001106:	0713      	lsls	r3, r2, #28
 8001108:	bf44      	itt	mi
 800110a:	232b      	movmi	r3, #43	; 0x2b
 800110c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001110:	f89a 3000 	ldrb.w	r3, [sl]
 8001114:	2b2a      	cmp	r3, #42	; 0x2a
 8001116:	d015      	beq.n	8001144 <_vfiprintf_r+0x13c>
 8001118:	9a07      	ldr	r2, [sp, #28]
 800111a:	4654      	mov	r4, sl
 800111c:	2000      	movs	r0, #0
 800111e:	f04f 0c0a 	mov.w	ip, #10
 8001122:	4621      	mov	r1, r4
 8001124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001128:	3b30      	subs	r3, #48	; 0x30
 800112a:	2b09      	cmp	r3, #9
 800112c:	d94e      	bls.n	80011cc <_vfiprintf_r+0x1c4>
 800112e:	b1b0      	cbz	r0, 800115e <_vfiprintf_r+0x156>
 8001130:	9207      	str	r2, [sp, #28]
 8001132:	e014      	b.n	800115e <_vfiprintf_r+0x156>
 8001134:	eba0 0308 	sub.w	r3, r0, r8
 8001138:	fa09 f303 	lsl.w	r3, r9, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	9304      	str	r3, [sp, #16]
 8001140:	46a2      	mov	sl, r4
 8001142:	e7d2      	b.n	80010ea <_vfiprintf_r+0xe2>
 8001144:	9b03      	ldr	r3, [sp, #12]
 8001146:	1d19      	adds	r1, r3, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	9103      	str	r1, [sp, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfbb      	ittet	lt
 8001150:	425b      	neglt	r3, r3
 8001152:	f042 0202 	orrlt.w	r2, r2, #2
 8001156:	9307      	strge	r3, [sp, #28]
 8001158:	9307      	strlt	r3, [sp, #28]
 800115a:	bfb8      	it	lt
 800115c:	9204      	strlt	r2, [sp, #16]
 800115e:	7823      	ldrb	r3, [r4, #0]
 8001160:	2b2e      	cmp	r3, #46	; 0x2e
 8001162:	d10c      	bne.n	800117e <_vfiprintf_r+0x176>
 8001164:	7863      	ldrb	r3, [r4, #1]
 8001166:	2b2a      	cmp	r3, #42	; 0x2a
 8001168:	d135      	bne.n	80011d6 <_vfiprintf_r+0x1ce>
 800116a:	9b03      	ldr	r3, [sp, #12]
 800116c:	1d1a      	adds	r2, r3, #4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	9203      	str	r2, [sp, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	bfb8      	it	lt
 8001176:	f04f 33ff 	movlt.w	r3, #4294967295
 800117a:	3402      	adds	r4, #2
 800117c:	9305      	str	r3, [sp, #20]
 800117e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001264 <_vfiprintf_r+0x25c>
 8001182:	7821      	ldrb	r1, [r4, #0]
 8001184:	2203      	movs	r2, #3
 8001186:	4650      	mov	r0, sl
 8001188:	f7ff f82a 	bl	80001e0 <memchr>
 800118c:	b140      	cbz	r0, 80011a0 <_vfiprintf_r+0x198>
 800118e:	2340      	movs	r3, #64	; 0x40
 8001190:	eba0 000a 	sub.w	r0, r0, sl
 8001194:	fa03 f000 	lsl.w	r0, r3, r0
 8001198:	9b04      	ldr	r3, [sp, #16]
 800119a:	4303      	orrs	r3, r0
 800119c:	3401      	adds	r4, #1
 800119e:	9304      	str	r3, [sp, #16]
 80011a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <_vfiprintf_r+0x250>)
 80011a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011aa:	2206      	movs	r2, #6
 80011ac:	f7ff f818 	bl	80001e0 <memchr>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d03f      	beq.n	8001234 <_vfiprintf_r+0x22c>
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <_vfiprintf_r+0x254>)
 80011b6:	bb1b      	cbnz	r3, 8001200 <_vfiprintf_r+0x1f8>
 80011b8:	9b03      	ldr	r3, [sp, #12]
 80011ba:	3307      	adds	r3, #7
 80011bc:	f023 0307 	bic.w	r3, r3, #7
 80011c0:	3308      	adds	r3, #8
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c6:	443b      	add	r3, r7
 80011c8:	9309      	str	r3, [sp, #36]	; 0x24
 80011ca:	e767      	b.n	800109c <_vfiprintf_r+0x94>
 80011cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80011d0:	460c      	mov	r4, r1
 80011d2:	2001      	movs	r0, #1
 80011d4:	e7a5      	b.n	8001122 <_vfiprintf_r+0x11a>
 80011d6:	2300      	movs	r3, #0
 80011d8:	3401      	adds	r4, #1
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0c0a 	mov.w	ip, #10
 80011e2:	4620      	mov	r0, r4
 80011e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011e8:	3a30      	subs	r2, #48	; 0x30
 80011ea:	2a09      	cmp	r2, #9
 80011ec:	d903      	bls.n	80011f6 <_vfiprintf_r+0x1ee>
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0c5      	beq.n	800117e <_vfiprintf_r+0x176>
 80011f2:	9105      	str	r1, [sp, #20]
 80011f4:	e7c3      	b.n	800117e <_vfiprintf_r+0x176>
 80011f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80011fa:	4604      	mov	r4, r0
 80011fc:	2301      	movs	r3, #1
 80011fe:	e7f0      	b.n	80011e2 <_vfiprintf_r+0x1da>
 8001200:	ab03      	add	r3, sp, #12
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	462a      	mov	r2, r5
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <_vfiprintf_r+0x258>)
 8001208:	a904      	add	r1, sp, #16
 800120a:	4630      	mov	r0, r6
 800120c:	f3af 8000 	nop.w
 8001210:	4607      	mov	r7, r0
 8001212:	1c78      	adds	r0, r7, #1
 8001214:	d1d6      	bne.n	80011c4 <_vfiprintf_r+0x1bc>
 8001216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001218:	07d9      	lsls	r1, r3, #31
 800121a:	d405      	bmi.n	8001228 <_vfiprintf_r+0x220>
 800121c:	89ab      	ldrh	r3, [r5, #12]
 800121e:	059a      	lsls	r2, r3, #22
 8001220:	d402      	bmi.n	8001228 <_vfiprintf_r+0x220>
 8001222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001224:	f000 fc35 	bl	8001a92 <__retarget_lock_release_recursive>
 8001228:	89ab      	ldrh	r3, [r5, #12]
 800122a:	065b      	lsls	r3, r3, #25
 800122c:	f53f af12 	bmi.w	8001054 <_vfiprintf_r+0x4c>
 8001230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001232:	e711      	b.n	8001058 <_vfiprintf_r+0x50>
 8001234:	ab03      	add	r3, sp, #12
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	462a      	mov	r2, r5
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <_vfiprintf_r+0x258>)
 800123c:	a904      	add	r1, sp, #16
 800123e:	4630      	mov	r0, r6
 8001240:	f000 f880 	bl	8001344 <_printf_i>
 8001244:	e7e4      	b.n	8001210 <_vfiprintf_r+0x208>
 8001246:	bf00      	nop
 8001248:	08002080 	.word	0x08002080
 800124c:	080020a0 	.word	0x080020a0
 8001250:	08002060 	.word	0x08002060
 8001254:	0800202c 	.word	0x0800202c
 8001258:	08002036 	.word	0x08002036
 800125c:	00000000 	.word	0x00000000
 8001260:	08000fe3 	.word	0x08000fe3
 8001264:	08002032 	.word	0x08002032

08001268 <_printf_common>:
 8001268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800126c:	4616      	mov	r6, r2
 800126e:	4699      	mov	r9, r3
 8001270:	688a      	ldr	r2, [r1, #8]
 8001272:	690b      	ldr	r3, [r1, #16]
 8001274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001278:	4293      	cmp	r3, r2
 800127a:	bfb8      	it	lt
 800127c:	4613      	movlt	r3, r2
 800127e:	6033      	str	r3, [r6, #0]
 8001280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001284:	4607      	mov	r7, r0
 8001286:	460c      	mov	r4, r1
 8001288:	b10a      	cbz	r2, 800128e <_printf_common+0x26>
 800128a:	3301      	adds	r3, #1
 800128c:	6033      	str	r3, [r6, #0]
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	0699      	lsls	r1, r3, #26
 8001292:	bf42      	ittt	mi
 8001294:	6833      	ldrmi	r3, [r6, #0]
 8001296:	3302      	addmi	r3, #2
 8001298:	6033      	strmi	r3, [r6, #0]
 800129a:	6825      	ldr	r5, [r4, #0]
 800129c:	f015 0506 	ands.w	r5, r5, #6
 80012a0:	d106      	bne.n	80012b0 <_printf_common+0x48>
 80012a2:	f104 0a19 	add.w	sl, r4, #25
 80012a6:	68e3      	ldr	r3, [r4, #12]
 80012a8:	6832      	ldr	r2, [r6, #0]
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	42ab      	cmp	r3, r5
 80012ae:	dc26      	bgt.n	80012fe <_printf_common+0x96>
 80012b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012b4:	1e13      	subs	r3, r2, #0
 80012b6:	6822      	ldr	r2, [r4, #0]
 80012b8:	bf18      	it	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	0692      	lsls	r2, r2, #26
 80012be:	d42b      	bmi.n	8001318 <_printf_common+0xb0>
 80012c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012c4:	4649      	mov	r1, r9
 80012c6:	4638      	mov	r0, r7
 80012c8:	47c0      	blx	r8
 80012ca:	3001      	adds	r0, #1
 80012cc:	d01e      	beq.n	800130c <_printf_common+0xa4>
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	68e5      	ldr	r5, [r4, #12]
 80012d2:	6832      	ldr	r2, [r6, #0]
 80012d4:	f003 0306 	and.w	r3, r3, #6
 80012d8:	2b04      	cmp	r3, #4
 80012da:	bf08      	it	eq
 80012dc:	1aad      	subeq	r5, r5, r2
 80012de:	68a3      	ldr	r3, [r4, #8]
 80012e0:	6922      	ldr	r2, [r4, #16]
 80012e2:	bf0c      	ite	eq
 80012e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012e8:	2500      	movne	r5, #0
 80012ea:	4293      	cmp	r3, r2
 80012ec:	bfc4      	itt	gt
 80012ee:	1a9b      	subgt	r3, r3, r2
 80012f0:	18ed      	addgt	r5, r5, r3
 80012f2:	2600      	movs	r6, #0
 80012f4:	341a      	adds	r4, #26
 80012f6:	42b5      	cmp	r5, r6
 80012f8:	d11a      	bne.n	8001330 <_printf_common+0xc8>
 80012fa:	2000      	movs	r0, #0
 80012fc:	e008      	b.n	8001310 <_printf_common+0xa8>
 80012fe:	2301      	movs	r3, #1
 8001300:	4652      	mov	r2, sl
 8001302:	4649      	mov	r1, r9
 8001304:	4638      	mov	r0, r7
 8001306:	47c0      	blx	r8
 8001308:	3001      	adds	r0, #1
 800130a:	d103      	bne.n	8001314 <_printf_common+0xac>
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001314:	3501      	adds	r5, #1
 8001316:	e7c6      	b.n	80012a6 <_printf_common+0x3e>
 8001318:	18e1      	adds	r1, r4, r3
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	2030      	movs	r0, #48	; 0x30
 800131e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001322:	4422      	add	r2, r4
 8001324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800132c:	3302      	adds	r3, #2
 800132e:	e7c7      	b.n	80012c0 <_printf_common+0x58>
 8001330:	2301      	movs	r3, #1
 8001332:	4622      	mov	r2, r4
 8001334:	4649      	mov	r1, r9
 8001336:	4638      	mov	r0, r7
 8001338:	47c0      	blx	r8
 800133a:	3001      	adds	r0, #1
 800133c:	d0e6      	beq.n	800130c <_printf_common+0xa4>
 800133e:	3601      	adds	r6, #1
 8001340:	e7d9      	b.n	80012f6 <_printf_common+0x8e>
	...

08001344 <_printf_i>:
 8001344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001348:	460c      	mov	r4, r1
 800134a:	4691      	mov	r9, r2
 800134c:	7e27      	ldrb	r7, [r4, #24]
 800134e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001350:	2f78      	cmp	r7, #120	; 0x78
 8001352:	4680      	mov	r8, r0
 8001354:	469a      	mov	sl, r3
 8001356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800135a:	d807      	bhi.n	800136c <_printf_i+0x28>
 800135c:	2f62      	cmp	r7, #98	; 0x62
 800135e:	d80a      	bhi.n	8001376 <_printf_i+0x32>
 8001360:	2f00      	cmp	r7, #0
 8001362:	f000 80d8 	beq.w	8001516 <_printf_i+0x1d2>
 8001366:	2f58      	cmp	r7, #88	; 0x58
 8001368:	f000 80a3 	beq.w	80014b2 <_printf_i+0x16e>
 800136c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001374:	e03a      	b.n	80013ec <_printf_i+0xa8>
 8001376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800137a:	2b15      	cmp	r3, #21
 800137c:	d8f6      	bhi.n	800136c <_printf_i+0x28>
 800137e:	a001      	add	r0, pc, #4	; (adr r0, 8001384 <_printf_i+0x40>)
 8001380:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001384:	080013dd 	.word	0x080013dd
 8001388:	080013f1 	.word	0x080013f1
 800138c:	0800136d 	.word	0x0800136d
 8001390:	0800136d 	.word	0x0800136d
 8001394:	0800136d 	.word	0x0800136d
 8001398:	0800136d 	.word	0x0800136d
 800139c:	080013f1 	.word	0x080013f1
 80013a0:	0800136d 	.word	0x0800136d
 80013a4:	0800136d 	.word	0x0800136d
 80013a8:	0800136d 	.word	0x0800136d
 80013ac:	0800136d 	.word	0x0800136d
 80013b0:	080014fd 	.word	0x080014fd
 80013b4:	08001421 	.word	0x08001421
 80013b8:	080014df 	.word	0x080014df
 80013bc:	0800136d 	.word	0x0800136d
 80013c0:	0800136d 	.word	0x0800136d
 80013c4:	0800151f 	.word	0x0800151f
 80013c8:	0800136d 	.word	0x0800136d
 80013cc:	08001421 	.word	0x08001421
 80013d0:	0800136d 	.word	0x0800136d
 80013d4:	0800136d 	.word	0x0800136d
 80013d8:	080014e7 	.word	0x080014e7
 80013dc:	680b      	ldr	r3, [r1, #0]
 80013de:	1d1a      	adds	r2, r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	600a      	str	r2, [r1, #0]
 80013e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0a3      	b.n	8001538 <_printf_i+0x1f4>
 80013f0:	6825      	ldr	r5, [r4, #0]
 80013f2:	6808      	ldr	r0, [r1, #0]
 80013f4:	062e      	lsls	r6, r5, #24
 80013f6:	f100 0304 	add.w	r3, r0, #4
 80013fa:	d50a      	bpl.n	8001412 <_printf_i+0xce>
 80013fc:	6805      	ldr	r5, [r0, #0]
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	2d00      	cmp	r5, #0
 8001402:	da03      	bge.n	800140c <_printf_i+0xc8>
 8001404:	232d      	movs	r3, #45	; 0x2d
 8001406:	426d      	negs	r5, r5
 8001408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800140c:	485e      	ldr	r0, [pc, #376]	; (8001588 <_printf_i+0x244>)
 800140e:	230a      	movs	r3, #10
 8001410:	e019      	b.n	8001446 <_printf_i+0x102>
 8001412:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001416:	6805      	ldr	r5, [r0, #0]
 8001418:	600b      	str	r3, [r1, #0]
 800141a:	bf18      	it	ne
 800141c:	b22d      	sxthne	r5, r5
 800141e:	e7ef      	b.n	8001400 <_printf_i+0xbc>
 8001420:	680b      	ldr	r3, [r1, #0]
 8001422:	6825      	ldr	r5, [r4, #0]
 8001424:	1d18      	adds	r0, r3, #4
 8001426:	6008      	str	r0, [r1, #0]
 8001428:	0628      	lsls	r0, r5, #24
 800142a:	d501      	bpl.n	8001430 <_printf_i+0xec>
 800142c:	681d      	ldr	r5, [r3, #0]
 800142e:	e002      	b.n	8001436 <_printf_i+0xf2>
 8001430:	0669      	lsls	r1, r5, #25
 8001432:	d5fb      	bpl.n	800142c <_printf_i+0xe8>
 8001434:	881d      	ldrh	r5, [r3, #0]
 8001436:	4854      	ldr	r0, [pc, #336]	; (8001588 <_printf_i+0x244>)
 8001438:	2f6f      	cmp	r7, #111	; 0x6f
 800143a:	bf0c      	ite	eq
 800143c:	2308      	moveq	r3, #8
 800143e:	230a      	movne	r3, #10
 8001440:	2100      	movs	r1, #0
 8001442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001446:	6866      	ldr	r6, [r4, #4]
 8001448:	60a6      	str	r6, [r4, #8]
 800144a:	2e00      	cmp	r6, #0
 800144c:	bfa2      	ittt	ge
 800144e:	6821      	ldrge	r1, [r4, #0]
 8001450:	f021 0104 	bicge.w	r1, r1, #4
 8001454:	6021      	strge	r1, [r4, #0]
 8001456:	b90d      	cbnz	r5, 800145c <_printf_i+0x118>
 8001458:	2e00      	cmp	r6, #0
 800145a:	d04d      	beq.n	80014f8 <_printf_i+0x1b4>
 800145c:	4616      	mov	r6, r2
 800145e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001462:	fb03 5711 	mls	r7, r3, r1, r5
 8001466:	5dc7      	ldrb	r7, [r0, r7]
 8001468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800146c:	462f      	mov	r7, r5
 800146e:	42bb      	cmp	r3, r7
 8001470:	460d      	mov	r5, r1
 8001472:	d9f4      	bls.n	800145e <_printf_i+0x11a>
 8001474:	2b08      	cmp	r3, #8
 8001476:	d10b      	bne.n	8001490 <_printf_i+0x14c>
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	07df      	lsls	r7, r3, #31
 800147c:	d508      	bpl.n	8001490 <_printf_i+0x14c>
 800147e:	6923      	ldr	r3, [r4, #16]
 8001480:	6861      	ldr	r1, [r4, #4]
 8001482:	4299      	cmp	r1, r3
 8001484:	bfde      	ittt	le
 8001486:	2330      	movle	r3, #48	; 0x30
 8001488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800148c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001490:	1b92      	subs	r2, r2, r6
 8001492:	6122      	str	r2, [r4, #16]
 8001494:	f8cd a000 	str.w	sl, [sp]
 8001498:	464b      	mov	r3, r9
 800149a:	aa03      	add	r2, sp, #12
 800149c:	4621      	mov	r1, r4
 800149e:	4640      	mov	r0, r8
 80014a0:	f7ff fee2 	bl	8001268 <_printf_common>
 80014a4:	3001      	adds	r0, #1
 80014a6:	d14c      	bne.n	8001542 <_printf_i+0x1fe>
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	b004      	add	sp, #16
 80014ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <_printf_i+0x244>)
 80014b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	680e      	ldr	r6, [r1, #0]
 80014bc:	061f      	lsls	r7, r3, #24
 80014be:	f856 5b04 	ldr.w	r5, [r6], #4
 80014c2:	600e      	str	r6, [r1, #0]
 80014c4:	d514      	bpl.n	80014f0 <_printf_i+0x1ac>
 80014c6:	07d9      	lsls	r1, r3, #31
 80014c8:	bf44      	itt	mi
 80014ca:	f043 0320 	orrmi.w	r3, r3, #32
 80014ce:	6023      	strmi	r3, [r4, #0]
 80014d0:	b91d      	cbnz	r5, 80014da <_printf_i+0x196>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	f023 0320 	bic.w	r3, r3, #32
 80014d8:	6023      	str	r3, [r4, #0]
 80014da:	2310      	movs	r3, #16
 80014dc:	e7b0      	b.n	8001440 <_printf_i+0xfc>
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	2378      	movs	r3, #120	; 0x78
 80014e8:	4828      	ldr	r0, [pc, #160]	; (800158c <_printf_i+0x248>)
 80014ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014ee:	e7e3      	b.n	80014b8 <_printf_i+0x174>
 80014f0:	065e      	lsls	r6, r3, #25
 80014f2:	bf48      	it	mi
 80014f4:	b2ad      	uxthmi	r5, r5
 80014f6:	e7e6      	b.n	80014c6 <_printf_i+0x182>
 80014f8:	4616      	mov	r6, r2
 80014fa:	e7bb      	b.n	8001474 <_printf_i+0x130>
 80014fc:	680b      	ldr	r3, [r1, #0]
 80014fe:	6826      	ldr	r6, [r4, #0]
 8001500:	6960      	ldr	r0, [r4, #20]
 8001502:	1d1d      	adds	r5, r3, #4
 8001504:	600d      	str	r5, [r1, #0]
 8001506:	0635      	lsls	r5, r6, #24
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	d501      	bpl.n	8001510 <_printf_i+0x1cc>
 800150c:	6018      	str	r0, [r3, #0]
 800150e:	e002      	b.n	8001516 <_printf_i+0x1d2>
 8001510:	0671      	lsls	r1, r6, #25
 8001512:	d5fb      	bpl.n	800150c <_printf_i+0x1c8>
 8001514:	8018      	strh	r0, [r3, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	6123      	str	r3, [r4, #16]
 800151a:	4616      	mov	r6, r2
 800151c:	e7ba      	b.n	8001494 <_printf_i+0x150>
 800151e:	680b      	ldr	r3, [r1, #0]
 8001520:	1d1a      	adds	r2, r3, #4
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	681e      	ldr	r6, [r3, #0]
 8001526:	6862      	ldr	r2, [r4, #4]
 8001528:	2100      	movs	r1, #0
 800152a:	4630      	mov	r0, r6
 800152c:	f7fe fe58 	bl	80001e0 <memchr>
 8001530:	b108      	cbz	r0, 8001536 <_printf_i+0x1f2>
 8001532:	1b80      	subs	r0, r0, r6
 8001534:	6060      	str	r0, [r4, #4]
 8001536:	6863      	ldr	r3, [r4, #4]
 8001538:	6123      	str	r3, [r4, #16]
 800153a:	2300      	movs	r3, #0
 800153c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001540:	e7a8      	b.n	8001494 <_printf_i+0x150>
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	4632      	mov	r2, r6
 8001546:	4649      	mov	r1, r9
 8001548:	4640      	mov	r0, r8
 800154a:	47d0      	blx	sl
 800154c:	3001      	adds	r0, #1
 800154e:	d0ab      	beq.n	80014a8 <_printf_i+0x164>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	079b      	lsls	r3, r3, #30
 8001554:	d413      	bmi.n	800157e <_printf_i+0x23a>
 8001556:	68e0      	ldr	r0, [r4, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	4298      	cmp	r0, r3
 800155c:	bfb8      	it	lt
 800155e:	4618      	movlt	r0, r3
 8001560:	e7a4      	b.n	80014ac <_printf_i+0x168>
 8001562:	2301      	movs	r3, #1
 8001564:	4632      	mov	r2, r6
 8001566:	4649      	mov	r1, r9
 8001568:	4640      	mov	r0, r8
 800156a:	47d0      	blx	sl
 800156c:	3001      	adds	r0, #1
 800156e:	d09b      	beq.n	80014a8 <_printf_i+0x164>
 8001570:	3501      	adds	r5, #1
 8001572:	68e3      	ldr	r3, [r4, #12]
 8001574:	9903      	ldr	r1, [sp, #12]
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	42ab      	cmp	r3, r5
 800157a:	dcf2      	bgt.n	8001562 <_printf_i+0x21e>
 800157c:	e7eb      	b.n	8001556 <_printf_i+0x212>
 800157e:	2500      	movs	r5, #0
 8001580:	f104 0619 	add.w	r6, r4, #25
 8001584:	e7f5      	b.n	8001572 <_printf_i+0x22e>
 8001586:	bf00      	nop
 8001588:	0800203d 	.word	0x0800203d
 800158c:	0800204e 	.word	0x0800204e

08001590 <__swbuf_r>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	460e      	mov	r6, r1
 8001594:	4614      	mov	r4, r2
 8001596:	4605      	mov	r5, r0
 8001598:	b118      	cbz	r0, 80015a2 <__swbuf_r+0x12>
 800159a:	6983      	ldr	r3, [r0, #24]
 800159c:	b90b      	cbnz	r3, 80015a2 <__swbuf_r+0x12>
 800159e:	f000 f9d9 	bl	8001954 <__sinit>
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <__swbuf_r+0x98>)
 80015a4:	429c      	cmp	r4, r3
 80015a6:	d12b      	bne.n	8001600 <__swbuf_r+0x70>
 80015a8:	686c      	ldr	r4, [r5, #4]
 80015aa:	69a3      	ldr	r3, [r4, #24]
 80015ac:	60a3      	str	r3, [r4, #8]
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	071a      	lsls	r2, r3, #28
 80015b2:	d52f      	bpl.n	8001614 <__swbuf_r+0x84>
 80015b4:	6923      	ldr	r3, [r4, #16]
 80015b6:	b36b      	cbz	r3, 8001614 <__swbuf_r+0x84>
 80015b8:	6923      	ldr	r3, [r4, #16]
 80015ba:	6820      	ldr	r0, [r4, #0]
 80015bc:	1ac0      	subs	r0, r0, r3
 80015be:	6963      	ldr	r3, [r4, #20]
 80015c0:	b2f6      	uxtb	r6, r6
 80015c2:	4283      	cmp	r3, r0
 80015c4:	4637      	mov	r7, r6
 80015c6:	dc04      	bgt.n	80015d2 <__swbuf_r+0x42>
 80015c8:	4621      	mov	r1, r4
 80015ca:	4628      	mov	r0, r5
 80015cc:	f000 f92e 	bl	800182c <_fflush_r>
 80015d0:	bb30      	cbnz	r0, 8001620 <__swbuf_r+0x90>
 80015d2:	68a3      	ldr	r3, [r4, #8]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60a3      	str	r3, [r4, #8]
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	6022      	str	r2, [r4, #0]
 80015de:	701e      	strb	r6, [r3, #0]
 80015e0:	6963      	ldr	r3, [r4, #20]
 80015e2:	3001      	adds	r0, #1
 80015e4:	4283      	cmp	r3, r0
 80015e6:	d004      	beq.n	80015f2 <__swbuf_r+0x62>
 80015e8:	89a3      	ldrh	r3, [r4, #12]
 80015ea:	07db      	lsls	r3, r3, #31
 80015ec:	d506      	bpl.n	80015fc <__swbuf_r+0x6c>
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	d104      	bne.n	80015fc <__swbuf_r+0x6c>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4628      	mov	r0, r5
 80015f6:	f000 f919 	bl	800182c <_fflush_r>
 80015fa:	b988      	cbnz	r0, 8001620 <__swbuf_r+0x90>
 80015fc:	4638      	mov	r0, r7
 80015fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <__swbuf_r+0x9c>)
 8001602:	429c      	cmp	r4, r3
 8001604:	d101      	bne.n	800160a <__swbuf_r+0x7a>
 8001606:	68ac      	ldr	r4, [r5, #8]
 8001608:	e7cf      	b.n	80015aa <__swbuf_r+0x1a>
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <__swbuf_r+0xa0>)
 800160c:	429c      	cmp	r4, r3
 800160e:	bf08      	it	eq
 8001610:	68ec      	ldreq	r4, [r5, #12]
 8001612:	e7ca      	b.n	80015aa <__swbuf_r+0x1a>
 8001614:	4621      	mov	r1, r4
 8001616:	4628      	mov	r0, r5
 8001618:	f000 f80c 	bl	8001634 <__swsetup_r>
 800161c:	2800      	cmp	r0, #0
 800161e:	d0cb      	beq.n	80015b8 <__swbuf_r+0x28>
 8001620:	f04f 37ff 	mov.w	r7, #4294967295
 8001624:	e7ea      	b.n	80015fc <__swbuf_r+0x6c>
 8001626:	bf00      	nop
 8001628:	08002080 	.word	0x08002080
 800162c:	080020a0 	.word	0x080020a0
 8001630:	08002060 	.word	0x08002060

08001634 <__swsetup_r>:
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <__swsetup_r+0xcc>)
 8001636:	b570      	push	{r4, r5, r6, lr}
 8001638:	681d      	ldr	r5, [r3, #0]
 800163a:	4606      	mov	r6, r0
 800163c:	460c      	mov	r4, r1
 800163e:	b125      	cbz	r5, 800164a <__swsetup_r+0x16>
 8001640:	69ab      	ldr	r3, [r5, #24]
 8001642:	b913      	cbnz	r3, 800164a <__swsetup_r+0x16>
 8001644:	4628      	mov	r0, r5
 8001646:	f000 f985 	bl	8001954 <__sinit>
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <__swsetup_r+0xd0>)
 800164c:	429c      	cmp	r4, r3
 800164e:	d10f      	bne.n	8001670 <__swsetup_r+0x3c>
 8001650:	686c      	ldr	r4, [r5, #4]
 8001652:	89a3      	ldrh	r3, [r4, #12]
 8001654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001658:	0719      	lsls	r1, r3, #28
 800165a:	d42c      	bmi.n	80016b6 <__swsetup_r+0x82>
 800165c:	06dd      	lsls	r5, r3, #27
 800165e:	d411      	bmi.n	8001684 <__swsetup_r+0x50>
 8001660:	2309      	movs	r3, #9
 8001662:	6033      	str	r3, [r6, #0]
 8001664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	f04f 30ff 	mov.w	r0, #4294967295
 800166e:	e03e      	b.n	80016ee <__swsetup_r+0xba>
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <__swsetup_r+0xd4>)
 8001672:	429c      	cmp	r4, r3
 8001674:	d101      	bne.n	800167a <__swsetup_r+0x46>
 8001676:	68ac      	ldr	r4, [r5, #8]
 8001678:	e7eb      	b.n	8001652 <__swsetup_r+0x1e>
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <__swsetup_r+0xd8>)
 800167c:	429c      	cmp	r4, r3
 800167e:	bf08      	it	eq
 8001680:	68ec      	ldreq	r4, [r5, #12]
 8001682:	e7e6      	b.n	8001652 <__swsetup_r+0x1e>
 8001684:	0758      	lsls	r0, r3, #29
 8001686:	d512      	bpl.n	80016ae <__swsetup_r+0x7a>
 8001688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800168a:	b141      	cbz	r1, 800169e <__swsetup_r+0x6a>
 800168c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001690:	4299      	cmp	r1, r3
 8001692:	d002      	beq.n	800169a <__swsetup_r+0x66>
 8001694:	4630      	mov	r0, r6
 8001696:	f7ff f99f 	bl	80009d8 <_free_r>
 800169a:	2300      	movs	r3, #0
 800169c:	6363      	str	r3, [r4, #52]	; 0x34
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016a4:	81a3      	strh	r3, [r4, #12]
 80016a6:	2300      	movs	r3, #0
 80016a8:	6063      	str	r3, [r4, #4]
 80016aa:	6923      	ldr	r3, [r4, #16]
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	89a3      	ldrh	r3, [r4, #12]
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	81a3      	strh	r3, [r4, #12]
 80016b6:	6923      	ldr	r3, [r4, #16]
 80016b8:	b94b      	cbnz	r3, 80016ce <__swsetup_r+0x9a>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c4:	d003      	beq.n	80016ce <__swsetup_r+0x9a>
 80016c6:	4621      	mov	r1, r4
 80016c8:	4630      	mov	r0, r6
 80016ca:	f000 fa07 	bl	8001adc <__smakebuf_r>
 80016ce:	89a0      	ldrh	r0, [r4, #12]
 80016d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016d4:	f010 0301 	ands.w	r3, r0, #1
 80016d8:	d00a      	beq.n	80016f0 <__swsetup_r+0xbc>
 80016da:	2300      	movs	r3, #0
 80016dc:	60a3      	str	r3, [r4, #8]
 80016de:	6963      	ldr	r3, [r4, #20]
 80016e0:	425b      	negs	r3, r3
 80016e2:	61a3      	str	r3, [r4, #24]
 80016e4:	6923      	ldr	r3, [r4, #16]
 80016e6:	b943      	cbnz	r3, 80016fa <__swsetup_r+0xc6>
 80016e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80016ec:	d1ba      	bne.n	8001664 <__swsetup_r+0x30>
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
 80016f0:	0781      	lsls	r1, r0, #30
 80016f2:	bf58      	it	pl
 80016f4:	6963      	ldrpl	r3, [r4, #20]
 80016f6:	60a3      	str	r3, [r4, #8]
 80016f8:	e7f4      	b.n	80016e4 <__swsetup_r+0xb0>
 80016fa:	2000      	movs	r0, #0
 80016fc:	e7f7      	b.n	80016ee <__swsetup_r+0xba>
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008
 8001704:	08002080 	.word	0x08002080
 8001708:	080020a0 	.word	0x080020a0
 800170c:	08002060 	.word	0x08002060

08001710 <abort>:
 8001710:	b508      	push	{r3, lr}
 8001712:	2006      	movs	r0, #6
 8001714:	f000 fa98 	bl	8001c48 <raise>
 8001718:	2001      	movs	r0, #1
 800171a:	f000 fbb3 	bl	8001e84 <_exit>
	...

08001720 <__sflush_r>:
 8001720:	898a      	ldrh	r2, [r1, #12]
 8001722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001726:	4605      	mov	r5, r0
 8001728:	0710      	lsls	r0, r2, #28
 800172a:	460c      	mov	r4, r1
 800172c:	d458      	bmi.n	80017e0 <__sflush_r+0xc0>
 800172e:	684b      	ldr	r3, [r1, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	dc05      	bgt.n	8001740 <__sflush_r+0x20>
 8001734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	dc02      	bgt.n	8001740 <__sflush_r+0x20>
 800173a:	2000      	movs	r0, #0
 800173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001742:	2e00      	cmp	r6, #0
 8001744:	d0f9      	beq.n	800173a <__sflush_r+0x1a>
 8001746:	2300      	movs	r3, #0
 8001748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800174c:	682f      	ldr	r7, [r5, #0]
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	d032      	beq.n	80017b8 <__sflush_r+0x98>
 8001752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	075a      	lsls	r2, r3, #29
 8001758:	d505      	bpl.n	8001766 <__sflush_r+0x46>
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	1ac0      	subs	r0, r0, r3
 800175e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001760:	b10b      	cbz	r3, 8001766 <__sflush_r+0x46>
 8001762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001764:	1ac0      	subs	r0, r0, r3
 8001766:	2300      	movs	r3, #0
 8001768:	4602      	mov	r2, r0
 800176a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800176c:	6a21      	ldr	r1, [r4, #32]
 800176e:	4628      	mov	r0, r5
 8001770:	47b0      	blx	r6
 8001772:	1c43      	adds	r3, r0, #1
 8001774:	89a3      	ldrh	r3, [r4, #12]
 8001776:	d106      	bne.n	8001786 <__sflush_r+0x66>
 8001778:	6829      	ldr	r1, [r5, #0]
 800177a:	291d      	cmp	r1, #29
 800177c:	d82c      	bhi.n	80017d8 <__sflush_r+0xb8>
 800177e:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <__sflush_r+0x108>)
 8001780:	40ca      	lsrs	r2, r1
 8001782:	07d6      	lsls	r6, r2, #31
 8001784:	d528      	bpl.n	80017d8 <__sflush_r+0xb8>
 8001786:	2200      	movs	r2, #0
 8001788:	6062      	str	r2, [r4, #4]
 800178a:	04d9      	lsls	r1, r3, #19
 800178c:	6922      	ldr	r2, [r4, #16]
 800178e:	6022      	str	r2, [r4, #0]
 8001790:	d504      	bpl.n	800179c <__sflush_r+0x7c>
 8001792:	1c42      	adds	r2, r0, #1
 8001794:	d101      	bne.n	800179a <__sflush_r+0x7a>
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	b903      	cbnz	r3, 800179c <__sflush_r+0x7c>
 800179a:	6560      	str	r0, [r4, #84]	; 0x54
 800179c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800179e:	602f      	str	r7, [r5, #0]
 80017a0:	2900      	cmp	r1, #0
 80017a2:	d0ca      	beq.n	800173a <__sflush_r+0x1a>
 80017a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017a8:	4299      	cmp	r1, r3
 80017aa:	d002      	beq.n	80017b2 <__sflush_r+0x92>
 80017ac:	4628      	mov	r0, r5
 80017ae:	f7ff f913 	bl	80009d8 <_free_r>
 80017b2:	2000      	movs	r0, #0
 80017b4:	6360      	str	r0, [r4, #52]	; 0x34
 80017b6:	e7c1      	b.n	800173c <__sflush_r+0x1c>
 80017b8:	6a21      	ldr	r1, [r4, #32]
 80017ba:	2301      	movs	r3, #1
 80017bc:	4628      	mov	r0, r5
 80017be:	47b0      	blx	r6
 80017c0:	1c41      	adds	r1, r0, #1
 80017c2:	d1c7      	bne.n	8001754 <__sflush_r+0x34>
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0c4      	beq.n	8001754 <__sflush_r+0x34>
 80017ca:	2b1d      	cmp	r3, #29
 80017cc:	d001      	beq.n	80017d2 <__sflush_r+0xb2>
 80017ce:	2b16      	cmp	r3, #22
 80017d0:	d101      	bne.n	80017d6 <__sflush_r+0xb6>
 80017d2:	602f      	str	r7, [r5, #0]
 80017d4:	e7b1      	b.n	800173a <__sflush_r+0x1a>
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	81a3      	strh	r3, [r4, #12]
 80017de:	e7ad      	b.n	800173c <__sflush_r+0x1c>
 80017e0:	690f      	ldr	r7, [r1, #16]
 80017e2:	2f00      	cmp	r7, #0
 80017e4:	d0a9      	beq.n	800173a <__sflush_r+0x1a>
 80017e6:	0793      	lsls	r3, r2, #30
 80017e8:	680e      	ldr	r6, [r1, #0]
 80017ea:	bf08      	it	eq
 80017ec:	694b      	ldreq	r3, [r1, #20]
 80017ee:	600f      	str	r7, [r1, #0]
 80017f0:	bf18      	it	ne
 80017f2:	2300      	movne	r3, #0
 80017f4:	eba6 0807 	sub.w	r8, r6, r7
 80017f8:	608b      	str	r3, [r1, #8]
 80017fa:	f1b8 0f00 	cmp.w	r8, #0
 80017fe:	dd9c      	ble.n	800173a <__sflush_r+0x1a>
 8001800:	6a21      	ldr	r1, [r4, #32]
 8001802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001804:	4643      	mov	r3, r8
 8001806:	463a      	mov	r2, r7
 8001808:	4628      	mov	r0, r5
 800180a:	47b0      	blx	r6
 800180c:	2800      	cmp	r0, #0
 800180e:	dc06      	bgt.n	800181e <__sflush_r+0xfe>
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001816:	81a3      	strh	r3, [r4, #12]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	e78e      	b.n	800173c <__sflush_r+0x1c>
 800181e:	4407      	add	r7, r0
 8001820:	eba8 0800 	sub.w	r8, r8, r0
 8001824:	e7e9      	b.n	80017fa <__sflush_r+0xda>
 8001826:	bf00      	nop
 8001828:	20400001 	.word	0x20400001

0800182c <_fflush_r>:
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	690b      	ldr	r3, [r1, #16]
 8001830:	4605      	mov	r5, r0
 8001832:	460c      	mov	r4, r1
 8001834:	b913      	cbnz	r3, 800183c <_fflush_r+0x10>
 8001836:	2500      	movs	r5, #0
 8001838:	4628      	mov	r0, r5
 800183a:	bd38      	pop	{r3, r4, r5, pc}
 800183c:	b118      	cbz	r0, 8001846 <_fflush_r+0x1a>
 800183e:	6983      	ldr	r3, [r0, #24]
 8001840:	b90b      	cbnz	r3, 8001846 <_fflush_r+0x1a>
 8001842:	f000 f887 	bl	8001954 <__sinit>
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <_fflush_r+0x6c>)
 8001848:	429c      	cmp	r4, r3
 800184a:	d11b      	bne.n	8001884 <_fflush_r+0x58>
 800184c:	686c      	ldr	r4, [r5, #4]
 800184e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ef      	beq.n	8001836 <_fflush_r+0xa>
 8001856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001858:	07d0      	lsls	r0, r2, #31
 800185a:	d404      	bmi.n	8001866 <_fflush_r+0x3a>
 800185c:	0599      	lsls	r1, r3, #22
 800185e:	d402      	bmi.n	8001866 <_fflush_r+0x3a>
 8001860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001862:	f000 f915 	bl	8001a90 <__retarget_lock_acquire_recursive>
 8001866:	4628      	mov	r0, r5
 8001868:	4621      	mov	r1, r4
 800186a:	f7ff ff59 	bl	8001720 <__sflush_r>
 800186e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001870:	07da      	lsls	r2, r3, #31
 8001872:	4605      	mov	r5, r0
 8001874:	d4e0      	bmi.n	8001838 <_fflush_r+0xc>
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	059b      	lsls	r3, r3, #22
 800187a:	d4dd      	bmi.n	8001838 <_fflush_r+0xc>
 800187c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800187e:	f000 f908 	bl	8001a92 <__retarget_lock_release_recursive>
 8001882:	e7d9      	b.n	8001838 <_fflush_r+0xc>
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <_fflush_r+0x70>)
 8001886:	429c      	cmp	r4, r3
 8001888:	d101      	bne.n	800188e <_fflush_r+0x62>
 800188a:	68ac      	ldr	r4, [r5, #8]
 800188c:	e7df      	b.n	800184e <_fflush_r+0x22>
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <_fflush_r+0x74>)
 8001890:	429c      	cmp	r4, r3
 8001892:	bf08      	it	eq
 8001894:	68ec      	ldreq	r4, [r5, #12]
 8001896:	e7da      	b.n	800184e <_fflush_r+0x22>
 8001898:	08002080 	.word	0x08002080
 800189c:	080020a0 	.word	0x080020a0
 80018a0:	08002060 	.word	0x08002060

080018a4 <std>:
 80018a4:	2300      	movs	r3, #0
 80018a6:	b510      	push	{r4, lr}
 80018a8:	4604      	mov	r4, r0
 80018aa:	e9c0 3300 	strd	r3, r3, [r0]
 80018ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018b2:	6083      	str	r3, [r0, #8]
 80018b4:	8181      	strh	r1, [r0, #12]
 80018b6:	6643      	str	r3, [r0, #100]	; 0x64
 80018b8:	81c2      	strh	r2, [r0, #14]
 80018ba:	6183      	str	r3, [r0, #24]
 80018bc:	4619      	mov	r1, r3
 80018be:	2208      	movs	r2, #8
 80018c0:	305c      	adds	r0, #92	; 0x5c
 80018c2:	f7ff f881 	bl	80009c8 <memset>
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <std+0x38>)
 80018c8:	6263      	str	r3, [r4, #36]	; 0x24
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <std+0x3c>)
 80018cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <std+0x40>)
 80018d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <std+0x44>)
 80018d4:	6224      	str	r4, [r4, #32]
 80018d6:	6323      	str	r3, [r4, #48]	; 0x30
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	bf00      	nop
 80018dc:	08001c81 	.word	0x08001c81
 80018e0:	08001ca3 	.word	0x08001ca3
 80018e4:	08001cdb 	.word	0x08001cdb
 80018e8:	08001cff 	.word	0x08001cff

080018ec <_cleanup_r>:
 80018ec:	4901      	ldr	r1, [pc, #4]	; (80018f4 <_cleanup_r+0x8>)
 80018ee:	f000 b8af 	b.w	8001a50 <_fwalk_reent>
 80018f2:	bf00      	nop
 80018f4:	0800182d 	.word	0x0800182d

080018f8 <__sfmoreglue>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	1e4a      	subs	r2, r1, #1
 80018fc:	2568      	movs	r5, #104	; 0x68
 80018fe:	4355      	muls	r5, r2
 8001900:	460e      	mov	r6, r1
 8001902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001906:	f7ff f8b7 	bl	8000a78 <_malloc_r>
 800190a:	4604      	mov	r4, r0
 800190c:	b140      	cbz	r0, 8001920 <__sfmoreglue+0x28>
 800190e:	2100      	movs	r1, #0
 8001910:	e9c0 1600 	strd	r1, r6, [r0]
 8001914:	300c      	adds	r0, #12
 8001916:	60a0      	str	r0, [r4, #8]
 8001918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800191c:	f7ff f854 	bl	80009c8 <memset>
 8001920:	4620      	mov	r0, r4
 8001922:	bd70      	pop	{r4, r5, r6, pc}

08001924 <__sfp_lock_acquire>:
 8001924:	4801      	ldr	r0, [pc, #4]	; (800192c <__sfp_lock_acquire+0x8>)
 8001926:	f000 b8b3 	b.w	8001a90 <__retarget_lock_acquire_recursive>
 800192a:	bf00      	nop
 800192c:	200002b0 	.word	0x200002b0

08001930 <__sfp_lock_release>:
 8001930:	4801      	ldr	r0, [pc, #4]	; (8001938 <__sfp_lock_release+0x8>)
 8001932:	f000 b8ae 	b.w	8001a92 <__retarget_lock_release_recursive>
 8001936:	bf00      	nop
 8001938:	200002b0 	.word	0x200002b0

0800193c <__sinit_lock_acquire>:
 800193c:	4801      	ldr	r0, [pc, #4]	; (8001944 <__sinit_lock_acquire+0x8>)
 800193e:	f000 b8a7 	b.w	8001a90 <__retarget_lock_acquire_recursive>
 8001942:	bf00      	nop
 8001944:	200002ab 	.word	0x200002ab

08001948 <__sinit_lock_release>:
 8001948:	4801      	ldr	r0, [pc, #4]	; (8001950 <__sinit_lock_release+0x8>)
 800194a:	f000 b8a2 	b.w	8001a92 <__retarget_lock_release_recursive>
 800194e:	bf00      	nop
 8001950:	200002ab 	.word	0x200002ab

08001954 <__sinit>:
 8001954:	b510      	push	{r4, lr}
 8001956:	4604      	mov	r4, r0
 8001958:	f7ff fff0 	bl	800193c <__sinit_lock_acquire>
 800195c:	69a3      	ldr	r3, [r4, #24]
 800195e:	b11b      	cbz	r3, 8001968 <__sinit+0x14>
 8001960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001964:	f7ff bff0 	b.w	8001948 <__sinit_lock_release>
 8001968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800196c:	6523      	str	r3, [r4, #80]	; 0x50
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <__sinit+0x68>)
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <__sinit+0x6c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	62a2      	str	r2, [r4, #40]	; 0x28
 8001976:	42a3      	cmp	r3, r4
 8001978:	bf04      	itt	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	61a3      	streq	r3, [r4, #24]
 800197e:	4620      	mov	r0, r4
 8001980:	f000 f820 	bl	80019c4 <__sfp>
 8001984:	6060      	str	r0, [r4, #4]
 8001986:	4620      	mov	r0, r4
 8001988:	f000 f81c 	bl	80019c4 <__sfp>
 800198c:	60a0      	str	r0, [r4, #8]
 800198e:	4620      	mov	r0, r4
 8001990:	f000 f818 	bl	80019c4 <__sfp>
 8001994:	2200      	movs	r2, #0
 8001996:	60e0      	str	r0, [r4, #12]
 8001998:	2104      	movs	r1, #4
 800199a:	6860      	ldr	r0, [r4, #4]
 800199c:	f7ff ff82 	bl	80018a4 <std>
 80019a0:	68a0      	ldr	r0, [r4, #8]
 80019a2:	2201      	movs	r2, #1
 80019a4:	2109      	movs	r1, #9
 80019a6:	f7ff ff7d 	bl	80018a4 <std>
 80019aa:	68e0      	ldr	r0, [r4, #12]
 80019ac:	2202      	movs	r2, #2
 80019ae:	2112      	movs	r1, #18
 80019b0:	f7ff ff78 	bl	80018a4 <std>
 80019b4:	2301      	movs	r3, #1
 80019b6:	61a3      	str	r3, [r4, #24]
 80019b8:	e7d2      	b.n	8001960 <__sinit+0xc>
 80019ba:	bf00      	nop
 80019bc:	08001f74 	.word	0x08001f74
 80019c0:	080018ed 	.word	0x080018ed

080019c4 <__sfp>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	4607      	mov	r7, r0
 80019c8:	f7ff ffac 	bl	8001924 <__sfp_lock_acquire>
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <__sfp+0x84>)
 80019ce:	681e      	ldr	r6, [r3, #0]
 80019d0:	69b3      	ldr	r3, [r6, #24]
 80019d2:	b913      	cbnz	r3, 80019da <__sfp+0x16>
 80019d4:	4630      	mov	r0, r6
 80019d6:	f7ff ffbd 	bl	8001954 <__sinit>
 80019da:	3648      	adds	r6, #72	; 0x48
 80019dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	d503      	bpl.n	80019ec <__sfp+0x28>
 80019e4:	6833      	ldr	r3, [r6, #0]
 80019e6:	b30b      	cbz	r3, 8001a2c <__sfp+0x68>
 80019e8:	6836      	ldr	r6, [r6, #0]
 80019ea:	e7f7      	b.n	80019dc <__sfp+0x18>
 80019ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019f0:	b9d5      	cbnz	r5, 8001a28 <__sfp+0x64>
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <__sfp+0x88>)
 80019f4:	60e3      	str	r3, [r4, #12]
 80019f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019fa:	6665      	str	r5, [r4, #100]	; 0x64
 80019fc:	f000 f847 	bl	8001a8e <__retarget_lock_init_recursive>
 8001a00:	f7ff ff96 	bl	8001930 <__sfp_lock_release>
 8001a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a0c:	6025      	str	r5, [r4, #0]
 8001a0e:	61a5      	str	r5, [r4, #24]
 8001a10:	2208      	movs	r2, #8
 8001a12:	4629      	mov	r1, r5
 8001a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a18:	f7fe ffd6 	bl	80009c8 <memset>
 8001a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a24:	4620      	mov	r0, r4
 8001a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a28:	3468      	adds	r4, #104	; 0x68
 8001a2a:	e7d9      	b.n	80019e0 <__sfp+0x1c>
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4638      	mov	r0, r7
 8001a30:	f7ff ff62 	bl	80018f8 <__sfmoreglue>
 8001a34:	4604      	mov	r4, r0
 8001a36:	6030      	str	r0, [r6, #0]
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d1d5      	bne.n	80019e8 <__sfp+0x24>
 8001a3c:	f7ff ff78 	bl	8001930 <__sfp_lock_release>
 8001a40:	230c      	movs	r3, #12
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	e7ee      	b.n	8001a24 <__sfp+0x60>
 8001a46:	bf00      	nop
 8001a48:	08001f74 	.word	0x08001f74
 8001a4c:	ffff0001 	.word	0xffff0001

08001a50 <_fwalk_reent>:
 8001a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a54:	4606      	mov	r6, r0
 8001a56:	4688      	mov	r8, r1
 8001a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a5c:	2700      	movs	r7, #0
 8001a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a62:	f1b9 0901 	subs.w	r9, r9, #1
 8001a66:	d505      	bpl.n	8001a74 <_fwalk_reent+0x24>
 8001a68:	6824      	ldr	r4, [r4, #0]
 8001a6a:	2c00      	cmp	r4, #0
 8001a6c:	d1f7      	bne.n	8001a5e <_fwalk_reent+0xe>
 8001a6e:	4638      	mov	r0, r7
 8001a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a74:	89ab      	ldrh	r3, [r5, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d907      	bls.n	8001a8a <_fwalk_reent+0x3a>
 8001a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	d003      	beq.n	8001a8a <_fwalk_reent+0x3a>
 8001a82:	4629      	mov	r1, r5
 8001a84:	4630      	mov	r0, r6
 8001a86:	47c0      	blx	r8
 8001a88:	4307      	orrs	r7, r0
 8001a8a:	3568      	adds	r5, #104	; 0x68
 8001a8c:	e7e9      	b.n	8001a62 <_fwalk_reent+0x12>

08001a8e <__retarget_lock_init_recursive>:
 8001a8e:	4770      	bx	lr

08001a90 <__retarget_lock_acquire_recursive>:
 8001a90:	4770      	bx	lr

08001a92 <__retarget_lock_release_recursive>:
 8001a92:	4770      	bx	lr

08001a94 <__swhatbuf_r>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	460e      	mov	r6, r1
 8001a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	da07      	bge.n	8001ab6 <__swhatbuf_r+0x22>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	602b      	str	r3, [r5, #0]
 8001aaa:	89b3      	ldrh	r3, [r6, #12]
 8001aac:	061a      	lsls	r2, r3, #24
 8001aae:	d410      	bmi.n	8001ad2 <__swhatbuf_r+0x3e>
 8001ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab4:	e00e      	b.n	8001ad4 <__swhatbuf_r+0x40>
 8001ab6:	466a      	mov	r2, sp
 8001ab8:	f000 f948 	bl	8001d4c <_fstat_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	dbf2      	blt.n	8001aa6 <__swhatbuf_r+0x12>
 8001ac0:	9a01      	ldr	r2, [sp, #4]
 8001ac2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ac6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001aca:	425a      	negs	r2, r3
 8001acc:	415a      	adcs	r2, r3
 8001ace:	602a      	str	r2, [r5, #0]
 8001ad0:	e7ee      	b.n	8001ab0 <__swhatbuf_r+0x1c>
 8001ad2:	2340      	movs	r3, #64	; 0x40
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	6023      	str	r3, [r4, #0]
 8001ad8:	b016      	add	sp, #88	; 0x58
 8001ada:	bd70      	pop	{r4, r5, r6, pc}

08001adc <__smakebuf_r>:
 8001adc:	898b      	ldrh	r3, [r1, #12]
 8001ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ae0:	079d      	lsls	r5, r3, #30
 8001ae2:	4606      	mov	r6, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	d507      	bpl.n	8001af8 <__smakebuf_r+0x1c>
 8001ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001aec:	6023      	str	r3, [r4, #0]
 8001aee:	6123      	str	r3, [r4, #16]
 8001af0:	2301      	movs	r3, #1
 8001af2:	6163      	str	r3, [r4, #20]
 8001af4:	b002      	add	sp, #8
 8001af6:	bd70      	pop	{r4, r5, r6, pc}
 8001af8:	ab01      	add	r3, sp, #4
 8001afa:	466a      	mov	r2, sp
 8001afc:	f7ff ffca 	bl	8001a94 <__swhatbuf_r>
 8001b00:	9900      	ldr	r1, [sp, #0]
 8001b02:	4605      	mov	r5, r0
 8001b04:	4630      	mov	r0, r6
 8001b06:	f7fe ffb7 	bl	8000a78 <_malloc_r>
 8001b0a:	b948      	cbnz	r0, 8001b20 <__smakebuf_r+0x44>
 8001b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b10:	059a      	lsls	r2, r3, #22
 8001b12:	d4ef      	bmi.n	8001af4 <__smakebuf_r+0x18>
 8001b14:	f023 0303 	bic.w	r3, r3, #3
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	e7e3      	b.n	8001ae8 <__smakebuf_r+0xc>
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <__smakebuf_r+0x7c>)
 8001b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b24:	89a3      	ldrh	r3, [r4, #12]
 8001b26:	6020      	str	r0, [r4, #0]
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	9b00      	ldr	r3, [sp, #0]
 8001b30:	6163      	str	r3, [r4, #20]
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	6120      	str	r0, [r4, #16]
 8001b36:	b15b      	cbz	r3, 8001b50 <__smakebuf_r+0x74>
 8001b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f000 f917 	bl	8001d70 <_isatty_r>
 8001b42:	b128      	cbz	r0, 8001b50 <__smakebuf_r+0x74>
 8001b44:	89a3      	ldrh	r3, [r4, #12]
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	81a3      	strh	r3, [r4, #12]
 8001b50:	89a0      	ldrh	r0, [r4, #12]
 8001b52:	4305      	orrs	r5, r0
 8001b54:	81a5      	strh	r5, [r4, #12]
 8001b56:	e7cd      	b.n	8001af4 <__smakebuf_r+0x18>
 8001b58:	080018ed 	.word	0x080018ed

08001b5c <memcpy>:
 8001b5c:	440a      	add	r2, r1
 8001b5e:	4291      	cmp	r1, r2
 8001b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b64:	d100      	bne.n	8001b68 <memcpy+0xc>
 8001b66:	4770      	bx	lr
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b72:	4291      	cmp	r1, r2
 8001b74:	d1f9      	bne.n	8001b6a <memcpy+0xe>
 8001b76:	bd10      	pop	{r4, pc}

08001b78 <memmove>:
 8001b78:	4288      	cmp	r0, r1
 8001b7a:	b510      	push	{r4, lr}
 8001b7c:	eb01 0402 	add.w	r4, r1, r2
 8001b80:	d902      	bls.n	8001b88 <memmove+0x10>
 8001b82:	4284      	cmp	r4, r0
 8001b84:	4623      	mov	r3, r4
 8001b86:	d807      	bhi.n	8001b98 <memmove+0x20>
 8001b88:	1e43      	subs	r3, r0, #1
 8001b8a:	42a1      	cmp	r1, r4
 8001b8c:	d008      	beq.n	8001ba0 <memmove+0x28>
 8001b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b96:	e7f8      	b.n	8001b8a <memmove+0x12>
 8001b98:	4402      	add	r2, r0
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	d100      	bne.n	8001ba2 <memmove+0x2a>
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001baa:	e7f7      	b.n	8001b9c <memmove+0x24>

08001bac <_realloc_r>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	4607      	mov	r7, r0
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	460e      	mov	r6, r1
 8001bb4:	b921      	cbnz	r1, 8001bc0 <_realloc_r+0x14>
 8001bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001bba:	4611      	mov	r1, r2
 8001bbc:	f7fe bf5c 	b.w	8000a78 <_malloc_r>
 8001bc0:	b922      	cbnz	r2, 8001bcc <_realloc_r+0x20>
 8001bc2:	f7fe ff09 	bl	80009d8 <_free_r>
 8001bc6:	4625      	mov	r5, r4
 8001bc8:	4628      	mov	r0, r5
 8001bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bcc:	f000 f8f2 	bl	8001db4 <_malloc_usable_size_r>
 8001bd0:	42a0      	cmp	r0, r4
 8001bd2:	d20f      	bcs.n	8001bf4 <_realloc_r+0x48>
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4638      	mov	r0, r7
 8001bd8:	f7fe ff4e 	bl	8000a78 <_malloc_r>
 8001bdc:	4605      	mov	r5, r0
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d0f2      	beq.n	8001bc8 <_realloc_r+0x1c>
 8001be2:	4631      	mov	r1, r6
 8001be4:	4622      	mov	r2, r4
 8001be6:	f7ff ffb9 	bl	8001b5c <memcpy>
 8001bea:	4631      	mov	r1, r6
 8001bec:	4638      	mov	r0, r7
 8001bee:	f7fe fef3 	bl	80009d8 <_free_r>
 8001bf2:	e7e9      	b.n	8001bc8 <_realloc_r+0x1c>
 8001bf4:	4635      	mov	r5, r6
 8001bf6:	e7e7      	b.n	8001bc8 <_realloc_r+0x1c>

08001bf8 <_raise_r>:
 8001bf8:	291f      	cmp	r1, #31
 8001bfa:	b538      	push	{r3, r4, r5, lr}
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	460d      	mov	r5, r1
 8001c00:	d904      	bls.n	8001c0c <_raise_r+0x14>
 8001c02:	2316      	movs	r3, #22
 8001c04:	6003      	str	r3, [r0, #0]
 8001c06:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
 8001c0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001c0e:	b112      	cbz	r2, 8001c16 <_raise_r+0x1e>
 8001c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001c14:	b94b      	cbnz	r3, 8001c2a <_raise_r+0x32>
 8001c16:	4620      	mov	r0, r4
 8001c18:	f000 f830 	bl	8001c7c <_getpid_r>
 8001c1c:	462a      	mov	r2, r5
 8001c1e:	4601      	mov	r1, r0
 8001c20:	4620      	mov	r0, r4
 8001c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c26:	f000 b817 	b.w	8001c58 <_kill_r>
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d00a      	beq.n	8001c44 <_raise_r+0x4c>
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	d103      	bne.n	8001c3a <_raise_r+0x42>
 8001c32:	2316      	movs	r3, #22
 8001c34:	6003      	str	r3, [r0, #0]
 8001c36:	2001      	movs	r0, #1
 8001c38:	e7e7      	b.n	8001c0a <_raise_r+0x12>
 8001c3a:	2400      	movs	r4, #0
 8001c3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001c40:	4628      	mov	r0, r5
 8001c42:	4798      	blx	r3
 8001c44:	2000      	movs	r0, #0
 8001c46:	e7e0      	b.n	8001c0a <_raise_r+0x12>

08001c48 <raise>:
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <raise+0xc>)
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f7ff bfd3 	b.w	8001bf8 <_raise_r>
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008

08001c58 <_kill_r>:
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	4d07      	ldr	r5, [pc, #28]	; (8001c78 <_kill_r+0x20>)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	602b      	str	r3, [r5, #0]
 8001c66:	f000 f8df 	bl	8001e28 <_kill>
 8001c6a:	1c43      	adds	r3, r0, #1
 8001c6c:	d102      	bne.n	8001c74 <_kill_r+0x1c>
 8001c6e:	682b      	ldr	r3, [r5, #0]
 8001c70:	b103      	cbz	r3, 8001c74 <_kill_r+0x1c>
 8001c72:	6023      	str	r3, [r4, #0]
 8001c74:	bd38      	pop	{r3, r4, r5, pc}
 8001c76:	bf00      	nop
 8001c78:	200002a4 	.word	0x200002a4

08001c7c <_getpid_r>:
 8001c7c:	f000 b8c4 	b.w	8001e08 <_getpid>

08001c80 <__sread>:
 8001c80:	b510      	push	{r4, lr}
 8001c82:	460c      	mov	r4, r1
 8001c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c88:	f000 f89c 	bl	8001dc4 <_read_r>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	bfab      	itete	ge
 8001c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c92:	89a3      	ldrhlt	r3, [r4, #12]
 8001c94:	181b      	addge	r3, r3, r0
 8001c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c9a:	bfac      	ite	ge
 8001c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c9e:	81a3      	strhlt	r3, [r4, #12]
 8001ca0:	bd10      	pop	{r4, pc}

08001ca2 <__swrite>:
 8001ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca6:	461f      	mov	r7, r3
 8001ca8:	898b      	ldrh	r3, [r1, #12]
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	4605      	mov	r5, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4616      	mov	r6, r2
 8001cb2:	d505      	bpl.n	8001cc0 <__swrite+0x1e>
 8001cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cb8:	2302      	movs	r3, #2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f000 f868 	bl	8001d90 <_lseek_r>
 8001cc0:	89a3      	ldrh	r3, [r4, #12]
 8001cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cca:	81a3      	strh	r3, [r4, #12]
 8001ccc:	4632      	mov	r2, r6
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd6:	f000 b817 	b.w	8001d08 <_write_r>

08001cda <__sseek>:
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	460c      	mov	r4, r1
 8001cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce2:	f000 f855 	bl	8001d90 <_lseek_r>
 8001ce6:	1c43      	adds	r3, r0, #1
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	bf15      	itete	ne
 8001cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cf6:	81a3      	strheq	r3, [r4, #12]
 8001cf8:	bf18      	it	ne
 8001cfa:	81a3      	strhne	r3, [r4, #12]
 8001cfc:	bd10      	pop	{r4, pc}

08001cfe <__sclose>:
 8001cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d02:	f000 b813 	b.w	8001d2c <_close_r>
	...

08001d08 <_write_r>:
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	4d07      	ldr	r5, [pc, #28]	; (8001d28 <_write_r+0x20>)
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4608      	mov	r0, r1
 8001d10:	4611      	mov	r1, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	602a      	str	r2, [r5, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f000 f8ac 	bl	8001e74 <_write>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d102      	bne.n	8001d26 <_write_r+0x1e>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b103      	cbz	r3, 8001d26 <_write_r+0x1e>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
 8001d28:	200002a4 	.word	0x200002a4

08001d2c <_close_r>:
 8001d2c:	b538      	push	{r3, r4, r5, lr}
 8001d2e:	4d06      	ldr	r5, [pc, #24]	; (8001d48 <_close_r+0x1c>)
 8001d30:	2300      	movs	r3, #0
 8001d32:	4604      	mov	r4, r0
 8001d34:	4608      	mov	r0, r1
 8001d36:	602b      	str	r3, [r5, #0]
 8001d38:	f000 f856 	bl	8001de8 <_close>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d102      	bne.n	8001d46 <_close_r+0x1a>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	b103      	cbz	r3, 8001d46 <_close_r+0x1a>
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	200002a4 	.word	0x200002a4

08001d4c <_fstat_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	4d07      	ldr	r5, [pc, #28]	; (8001d6c <_fstat_r+0x20>)
 8001d50:	2300      	movs	r3, #0
 8001d52:	4604      	mov	r4, r0
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	602b      	str	r3, [r5, #0]
 8001d5a:	f000 f84d 	bl	8001df8 <_fstat>
 8001d5e:	1c43      	adds	r3, r0, #1
 8001d60:	d102      	bne.n	8001d68 <_fstat_r+0x1c>
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	b103      	cbz	r3, 8001d68 <_fstat_r+0x1c>
 8001d66:	6023      	str	r3, [r4, #0]
 8001d68:	bd38      	pop	{r3, r4, r5, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002a4 	.word	0x200002a4

08001d70 <_isatty_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	4d06      	ldr	r5, [pc, #24]	; (8001d8c <_isatty_r+0x1c>)
 8001d74:	2300      	movs	r3, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	602b      	str	r3, [r5, #0]
 8001d7c:	f000 f84c 	bl	8001e18 <_isatty>
 8001d80:	1c43      	adds	r3, r0, #1
 8001d82:	d102      	bne.n	8001d8a <_isatty_r+0x1a>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	b103      	cbz	r3, 8001d8a <_isatty_r+0x1a>
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	200002a4 	.word	0x200002a4

08001d90 <_lseek_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4d07      	ldr	r5, [pc, #28]	; (8001db0 <_lseek_r+0x20>)
 8001d94:	4604      	mov	r4, r0
 8001d96:	4608      	mov	r0, r1
 8001d98:	4611      	mov	r1, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	602a      	str	r2, [r5, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f000 f84a 	bl	8001e38 <_lseek>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d102      	bne.n	8001dae <_lseek_r+0x1e>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	b103      	cbz	r3, 8001dae <_lseek_r+0x1e>
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	200002a4 	.word	0x200002a4

08001db4 <_malloc_usable_size_r>:
 8001db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001db8:	1f18      	subs	r0, r3, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bfbc      	itt	lt
 8001dbe:	580b      	ldrlt	r3, [r1, r0]
 8001dc0:	18c0      	addlt	r0, r0, r3
 8001dc2:	4770      	bx	lr

08001dc4 <_read_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4d07      	ldr	r5, [pc, #28]	; (8001de4 <_read_r+0x20>)
 8001dc8:	4604      	mov	r4, r0
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	602a      	str	r2, [r5, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f000 f838 	bl	8001e48 <_read>
 8001dd8:	1c43      	adds	r3, r0, #1
 8001dda:	d102      	bne.n	8001de2 <_read_r+0x1e>
 8001ddc:	682b      	ldr	r3, [r5, #0]
 8001dde:	b103      	cbz	r3, 8001de2 <_read_r+0x1e>
 8001de0:	6023      	str	r3, [r4, #0]
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	200002a4 	.word	0x200002a4

08001de8 <_close>:
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <_close+0xc>)
 8001dea:	2258      	movs	r2, #88	; 0x58
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295
 8001df2:	4770      	bx	lr
 8001df4:	200002a4 	.word	0x200002a4

08001df8 <_fstat>:
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <_fstat+0xc>)
 8001dfa:	2258      	movs	r2, #88	; 0x58
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001e02:	4770      	bx	lr
 8001e04:	200002a4 	.word	0x200002a4

08001e08 <_getpid>:
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <_getpid+0xc>)
 8001e0a:	2258      	movs	r2, #88	; 0x58
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e12:	4770      	bx	lr
 8001e14:	200002a4 	.word	0x200002a4

08001e18 <_isatty>:
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <_isatty+0xc>)
 8001e1a:	2258      	movs	r2, #88	; 0x58
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	2000      	movs	r0, #0
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200002a4 	.word	0x200002a4

08001e28 <_kill>:
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <_kill+0xc>)
 8001e2a:	2258      	movs	r2, #88	; 0x58
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e32:	4770      	bx	lr
 8001e34:	200002a4 	.word	0x200002a4

08001e38 <_lseek>:
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <_lseek+0xc>)
 8001e3a:	2258      	movs	r2, #88	; 0x58
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e42:	4770      	bx	lr
 8001e44:	200002a4 	.word	0x200002a4

08001e48 <_read>:
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <_read+0xc>)
 8001e4a:	2258      	movs	r2, #88	; 0x58
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e52:	4770      	bx	lr
 8001e54:	200002a4 	.word	0x200002a4

08001e58 <_sbrk>:
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <_sbrk+0x14>)
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	b909      	cbnz	r1, 8001e64 <_sbrk+0xc>
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <_sbrk+0x18>)
 8001e62:	6019      	str	r1, [r3, #0]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	4402      	add	r2, r0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	4770      	bx	lr
 8001e6c:	200002a0 	.word	0x200002a0
 8001e70:	200002b8 	.word	0x200002b8

08001e74 <_write>:
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <_write+0xc>)
 8001e76:	2258      	movs	r2, #88	; 0x58
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7e:	4770      	bx	lr
 8001e80:	200002a4 	.word	0x200002a4

08001e84 <_exit>:
 8001e84:	e7fe      	b.n	8001e84 <_exit>
	...

08001e88 <_init>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	bf00      	nop
 8001e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8e:	bc08      	pop	{r3}
 8001e90:	469e      	mov	lr, r3
 8001e92:	4770      	bx	lr

08001e94 <_fini>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	bf00      	nop
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr
