
homework2_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080010ac  080010ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011d8  080011d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080011d8  080011d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011d8  080011d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011d8  080011d8  000111d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011dc  080011dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080011e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08001250  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08001250  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f8a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007bb  00000000  00000000  0002302a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  000237e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  000238d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018974  00000000  00000000  00023980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017ff  00000000  00000000  0003c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087407  00000000  00000000  0003daf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000860  00000000  00000000  000c4f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000001b9  00000000  00000000  000c57b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001094 	.word	0x08001094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08001094 	.word	0x08001094

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <returnHour>:
int motdet = 1;

char* str = "1234567";

//this will be the button interrupt function
char* returnHour(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af02      	add	r7, sp, #8
    char* toReturn = (char*) malloc(10*sizeof(char));
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fa72 	bl	80007ac <malloc>
 80002c8:	4603      	mov	r3, r0
 80002ca:	607b      	str	r3, [r7, #4]
	sprintf(toReturn,"%02d:%02d:%02d",hour,minute,second);
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <returnHour+0x34>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <returnHour+0x38>)
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <returnHour+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	460b      	mov	r3, r1
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <returnHour+0x40>)
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 fb36 	bl	8000950 <siprintf>
	return toReturn;
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000094 	.word	0x20000094
 80002f4:	20000090 	.word	0x20000090
 80002f8:	2000008c 	.word	0x2000008c
 80002fc:	080010b4 	.word	0x080010b4

08000300 <increaseSec>:
	for (int i=0;i<b;i++)
		toReturn*=a;
	return toReturn;
}
//this will be the timer interrupt function
void increaseSec(){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
	int minutePass=0;
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
	int hourPass=0;
 800030a:	2300      	movs	r3, #0
 800030c:	603b      	str	r3, [r7, #0]
	second++;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <increaseSec+0x78>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	4a18      	ldr	r2, [pc, #96]	; (8000378 <increaseSec+0x78>)
 8000316:	6013      	str	r3, [r2, #0]
	if(second==60){
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <increaseSec+0x78>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b3c      	cmp	r3, #60	; 0x3c
 800031e:	d104      	bne.n	800032a <increaseSec+0x2a>
		second=0;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <increaseSec+0x78>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
		minutePass=1;
 8000326:	2301      	movs	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
	}
	if(minutePass){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d00d      	beq.n	800034c <increaseSec+0x4c>
		minute++;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <increaseSec+0x7c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a11      	ldr	r2, [pc, #68]	; (800037c <increaseSec+0x7c>)
 8000338:	6013      	str	r3, [r2, #0]
		if(minute==60){
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <increaseSec+0x7c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b3c      	cmp	r3, #60	; 0x3c
 8000340:	d104      	bne.n	800034c <increaseSec+0x4c>
				minute=0;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <increaseSec+0x7c>)
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
				hourPass=1;
 8000348:	2301      	movs	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
		}
	}
	if(hourPass){
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d00b      	beq.n	800036a <increaseSec+0x6a>
			hour++;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <increaseSec+0x80>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3301      	adds	r3, #1
 8000358:	4a09      	ldr	r2, [pc, #36]	; (8000380 <increaseSec+0x80>)
 800035a:	6013      	str	r3, [r2, #0]
			if(hour==24){
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <increaseSec+0x80>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b18      	cmp	r3, #24
 8000362:	d102      	bne.n	800036a <increaseSec+0x6a>
					hour=0;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <increaseSec+0x80>)
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
			}
		}

}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	2000008c 	.word	0x2000008c
 800037c:	20000090 	.word	0x20000090
 8000380:	20000094 	.word	0x20000094

08000384 <EXTI15_10_IRQHandler>:
	return 1;
}


// ------------------------------------------------------ Button Handler function
void EXTI15_10_IRQHandler(){ // turning off the interrupt flag
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00002000;
 800038a:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <EXTI15_10_IRQHandler+0x3c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <EXTI15_10_IRQHandler+0x3c>)
 8000390:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000394:	6153      	str	r3, [r2, #20]
	char* toPrint = returnHour(); // printing the current time
 8000396:	f7ff ff91 	bl	80002bc <returnHour>
 800039a:	6078      	str	r0, [r7, #4]
	SPI_Transmit(str,8);
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <EXTI15_10_IRQHandler+0x40>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2108      	movs	r1, #8
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f91e 	bl	80005e4 <SPI_Transmit>
	print("%s\n",toPrint);
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	4807      	ldr	r0, [pc, #28]	; (80003c8 <EXTI15_10_IRQHandler+0x44>)
 80003ac:	f000 f942 	bl	8000634 <print>
	free(toPrint);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f000 fa03 	bl	80007bc <free>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40010400 	.word	0x40010400
 80003c4:	20000008 	.word	0x20000008
 80003c8:	080010e0 	.word	0x080010e0

080003cc <TIM2_IRQHandler>:


// ------------------------------------------------------Timer handler function
void TIM2_IRQHandler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	flip^=1; // for full-second check
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <TIM2_IRQHandler+0x54>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	4a11      	ldr	r2, [pc, #68]	; (8000420 <TIM2_IRQHandler+0x54>)
 80003da:	6013      	str	r3, [r2, #0]
	if(first && flip){
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <TIM2_IRQHandler+0x58>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <TIM2_IRQHandler+0x2a>
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <TIM2_IRQHandler+0x54>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d004      	beq.n	80003f6 <TIM2_IRQHandler+0x2a>
		//if we've been to the function at least once
		increaseSec(); // increase time by 1 second
 80003ec:	f7ff ff88 	bl	8000300 <increaseSec>
		motdet=1;
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <TIM2_IRQHandler+0x5c>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	601a      	str	r2, [r3, #0]
	}
	first = 1; //indicate we've visited function at least once
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <TIM2_IRQHandler+0x58>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	601a      	str	r2, [r3, #0]
	GPIOA->ODR ^= 0x00000020; // Write 0x00000020 to the address 0x48000014
 80003fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000406:	f083 0320 	eor.w	r3, r3, #32
 800040a:	6153      	str	r3, [r2, #20]
//	SPI_Transmit(time,8);

	//}


	TIM2->SR&=0XFFFFFFFE; // reenable timer interrupt
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000416:	f023 0301 	bic.w	r3, r3, #1
 800041a:	6113      	str	r3, [r2, #16]


}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000000 	.word	0x20000000
 8000424:	20000098 	.word	0x20000098
 8000428:	20000004 	.word	0x20000004

0800042c <main>:
//	GPIOA->ODR ^= 0x00000020; // Write 0x00000020 to the address 0x48000014
//	TIM2->SR&=0XFFFFFFFE; // reenable timer interrupt
//}
// ------------------------------------------------------ Main
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet)
    RCC->AHBENR |=0x000E0000;
 8000430:	4b37      	ldr	r3, [pc, #220]	; (8000510 <main+0xe4>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a36      	ldr	r2, [pc, #216]	; (8000510 <main+0xe4>)
 8000436:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800043a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |=  0x00000001; // enable TMR2
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <main+0xe4>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	4a33      	ldr	r2, [pc, #204]	; (8000510 <main+0xe4>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=  0x00000001; // enable SYSCFG Clock
 8000448:	4b31      	ldr	r3, [pc, #196]	; (8000510 <main+0xe4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a30      	ldr	r2, [pc, #192]	; (8000510 <main+0xe4>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6193      	str	r3, [r2, #24]
// ------------------------------------------------------
    TIM2->DIER |= 0x00000001; //TIM2 interrupt enable
 8000454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= 0x00002000; // config falling edge GPIOC13
 8000464:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <main+0xe8>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a2a      	ldr	r2, [pc, #168]	; (8000514 <main+0xe8>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= 0x00002000; // enable interrupt GPIOC13
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <main+0xe8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a27      	ldr	r2, [pc, #156]	; (8000514 <main+0xe8>)
 8000476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047a:	6013      	str	r3, [r2, #0]
// ------------------------------------------------------
    SYSCFG->EXTICR[3] |= 0x00000020;
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <main+0xec>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a25      	ldr	r2, [pc, #148]	; (8000518 <main+0xec>)
 8000482:	f043 0320 	orr.w	r3, r3, #32
 8000486:	6153      	str	r3, [r2, #20]
//    NVIC_EnableIRQ(EXTI15_10_IRQn); // enable button - core interrupt
// ------------------------------------------------------
    // Configure GPIOA pin 5 as output.
    GPIOA->MODER |= 0x00000400;
 8000488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000496:	6013      	str	r3, [r2, #0]
    // Configure GPIOA pin 5 as push pull.
    GPIOA->OTYPER &= ~0x00000020; // (1 << 5);
 8000498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a2:	f023 0320 	bic.w	r3, r3, #32
 80004a6:	6053      	str	r3, [r2, #4]





    TIM2->ARR= 8000000/2; // same as writing TIM2->ARR =0x003D0900*2 = the timer2 interrupt speed
 80004a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ac:	4a1b      	ldr	r2, [pc, #108]	; (800051c <main+0xf0>)
 80004ae:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1|=0x00000001; // TIM2 counter enable
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn); //TIM2 interrupt function enable
 80004c0:	201c      	movs	r0, #28
 80004c2:	f7ff fedd 	bl	8000280 <__NVIC_EnableIRQ>
//    NVIC_EnableIRQ(EXTI15_10_IRQn); //TIM2 interrupt function enable


    GPIOA->IDR=0;
 80004c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]

    USART2_init();
 80004ce:	f000 f8c9 	bl	8000664 <USART2_init>
    SPI1_init();
 80004d2:	f000 f82b 	bl	800052c <SPI1_init>
//    NVIC_EnableIRQ(SPI1_IRQn);

    print("Hello!\nThis is the secondary machine in the 2-machine exercise you are running!\n");
 80004d6:	4812      	ldr	r0, [pc, #72]	; (8000520 <main+0xf4>)
 80004d8:	f000 f8ac 	bl	8000634 <print>
    while(1)
    {
    	if((GPIOA->IDR & 0x00000002)){
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e0:	691b      	ldr	r3, [r3, #16]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <main+0xb0>
    		while(!motdet);
 80004ea:	bf00      	nop
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <main+0xf8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0fb      	beq.n	80004ec <main+0xc0>
    		print("MotDet ON!");
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <main+0xfc>)
 80004f6:	f000 f89d 	bl	8000634 <print>
    		SPI_Transmit(returnHour(), 8);
 80004fa:	f7ff fedf 	bl	80002bc <returnHour>
 80004fe:	4603      	mov	r3, r0
 8000500:	2108      	movs	r1, #8
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f86e 	bl	80005e4 <SPI_Transmit>
			motdet=0;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <main+0xf8>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
    	if((GPIOA->IDR & 0x00000002)){
 800050e:	e7e5      	b.n	80004dc <main+0xb0>
 8000510:	40021000 	.word	0x40021000
 8000514:	40010400 	.word	0x40010400
 8000518:	40010000 	.word	0x40010000
 800051c:	003d0900 	.word	0x003d0900
 8000520:	080010e4 	.word	0x080010e4
 8000524:	20000004 	.word	0x20000004
 8000528:	08001138 	.word	0x08001138

0800052c <SPI1_init>:
//
//


void SPI1_init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	//TODO - initialize SPI values (page 962 of user manual)
	memset(SPI_A_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	2100      	movs	r1, #0
 8000534:	4826      	ldr	r0, [pc, #152]	; (80005d0 <SPI1_init+0xa4>)
 8000536:	f000 f949 	bl	80007cc <memset>
	memset(SPI_B_Buffer,'\0',SPI1_SIZE_OF_SPI_BUFFER);
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	2100      	movs	r1, #0
 800053e:	4825      	ldr	r0, [pc, #148]	; (80005d4 <SPI1_init+0xa8>)
 8000540:	f000 f944 	bl	80007cc <memset>
	*SPI_B_Buffer='\0';
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SPI1_init+0xa8>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]

//	RCC->AHBENR |= (1<<0);  // Enable GPIO Clock

	//APB1 - page 152
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;// Enable SPI1 CLock
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <SPI1_init+0xac>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <SPI1_init+0xac>)
 8000550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000554:	6193      	str	r3, [r2, #24]
//	//SPI_CR2_TXEIE -> Tx buffer Empty Interrupt Enable
//	//SPI_CR2_RXNEIE -> RX buffer Not Empty Interrupt Enable
//	//SPI_CR2_DS_0|SPI_CR2_DS_1|SPI_CR2_DS_2 -> 0111: 8-bit Data size
//	//SPI_CR2_FRXTH -> FIFO reception Threshold
//	SPI1->CR2 |= SPI_CR2_TXEIE| SPI_CR2_RXNEIE | SPI_CR2_DS_0 |SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_FRXTH;
	SPI1->CR2 |= 0x000000040;
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <SPI1_init+0xb0>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4a20      	ldr	r2, [pc, #128]	; (80005dc <SPI1_init+0xb0>)
 800055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000560:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x000000040;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <SPI1_init+0xb0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <SPI1_init+0xb0>)
 8000568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056c:	6013      	str	r3, [r2, #0]


	GPIOA->MODER |= 0x0000A200; // Configure GPIOA pins 4,6,7  as alternate function 5, which is SPI1.
 800056e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000578:	f443 4322 	orr.w	r3, r3, #41472	; 0xa200
 800057c:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (5<<16)|(5<<24)|(5<<28);// AF5(SPI1) for PA4, PA6, PA7
 800057e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000588:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800058c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000590:	6213      	str	r3, [r2, #32]
	GPIOB->MODER |= 0x00000080; // Configure GPIOB pins 3  as alternate function 5, which is SPI1.
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <SPI1_init+0xb4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <SPI1_init+0xb4>)
 8000598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059c:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (5<<12);// AF5(SPI1) for PA4, PA6, PA7
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <SPI1_init+0xb4>)
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <SPI1_init+0xb4>)
 80005a4:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80005a8:	6213      	str	r3, [r2, #32]

	GPIOA->MODER &= 0xFFFFAAFF;
 80005aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b4:	f423 43aa 	bic.w	r3, r3, #21760	; 0x5500
 80005b8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0xAA00;
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005c4:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 80005c8:	6013      	str	r3, [r2, #0]



}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	2000011c 	.word	0x2000011c
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40013000 	.word	0x40013000
 80005e0:	48000400 	.word	0x48000400

080005e4 <SPI_Transmit>:


void SPI_Transmit (char *data, int size)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]




	int i=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
	while (i<size)
 80005f2:	e012      	b.n	800061a <SPI_Transmit+0x36>
	{
	   SPI1->DR = data[i];  // load the data into the Data Register
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <SPI_Transmit+0x4c>)
 80005fe:	60da      	str	r2, [r3, #12]
	   while (!((SPI1->SR)&(1<<1))) {};  // wait for TXE bit to set -> This will indicate that the buffer is empty
 8000600:	bf00      	nop
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <SPI_Transmit+0x4c>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <SPI_Transmit+0x1e>
//	   SPI1->DR = data[i];  // load the data into the Data Register
	   uint8_t temp = SPI1->DR;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SPI_Transmit+0x4c>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	72fb      	strb	r3, [r7, #11]
	   i++;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
	while (i<size)
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	dbe8      	blt.n	80005f4 <SPI_Transmit+0x10>
//
//	//  Clear the Overrun flag by reading DR and SR
//	uint8_t temp = SPI1->DR;
//	temp = SPI1->SR;

}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40013000 	.word	0x40013000

08000634 <print>:
 8000634:	b40f      	push	{r0, r1, r2, r3}
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <print+0x2c>)
 8000648:	f000 f9b8 	bl	80009bc <vsiprintf>
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <print+0x2c>)
 800064e:	f000 f83d 	bl	80006cc <USART2_print>
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr
 8000660:	2000019c 	.word	0x2000019c

08000664 <USART2_init>:
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <USART2_init+0x60>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <USART2_init+0x60>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000672:	6153      	str	r3, [r2, #20]
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <USART2_init+0x60>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <USART2_init+0x60>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	61d3      	str	r3, [r2, #28]
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800069e:	6213      	str	r3, [r2, #32]
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <USART2_init+0x64>)
 80006a2:	f240 3241 	movw	r2, #833	; 0x341
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <USART2_init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <USART2_init+0x64>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <USART2_init+0x64>)
 80006b4:	f043 0309 	orr.w	r3, r3, #9
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40004400 	.word	0x40004400

080006cc <USART2_print>:
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	e00e      	b.n	80006f4 <USART2_print+0x28>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <USART2_print+0x40>)
 80006dc:	b292      	uxth	r2, r2
 80006de:	851a      	strh	r2, [r3, #40]	; 0x28
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	bf00      	nop
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <USART2_print+0x40>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <USART2_print+0x1c>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1ec      	bne.n	80006d6 <USART2_print+0xa>
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40004400 	.word	0x40004400

08000710 <Reset_Handler>:
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopForever+0x2>)
 8000712:	4685      	mov	sp, r0
 8000714:	f3af 8000 	nop.w
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
 800071e:	2300      	movs	r3, #0
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:
 8000722:	58d4      	ldr	r4, [r2, r3]
 8000724:	50c4      	str	r4, [r0, r3]
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:
 8000728:	18c4      	adds	r4, r0, r3
 800072a:	428c      	cmp	r4, r1
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
 8000732:	2300      	movs	r3, #0
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:
 800073a:	42a2      	cmp	r2, r4
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>
 800073e:	f000 f811 	bl	8000764 <__libc_init_array>
 8000742:	f7ff fe73 	bl	800042c <main>

08000746 <LoopForever>:
 8000746:	e7fe      	b.n	8000746 <LoopForever>
 8000748:	20010000 	.word	0x20010000
 800074c:	20000000 	.word	0x20000000
 8000750:	20000070 	.word	0x20000070
 8000754:	080011e0 	.word	0x080011e0
 8000758:	20000070 	.word	0x20000070
 800075c:	20000238 	.word	0x20000238

08000760 <ADC1_2_IRQHandler>:
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <__libc_init_array>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	4d0d      	ldr	r5, [pc, #52]	; (800079c <__libc_init_array+0x38>)
 8000768:	4c0d      	ldr	r4, [pc, #52]	; (80007a0 <__libc_init_array+0x3c>)
 800076a:	1b64      	subs	r4, r4, r5
 800076c:	10a4      	asrs	r4, r4, #2
 800076e:	2600      	movs	r6, #0
 8000770:	42a6      	cmp	r6, r4
 8000772:	d109      	bne.n	8000788 <__libc_init_array+0x24>
 8000774:	4d0b      	ldr	r5, [pc, #44]	; (80007a4 <__libc_init_array+0x40>)
 8000776:	4c0c      	ldr	r4, [pc, #48]	; (80007a8 <__libc_init_array+0x44>)
 8000778:	f000 fc8c 	bl	8001094 <_init>
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	2600      	movs	r6, #0
 8000782:	42a6      	cmp	r6, r4
 8000784:	d105      	bne.n	8000792 <__libc_init_array+0x2e>
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f855 3b04 	ldr.w	r3, [r5], #4
 800078c:	4798      	blx	r3
 800078e:	3601      	adds	r6, #1
 8000790:	e7ee      	b.n	8000770 <__libc_init_array+0xc>
 8000792:	f855 3b04 	ldr.w	r3, [r5], #4
 8000796:	4798      	blx	r3
 8000798:	3601      	adds	r6, #1
 800079a:	e7f2      	b.n	8000782 <__libc_init_array+0x1e>
 800079c:	080011d8 	.word	0x080011d8
 80007a0:	080011d8 	.word	0x080011d8
 80007a4:	080011d8 	.word	0x080011d8
 80007a8:	080011dc 	.word	0x080011dc

080007ac <malloc>:
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <malloc+0xc>)
 80007ae:	4601      	mov	r1, r0
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f000 b863 	b.w	800087c <_malloc_r>
 80007b6:	bf00      	nop
 80007b8:	2000000c 	.word	0x2000000c

080007bc <free>:
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <free+0xc>)
 80007be:	4601      	mov	r1, r0
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f000 b80b 	b.w	80007dc <_free_r>
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c

080007cc <memset>:
 80007cc:	4402      	add	r2, r0
 80007ce:	4603      	mov	r3, r0
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d100      	bne.n	80007d6 <memset+0xa>
 80007d4:	4770      	bx	lr
 80007d6:	f803 1b01 	strb.w	r1, [r3], #1
 80007da:	e7f9      	b.n	80007d0 <memset+0x4>

080007dc <_free_r>:
 80007dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80007de:	2900      	cmp	r1, #0
 80007e0:	d048      	beq.n	8000874 <_free_r+0x98>
 80007e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007e6:	9001      	str	r0, [sp, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f1a1 0404 	sub.w	r4, r1, #4
 80007ee:	bfb8      	it	lt
 80007f0:	18e4      	addlt	r4, r4, r3
 80007f2:	f000 f8ed 	bl	80009d0 <__malloc_lock>
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <_free_r+0x9c>)
 80007f8:	9801      	ldr	r0, [sp, #4]
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	4615      	mov	r5, r2
 80007fe:	b933      	cbnz	r3, 800080e <_free_r+0x32>
 8000800:	6063      	str	r3, [r4, #4]
 8000802:	6014      	str	r4, [r2, #0]
 8000804:	b003      	add	sp, #12
 8000806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800080a:	f000 b8e7 	b.w	80009dc <__malloc_unlock>
 800080e:	42a3      	cmp	r3, r4
 8000810:	d90b      	bls.n	800082a <_free_r+0x4e>
 8000812:	6821      	ldr	r1, [r4, #0]
 8000814:	1862      	adds	r2, r4, r1
 8000816:	4293      	cmp	r3, r2
 8000818:	bf04      	itt	eq
 800081a:	681a      	ldreq	r2, [r3, #0]
 800081c:	685b      	ldreq	r3, [r3, #4]
 800081e:	6063      	str	r3, [r4, #4]
 8000820:	bf04      	itt	eq
 8000822:	1852      	addeq	r2, r2, r1
 8000824:	6022      	streq	r2, [r4, #0]
 8000826:	602c      	str	r4, [r5, #0]
 8000828:	e7ec      	b.n	8000804 <_free_r+0x28>
 800082a:	461a      	mov	r2, r3
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	b10b      	cbz	r3, 8000834 <_free_r+0x58>
 8000830:	42a3      	cmp	r3, r4
 8000832:	d9fa      	bls.n	800082a <_free_r+0x4e>
 8000834:	6811      	ldr	r1, [r2, #0]
 8000836:	1855      	adds	r5, r2, r1
 8000838:	42a5      	cmp	r5, r4
 800083a:	d10b      	bne.n	8000854 <_free_r+0x78>
 800083c:	6824      	ldr	r4, [r4, #0]
 800083e:	4421      	add	r1, r4
 8000840:	1854      	adds	r4, r2, r1
 8000842:	42a3      	cmp	r3, r4
 8000844:	6011      	str	r1, [r2, #0]
 8000846:	d1dd      	bne.n	8000804 <_free_r+0x28>
 8000848:	681c      	ldr	r4, [r3, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	4421      	add	r1, r4
 8000850:	6011      	str	r1, [r2, #0]
 8000852:	e7d7      	b.n	8000804 <_free_r+0x28>
 8000854:	d902      	bls.n	800085c <_free_r+0x80>
 8000856:	230c      	movs	r3, #12
 8000858:	6003      	str	r3, [r0, #0]
 800085a:	e7d3      	b.n	8000804 <_free_r+0x28>
 800085c:	6825      	ldr	r5, [r4, #0]
 800085e:	1961      	adds	r1, r4, r5
 8000860:	428b      	cmp	r3, r1
 8000862:	bf04      	itt	eq
 8000864:	6819      	ldreq	r1, [r3, #0]
 8000866:	685b      	ldreq	r3, [r3, #4]
 8000868:	6063      	str	r3, [r4, #4]
 800086a:	bf04      	itt	eq
 800086c:	1949      	addeq	r1, r1, r5
 800086e:	6021      	streq	r1, [r4, #0]
 8000870:	6054      	str	r4, [r2, #4]
 8000872:	e7c7      	b.n	8000804 <_free_r+0x28>
 8000874:	b003      	add	sp, #12
 8000876:	bd30      	pop	{r4, r5, pc}
 8000878:	2000021c 	.word	0x2000021c

0800087c <_malloc_r>:
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	1ccd      	adds	r5, r1, #3
 8000880:	f025 0503 	bic.w	r5, r5, #3
 8000884:	3508      	adds	r5, #8
 8000886:	2d0c      	cmp	r5, #12
 8000888:	bf38      	it	cc
 800088a:	250c      	movcc	r5, #12
 800088c:	2d00      	cmp	r5, #0
 800088e:	4606      	mov	r6, r0
 8000890:	db01      	blt.n	8000896 <_malloc_r+0x1a>
 8000892:	42a9      	cmp	r1, r5
 8000894:	d903      	bls.n	800089e <_malloc_r+0x22>
 8000896:	230c      	movs	r3, #12
 8000898:	6033      	str	r3, [r6, #0]
 800089a:	2000      	movs	r0, #0
 800089c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089e:	f000 f897 	bl	80009d0 <__malloc_lock>
 80008a2:	4921      	ldr	r1, [pc, #132]	; (8000928 <_malloc_r+0xac>)
 80008a4:	680a      	ldr	r2, [r1, #0]
 80008a6:	4614      	mov	r4, r2
 80008a8:	b99c      	cbnz	r4, 80008d2 <_malloc_r+0x56>
 80008aa:	4f20      	ldr	r7, [pc, #128]	; (800092c <_malloc_r+0xb0>)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b923      	cbnz	r3, 80008ba <_malloc_r+0x3e>
 80008b0:	4621      	mov	r1, r4
 80008b2:	4630      	mov	r0, r6
 80008b4:	f000 f83c 	bl	8000930 <_sbrk_r>
 80008b8:	6038      	str	r0, [r7, #0]
 80008ba:	4629      	mov	r1, r5
 80008bc:	4630      	mov	r0, r6
 80008be:	f000 f837 	bl	8000930 <_sbrk_r>
 80008c2:	1c43      	adds	r3, r0, #1
 80008c4:	d123      	bne.n	800090e <_malloc_r+0x92>
 80008c6:	230c      	movs	r3, #12
 80008c8:	6033      	str	r3, [r6, #0]
 80008ca:	4630      	mov	r0, r6
 80008cc:	f000 f886 	bl	80009dc <__malloc_unlock>
 80008d0:	e7e3      	b.n	800089a <_malloc_r+0x1e>
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	1b5b      	subs	r3, r3, r5
 80008d6:	d417      	bmi.n	8000908 <_malloc_r+0x8c>
 80008d8:	2b0b      	cmp	r3, #11
 80008da:	d903      	bls.n	80008e4 <_malloc_r+0x68>
 80008dc:	6023      	str	r3, [r4, #0]
 80008de:	441c      	add	r4, r3
 80008e0:	6025      	str	r5, [r4, #0]
 80008e2:	e004      	b.n	80008ee <_malloc_r+0x72>
 80008e4:	6863      	ldr	r3, [r4, #4]
 80008e6:	42a2      	cmp	r2, r4
 80008e8:	bf0c      	ite	eq
 80008ea:	600b      	streq	r3, [r1, #0]
 80008ec:	6053      	strne	r3, [r2, #4]
 80008ee:	4630      	mov	r0, r6
 80008f0:	f000 f874 	bl	80009dc <__malloc_unlock>
 80008f4:	f104 000b 	add.w	r0, r4, #11
 80008f8:	1d23      	adds	r3, r4, #4
 80008fa:	f020 0007 	bic.w	r0, r0, #7
 80008fe:	1ac2      	subs	r2, r0, r3
 8000900:	d0cc      	beq.n	800089c <_malloc_r+0x20>
 8000902:	1a1b      	subs	r3, r3, r0
 8000904:	50a3      	str	r3, [r4, r2]
 8000906:	e7c9      	b.n	800089c <_malloc_r+0x20>
 8000908:	4622      	mov	r2, r4
 800090a:	6864      	ldr	r4, [r4, #4]
 800090c:	e7cc      	b.n	80008a8 <_malloc_r+0x2c>
 800090e:	1cc4      	adds	r4, r0, #3
 8000910:	f024 0403 	bic.w	r4, r4, #3
 8000914:	42a0      	cmp	r0, r4
 8000916:	d0e3      	beq.n	80008e0 <_malloc_r+0x64>
 8000918:	1a21      	subs	r1, r4, r0
 800091a:	4630      	mov	r0, r6
 800091c:	f000 f808 	bl	8000930 <_sbrk_r>
 8000920:	3001      	adds	r0, #1
 8000922:	d1dd      	bne.n	80008e0 <_malloc_r+0x64>
 8000924:	e7cf      	b.n	80008c6 <_malloc_r+0x4a>
 8000926:	bf00      	nop
 8000928:	2000021c 	.word	0x2000021c
 800092c:	20000220 	.word	0x20000220

08000930 <_sbrk_r>:
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4d06      	ldr	r5, [pc, #24]	; (800094c <_sbrk_r+0x1c>)
 8000934:	2300      	movs	r3, #0
 8000936:	4604      	mov	r4, r0
 8000938:	4608      	mov	r0, r1
 800093a:	602b      	str	r3, [r5, #0]
 800093c:	f000 fb9c 	bl	8001078 <_sbrk>
 8000940:	1c43      	adds	r3, r0, #1
 8000942:	d102      	bne.n	800094a <_sbrk_r+0x1a>
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	b103      	cbz	r3, 800094a <_sbrk_r+0x1a>
 8000948:	6023      	str	r3, [r4, #0]
 800094a:	bd38      	pop	{r3, r4, r5, pc}
 800094c:	20000228 	.word	0x20000228

08000950 <siprintf>:
 8000950:	b40e      	push	{r1, r2, r3}
 8000952:	b500      	push	{lr}
 8000954:	b09c      	sub	sp, #112	; 0x70
 8000956:	ab1d      	add	r3, sp, #116	; 0x74
 8000958:	9002      	str	r0, [sp, #8]
 800095a:	9006      	str	r0, [sp, #24]
 800095c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <siprintf+0x38>)
 8000962:	9107      	str	r1, [sp, #28]
 8000964:	9104      	str	r1, [sp, #16]
 8000966:	4909      	ldr	r1, [pc, #36]	; (800098c <siprintf+0x3c>)
 8000968:	f853 2b04 	ldr.w	r2, [r3], #4
 800096c:	9105      	str	r1, [sp, #20]
 800096e:	6800      	ldr	r0, [r0, #0]
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	a902      	add	r1, sp, #8
 8000974:	f000 f894 	bl	8000aa0 <_svfiprintf_r>
 8000978:	9b02      	ldr	r3, [sp, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	b01c      	add	sp, #112	; 0x70
 8000980:	f85d eb04 	ldr.w	lr, [sp], #4
 8000984:	b003      	add	sp, #12
 8000986:	4770      	bx	lr
 8000988:	2000000c 	.word	0x2000000c
 800098c:	ffff0208 	.word	0xffff0208

08000990 <_vsiprintf_r>:
 8000990:	b500      	push	{lr}
 8000992:	b09b      	sub	sp, #108	; 0x6c
 8000994:	9100      	str	r1, [sp, #0]
 8000996:	9104      	str	r1, [sp, #16]
 8000998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800099c:	9105      	str	r1, [sp, #20]
 800099e:	9102      	str	r1, [sp, #8]
 80009a0:	4905      	ldr	r1, [pc, #20]	; (80009b8 <_vsiprintf_r+0x28>)
 80009a2:	9103      	str	r1, [sp, #12]
 80009a4:	4669      	mov	r1, sp
 80009a6:	f000 f87b 	bl	8000aa0 <_svfiprintf_r>
 80009aa:	9b00      	ldr	r3, [sp, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	b01b      	add	sp, #108	; 0x6c
 80009b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009b6:	bf00      	nop
 80009b8:	ffff0208 	.word	0xffff0208

080009bc <vsiprintf>:
 80009bc:	4613      	mov	r3, r2
 80009be:	460a      	mov	r2, r1
 80009c0:	4601      	mov	r1, r0
 80009c2:	4802      	ldr	r0, [pc, #8]	; (80009cc <vsiprintf+0x10>)
 80009c4:	6800      	ldr	r0, [r0, #0]
 80009c6:	f7ff bfe3 	b.w	8000990 <_vsiprintf_r>
 80009ca:	bf00      	nop
 80009cc:	2000000c 	.word	0x2000000c

080009d0 <__malloc_lock>:
 80009d0:	4801      	ldr	r0, [pc, #4]	; (80009d8 <__malloc_lock+0x8>)
 80009d2:	f000 baf9 	b.w	8000fc8 <__retarget_lock_acquire_recursive>
 80009d6:	bf00      	nop
 80009d8:	20000230 	.word	0x20000230

080009dc <__malloc_unlock>:
 80009dc:	4801      	ldr	r0, [pc, #4]	; (80009e4 <__malloc_unlock+0x8>)
 80009de:	f000 baf4 	b.w	8000fca <__retarget_lock_release_recursive>
 80009e2:	bf00      	nop
 80009e4:	20000230 	.word	0x20000230

080009e8 <__ssputs_r>:
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	688e      	ldr	r6, [r1, #8]
 80009ee:	429e      	cmp	r6, r3
 80009f0:	4682      	mov	sl, r0
 80009f2:	460c      	mov	r4, r1
 80009f4:	4690      	mov	r8, r2
 80009f6:	461f      	mov	r7, r3
 80009f8:	d838      	bhi.n	8000a6c <__ssputs_r+0x84>
 80009fa:	898a      	ldrh	r2, [r1, #12]
 80009fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a00:	d032      	beq.n	8000a68 <__ssputs_r+0x80>
 8000a02:	6825      	ldr	r5, [r4, #0]
 8000a04:	6909      	ldr	r1, [r1, #16]
 8000a06:	eba5 0901 	sub.w	r9, r5, r1
 8000a0a:	6965      	ldr	r5, [r4, #20]
 8000a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a14:	3301      	adds	r3, #1
 8000a16:	444b      	add	r3, r9
 8000a18:	106d      	asrs	r5, r5, #1
 8000a1a:	429d      	cmp	r5, r3
 8000a1c:	bf38      	it	cc
 8000a1e:	461d      	movcc	r5, r3
 8000a20:	0553      	lsls	r3, r2, #21
 8000a22:	d531      	bpl.n	8000a88 <__ssputs_r+0xa0>
 8000a24:	4629      	mov	r1, r5
 8000a26:	f7ff ff29 	bl	800087c <_malloc_r>
 8000a2a:	4606      	mov	r6, r0
 8000a2c:	b950      	cbnz	r0, 8000a44 <__ssputs_r+0x5c>
 8000a2e:	230c      	movs	r3, #12
 8000a30:	f8ca 3000 	str.w	r3, [sl]
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3a:	81a3      	strh	r3, [r4, #12]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a44:	6921      	ldr	r1, [r4, #16]
 8000a46:	464a      	mov	r2, r9
 8000a48:	f000 fac0 	bl	8000fcc <memcpy>
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a56:	81a3      	strh	r3, [r4, #12]
 8000a58:	6126      	str	r6, [r4, #16]
 8000a5a:	6165      	str	r5, [r4, #20]
 8000a5c:	444e      	add	r6, r9
 8000a5e:	eba5 0509 	sub.w	r5, r5, r9
 8000a62:	6026      	str	r6, [r4, #0]
 8000a64:	60a5      	str	r5, [r4, #8]
 8000a66:	463e      	mov	r6, r7
 8000a68:	42be      	cmp	r6, r7
 8000a6a:	d900      	bls.n	8000a6e <__ssputs_r+0x86>
 8000a6c:	463e      	mov	r6, r7
 8000a6e:	4632      	mov	r2, r6
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	4641      	mov	r1, r8
 8000a74:	f000 fab8 	bl	8000fe8 <memmove>
 8000a78:	68a3      	ldr	r3, [r4, #8]
 8000a7a:	6822      	ldr	r2, [r4, #0]
 8000a7c:	1b9b      	subs	r3, r3, r6
 8000a7e:	4432      	add	r2, r6
 8000a80:	60a3      	str	r3, [r4, #8]
 8000a82:	6022      	str	r2, [r4, #0]
 8000a84:	2000      	movs	r0, #0
 8000a86:	e7db      	b.n	8000a40 <__ssputs_r+0x58>
 8000a88:	462a      	mov	r2, r5
 8000a8a:	f000 fac7 	bl	800101c <_realloc_r>
 8000a8e:	4606      	mov	r6, r0
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1e1      	bne.n	8000a58 <__ssputs_r+0x70>
 8000a94:	6921      	ldr	r1, [r4, #16]
 8000a96:	4650      	mov	r0, sl
 8000a98:	f7ff fea0 	bl	80007dc <_free_r>
 8000a9c:	e7c7      	b.n	8000a2e <__ssputs_r+0x46>
	...

08000aa0 <_svfiprintf_r>:
 8000aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa4:	4698      	mov	r8, r3
 8000aa6:	898b      	ldrh	r3, [r1, #12]
 8000aa8:	061b      	lsls	r3, r3, #24
 8000aaa:	b09d      	sub	sp, #116	; 0x74
 8000aac:	4607      	mov	r7, r0
 8000aae:	460d      	mov	r5, r1
 8000ab0:	4614      	mov	r4, r2
 8000ab2:	d50e      	bpl.n	8000ad2 <_svfiprintf_r+0x32>
 8000ab4:	690b      	ldr	r3, [r1, #16]
 8000ab6:	b963      	cbnz	r3, 8000ad2 <_svfiprintf_r+0x32>
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	f7ff fedf 	bl	800087c <_malloc_r>
 8000abe:	6028      	str	r0, [r5, #0]
 8000ac0:	6128      	str	r0, [r5, #16]
 8000ac2:	b920      	cbnz	r0, 8000ace <_svfiprintf_r+0x2e>
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	e0d1      	b.n	8000c72 <_svfiprintf_r+0x1d2>
 8000ace:	2340      	movs	r3, #64	; 0x40
 8000ad0:	616b      	str	r3, [r5, #20]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ae0:	2330      	movs	r3, #48	; 0x30
 8000ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000c8c <_svfiprintf_r+0x1ec>
 8000ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000aea:	f04f 0901 	mov.w	r9, #1
 8000aee:	4623      	mov	r3, r4
 8000af0:	469a      	mov	sl, r3
 8000af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000af6:	b10a      	cbz	r2, 8000afc <_svfiprintf_r+0x5c>
 8000af8:	2a25      	cmp	r2, #37	; 0x25
 8000afa:	d1f9      	bne.n	8000af0 <_svfiprintf_r+0x50>
 8000afc:	ebba 0b04 	subs.w	fp, sl, r4
 8000b00:	d00b      	beq.n	8000b1a <_svfiprintf_r+0x7a>
 8000b02:	465b      	mov	r3, fp
 8000b04:	4622      	mov	r2, r4
 8000b06:	4629      	mov	r1, r5
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f7ff ff6d 	bl	80009e8 <__ssputs_r>
 8000b0e:	3001      	adds	r0, #1
 8000b10:	f000 80aa 	beq.w	8000c68 <_svfiprintf_r+0x1c8>
 8000b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b16:	445a      	add	r2, fp
 8000b18:	9209      	str	r2, [sp, #36]	; 0x24
 8000b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 80a2 	beq.w	8000c68 <_svfiprintf_r+0x1c8>
 8000b24:	2300      	movs	r3, #0
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b2e:	f10a 0a01 	add.w	sl, sl, #1
 8000b32:	9304      	str	r3, [sp, #16]
 8000b34:	9307      	str	r3, [sp, #28]
 8000b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8000b3c:	4654      	mov	r4, sl
 8000b3e:	2205      	movs	r2, #5
 8000b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b44:	4851      	ldr	r0, [pc, #324]	; (8000c8c <_svfiprintf_r+0x1ec>)
 8000b46:	f7ff fb4b 	bl	80001e0 <memchr>
 8000b4a:	9a04      	ldr	r2, [sp, #16]
 8000b4c:	b9d8      	cbnz	r0, 8000b86 <_svfiprintf_r+0xe6>
 8000b4e:	06d0      	lsls	r0, r2, #27
 8000b50:	bf44      	itt	mi
 8000b52:	2320      	movmi	r3, #32
 8000b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b58:	0711      	lsls	r1, r2, #28
 8000b5a:	bf44      	itt	mi
 8000b5c:	232b      	movmi	r3, #43	; 0x2b
 8000b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b62:	f89a 3000 	ldrb.w	r3, [sl]
 8000b66:	2b2a      	cmp	r3, #42	; 0x2a
 8000b68:	d015      	beq.n	8000b96 <_svfiprintf_r+0xf6>
 8000b6a:	9a07      	ldr	r2, [sp, #28]
 8000b6c:	4654      	mov	r4, sl
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f04f 0c0a 	mov.w	ip, #10
 8000b74:	4621      	mov	r1, r4
 8000b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b7a:	3b30      	subs	r3, #48	; 0x30
 8000b7c:	2b09      	cmp	r3, #9
 8000b7e:	d94e      	bls.n	8000c1e <_svfiprintf_r+0x17e>
 8000b80:	b1b0      	cbz	r0, 8000bb0 <_svfiprintf_r+0x110>
 8000b82:	9207      	str	r2, [sp, #28]
 8000b84:	e014      	b.n	8000bb0 <_svfiprintf_r+0x110>
 8000b86:	eba0 0308 	sub.w	r3, r0, r8
 8000b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	9304      	str	r3, [sp, #16]
 8000b92:	46a2      	mov	sl, r4
 8000b94:	e7d2      	b.n	8000b3c <_svfiprintf_r+0x9c>
 8000b96:	9b03      	ldr	r3, [sp, #12]
 8000b98:	1d19      	adds	r1, r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	9103      	str	r1, [sp, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bfbb      	ittet	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8000ba8:	9307      	strge	r3, [sp, #28]
 8000baa:	9307      	strlt	r3, [sp, #28]
 8000bac:	bfb8      	it	lt
 8000bae:	9204      	strlt	r2, [sp, #16]
 8000bb0:	7823      	ldrb	r3, [r4, #0]
 8000bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8000bb4:	d10c      	bne.n	8000bd0 <_svfiprintf_r+0x130>
 8000bb6:	7863      	ldrb	r3, [r4, #1]
 8000bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000bba:	d135      	bne.n	8000c28 <_svfiprintf_r+0x188>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	1d1a      	adds	r2, r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	9203      	str	r2, [sp, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bfb8      	it	lt
 8000bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bcc:	3402      	adds	r4, #2
 8000bce:	9305      	str	r3, [sp, #20]
 8000bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c9c <_svfiprintf_r+0x1fc>
 8000bd4:	7821      	ldrb	r1, [r4, #0]
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	4650      	mov	r0, sl
 8000bda:	f7ff fb01 	bl	80001e0 <memchr>
 8000bde:	b140      	cbz	r0, 8000bf2 <_svfiprintf_r+0x152>
 8000be0:	2340      	movs	r3, #64	; 0x40
 8000be2:	eba0 000a 	sub.w	r0, r0, sl
 8000be6:	fa03 f000 	lsl.w	r0, r3, r0
 8000bea:	9b04      	ldr	r3, [sp, #16]
 8000bec:	4303      	orrs	r3, r0
 8000bee:	3401      	adds	r4, #1
 8000bf0:	9304      	str	r3, [sp, #16]
 8000bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <_svfiprintf_r+0x1f0>)
 8000bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bfc:	2206      	movs	r2, #6
 8000bfe:	f7ff faef 	bl	80001e0 <memchr>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d038      	beq.n	8000c78 <_svfiprintf_r+0x1d8>
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <_svfiprintf_r+0x1f4>)
 8000c08:	bb1b      	cbnz	r3, 8000c52 <_svfiprintf_r+0x1b2>
 8000c0a:	9b03      	ldr	r3, [sp, #12]
 8000c0c:	3307      	adds	r3, #7
 8000c0e:	f023 0307 	bic.w	r3, r3, #7
 8000c12:	3308      	adds	r3, #8
 8000c14:	9303      	str	r3, [sp, #12]
 8000c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c18:	4433      	add	r3, r6
 8000c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c1c:	e767      	b.n	8000aee <_svfiprintf_r+0x4e>
 8000c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c22:	460c      	mov	r4, r1
 8000c24:	2001      	movs	r0, #1
 8000c26:	e7a5      	b.n	8000b74 <_svfiprintf_r+0xd4>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	3401      	adds	r4, #1
 8000c2c:	9305      	str	r3, [sp, #20]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 0c0a 	mov.w	ip, #10
 8000c34:	4620      	mov	r0, r4
 8000c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c3a:	3a30      	subs	r2, #48	; 0x30
 8000c3c:	2a09      	cmp	r2, #9
 8000c3e:	d903      	bls.n	8000c48 <_svfiprintf_r+0x1a8>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0c5      	beq.n	8000bd0 <_svfiprintf_r+0x130>
 8000c44:	9105      	str	r1, [sp, #20]
 8000c46:	e7c3      	b.n	8000bd0 <_svfiprintf_r+0x130>
 8000c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e7f0      	b.n	8000c34 <_svfiprintf_r+0x194>
 8000c52:	ab03      	add	r3, sp, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	462a      	mov	r2, r5
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <_svfiprintf_r+0x1f8>)
 8000c5a:	a904      	add	r1, sp, #16
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	f3af 8000 	nop.w
 8000c62:	1c42      	adds	r2, r0, #1
 8000c64:	4606      	mov	r6, r0
 8000c66:	d1d6      	bne.n	8000c16 <_svfiprintf_r+0x176>
 8000c68:	89ab      	ldrh	r3, [r5, #12]
 8000c6a:	065b      	lsls	r3, r3, #25
 8000c6c:	f53f af2c 	bmi.w	8000ac8 <_svfiprintf_r+0x28>
 8000c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c72:	b01d      	add	sp, #116	; 0x74
 8000c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c78:	ab03      	add	r3, sp, #12
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	462a      	mov	r2, r5
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <_svfiprintf_r+0x1f8>)
 8000c80:	a904      	add	r1, sp, #16
 8000c82:	4638      	mov	r0, r7
 8000c84:	f000 f87a 	bl	8000d7c <_printf_i>
 8000c88:	e7eb      	b.n	8000c62 <_svfiprintf_r+0x1c2>
 8000c8a:	bf00      	nop
 8000c8c:	08001143 	.word	0x08001143
 8000c90:	0800114d 	.word	0x0800114d
 8000c94:	00000000 	.word	0x00000000
 8000c98:	080009e9 	.word	0x080009e9
 8000c9c:	08001149 	.word	0x08001149

08000ca0 <_printf_common>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	4616      	mov	r6, r2
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	688a      	ldr	r2, [r1, #8]
 8000caa:	690b      	ldr	r3, [r1, #16]
 8000cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	bfb8      	it	lt
 8000cb4:	4613      	movlt	r3, r2
 8000cb6:	6033      	str	r3, [r6, #0]
 8000cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cbc:	4607      	mov	r7, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	b10a      	cbz	r2, 8000cc6 <_printf_common+0x26>
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	6033      	str	r3, [r6, #0]
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	0699      	lsls	r1, r3, #26
 8000cca:	bf42      	ittt	mi
 8000ccc:	6833      	ldrmi	r3, [r6, #0]
 8000cce:	3302      	addmi	r3, #2
 8000cd0:	6033      	strmi	r3, [r6, #0]
 8000cd2:	6825      	ldr	r5, [r4, #0]
 8000cd4:	f015 0506 	ands.w	r5, r5, #6
 8000cd8:	d106      	bne.n	8000ce8 <_printf_common+0x48>
 8000cda:	f104 0a19 	add.w	sl, r4, #25
 8000cde:	68e3      	ldr	r3, [r4, #12]
 8000ce0:	6832      	ldr	r2, [r6, #0]
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	dc26      	bgt.n	8000d36 <_printf_common+0x96>
 8000ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cec:	1e13      	subs	r3, r2, #0
 8000cee:	6822      	ldr	r2, [r4, #0]
 8000cf0:	bf18      	it	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	0692      	lsls	r2, r2, #26
 8000cf6:	d42b      	bmi.n	8000d50 <_printf_common+0xb0>
 8000cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	4638      	mov	r0, r7
 8000d00:	47c0      	blx	r8
 8000d02:	3001      	adds	r0, #1
 8000d04:	d01e      	beq.n	8000d44 <_printf_common+0xa4>
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	68e5      	ldr	r5, [r4, #12]
 8000d0a:	6832      	ldr	r2, [r6, #0]
 8000d0c:	f003 0306 	and.w	r3, r3, #6
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	bf08      	it	eq
 8000d14:	1aad      	subeq	r5, r5, r2
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	6922      	ldr	r2, [r4, #16]
 8000d1a:	bf0c      	ite	eq
 8000d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d20:	2500      	movne	r5, #0
 8000d22:	4293      	cmp	r3, r2
 8000d24:	bfc4      	itt	gt
 8000d26:	1a9b      	subgt	r3, r3, r2
 8000d28:	18ed      	addgt	r5, r5, r3
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	341a      	adds	r4, #26
 8000d2e:	42b5      	cmp	r5, r6
 8000d30:	d11a      	bne.n	8000d68 <_printf_common+0xc8>
 8000d32:	2000      	movs	r0, #0
 8000d34:	e008      	b.n	8000d48 <_printf_common+0xa8>
 8000d36:	2301      	movs	r3, #1
 8000d38:	4652      	mov	r2, sl
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	47c0      	blx	r8
 8000d40:	3001      	adds	r0, #1
 8000d42:	d103      	bne.n	8000d4c <_printf_common+0xac>
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	3501      	adds	r5, #1
 8000d4e:	e7c6      	b.n	8000cde <_printf_common+0x3e>
 8000d50:	18e1      	adds	r1, r4, r3
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	2030      	movs	r0, #48	; 0x30
 8000d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d5a:	4422      	add	r2, r4
 8000d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d64:	3302      	adds	r3, #2
 8000d66:	e7c7      	b.n	8000cf8 <_printf_common+0x58>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	4638      	mov	r0, r7
 8000d70:	47c0      	blx	r8
 8000d72:	3001      	adds	r0, #1
 8000d74:	d0e6      	beq.n	8000d44 <_printf_common+0xa4>
 8000d76:	3601      	adds	r6, #1
 8000d78:	e7d9      	b.n	8000d2e <_printf_common+0x8e>
	...

08000d7c <_printf_i>:
 8000d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	460c      	mov	r4, r1
 8000d82:	4691      	mov	r9, r2
 8000d84:	7e27      	ldrb	r7, [r4, #24]
 8000d86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d88:	2f78      	cmp	r7, #120	; 0x78
 8000d8a:	4680      	mov	r8, r0
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d92:	d807      	bhi.n	8000da4 <_printf_i+0x28>
 8000d94:	2f62      	cmp	r7, #98	; 0x62
 8000d96:	d80a      	bhi.n	8000dae <_printf_i+0x32>
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	f000 80d8 	beq.w	8000f4e <_printf_i+0x1d2>
 8000d9e:	2f58      	cmp	r7, #88	; 0x58
 8000da0:	f000 80a3 	beq.w	8000eea <_printf_i+0x16e>
 8000da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dac:	e03a      	b.n	8000e24 <_printf_i+0xa8>
 8000dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000db2:	2b15      	cmp	r3, #21
 8000db4:	d8f6      	bhi.n	8000da4 <_printf_i+0x28>
 8000db6:	a001      	add	r0, pc, #4	; (adr r0, 8000dbc <_printf_i+0x40>)
 8000db8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000dbc:	08000e15 	.word	0x08000e15
 8000dc0:	08000e29 	.word	0x08000e29
 8000dc4:	08000da5 	.word	0x08000da5
 8000dc8:	08000da5 	.word	0x08000da5
 8000dcc:	08000da5 	.word	0x08000da5
 8000dd0:	08000da5 	.word	0x08000da5
 8000dd4:	08000e29 	.word	0x08000e29
 8000dd8:	08000da5 	.word	0x08000da5
 8000ddc:	08000da5 	.word	0x08000da5
 8000de0:	08000da5 	.word	0x08000da5
 8000de4:	08000da5 	.word	0x08000da5
 8000de8:	08000f35 	.word	0x08000f35
 8000dec:	08000e59 	.word	0x08000e59
 8000df0:	08000f17 	.word	0x08000f17
 8000df4:	08000da5 	.word	0x08000da5
 8000df8:	08000da5 	.word	0x08000da5
 8000dfc:	08000f57 	.word	0x08000f57
 8000e00:	08000da5 	.word	0x08000da5
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000da5 	.word	0x08000da5
 8000e0c:	08000da5 	.word	0x08000da5
 8000e10:	08000f1f 	.word	0x08000f1f
 8000e14:	680b      	ldr	r3, [r1, #0]
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	600a      	str	r2, [r1, #0]
 8000e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e24:	2301      	movs	r3, #1
 8000e26:	e0a3      	b.n	8000f70 <_printf_i+0x1f4>
 8000e28:	6825      	ldr	r5, [r4, #0]
 8000e2a:	6808      	ldr	r0, [r1, #0]
 8000e2c:	062e      	lsls	r6, r5, #24
 8000e2e:	f100 0304 	add.w	r3, r0, #4
 8000e32:	d50a      	bpl.n	8000e4a <_printf_i+0xce>
 8000e34:	6805      	ldr	r5, [r0, #0]
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	da03      	bge.n	8000e44 <_printf_i+0xc8>
 8000e3c:	232d      	movs	r3, #45	; 0x2d
 8000e3e:	426d      	negs	r5, r5
 8000e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e44:	485e      	ldr	r0, [pc, #376]	; (8000fc0 <_printf_i+0x244>)
 8000e46:	230a      	movs	r3, #10
 8000e48:	e019      	b.n	8000e7e <_printf_i+0x102>
 8000e4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000e4e:	6805      	ldr	r5, [r0, #0]
 8000e50:	600b      	str	r3, [r1, #0]
 8000e52:	bf18      	it	ne
 8000e54:	b22d      	sxthne	r5, r5
 8000e56:	e7ef      	b.n	8000e38 <_printf_i+0xbc>
 8000e58:	680b      	ldr	r3, [r1, #0]
 8000e5a:	6825      	ldr	r5, [r4, #0]
 8000e5c:	1d18      	adds	r0, r3, #4
 8000e5e:	6008      	str	r0, [r1, #0]
 8000e60:	0628      	lsls	r0, r5, #24
 8000e62:	d501      	bpl.n	8000e68 <_printf_i+0xec>
 8000e64:	681d      	ldr	r5, [r3, #0]
 8000e66:	e002      	b.n	8000e6e <_printf_i+0xf2>
 8000e68:	0669      	lsls	r1, r5, #25
 8000e6a:	d5fb      	bpl.n	8000e64 <_printf_i+0xe8>
 8000e6c:	881d      	ldrh	r5, [r3, #0]
 8000e6e:	4854      	ldr	r0, [pc, #336]	; (8000fc0 <_printf_i+0x244>)
 8000e70:	2f6f      	cmp	r7, #111	; 0x6f
 8000e72:	bf0c      	ite	eq
 8000e74:	2308      	moveq	r3, #8
 8000e76:	230a      	movne	r3, #10
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e7e:	6866      	ldr	r6, [r4, #4]
 8000e80:	60a6      	str	r6, [r4, #8]
 8000e82:	2e00      	cmp	r6, #0
 8000e84:	bfa2      	ittt	ge
 8000e86:	6821      	ldrge	r1, [r4, #0]
 8000e88:	f021 0104 	bicge.w	r1, r1, #4
 8000e8c:	6021      	strge	r1, [r4, #0]
 8000e8e:	b90d      	cbnz	r5, 8000e94 <_printf_i+0x118>
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d04d      	beq.n	8000f30 <_printf_i+0x1b4>
 8000e94:	4616      	mov	r6, r2
 8000e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e9e:	5dc7      	ldrb	r7, [r0, r7]
 8000ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ea4:	462f      	mov	r7, r5
 8000ea6:	42bb      	cmp	r3, r7
 8000ea8:	460d      	mov	r5, r1
 8000eaa:	d9f4      	bls.n	8000e96 <_printf_i+0x11a>
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d10b      	bne.n	8000ec8 <_printf_i+0x14c>
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	07df      	lsls	r7, r3, #31
 8000eb4:	d508      	bpl.n	8000ec8 <_printf_i+0x14c>
 8000eb6:	6923      	ldr	r3, [r4, #16]
 8000eb8:	6861      	ldr	r1, [r4, #4]
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	bfde      	ittt	le
 8000ebe:	2330      	movle	r3, #48	; 0x30
 8000ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ec8:	1b92      	subs	r2, r2, r6
 8000eca:	6122      	str	r2, [r4, #16]
 8000ecc:	f8cd a000 	str.w	sl, [sp]
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	aa03      	add	r2, sp, #12
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	f7ff fee2 	bl	8000ca0 <_printf_common>
 8000edc:	3001      	adds	r0, #1
 8000ede:	d14c      	bne.n	8000f7a <_printf_i+0x1fe>
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	b004      	add	sp, #16
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <_printf_i+0x244>)
 8000eec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	680e      	ldr	r6, [r1, #0]
 8000ef4:	061f      	lsls	r7, r3, #24
 8000ef6:	f856 5b04 	ldr.w	r5, [r6], #4
 8000efa:	600e      	str	r6, [r1, #0]
 8000efc:	d514      	bpl.n	8000f28 <_printf_i+0x1ac>
 8000efe:	07d9      	lsls	r1, r3, #31
 8000f00:	bf44      	itt	mi
 8000f02:	f043 0320 	orrmi.w	r3, r3, #32
 8000f06:	6023      	strmi	r3, [r4, #0]
 8000f08:	b91d      	cbnz	r5, 8000f12 <_printf_i+0x196>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	f023 0320 	bic.w	r3, r3, #32
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	2310      	movs	r3, #16
 8000f14:	e7b0      	b.n	8000e78 <_printf_i+0xfc>
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	2378      	movs	r3, #120	; 0x78
 8000f20:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <_printf_i+0x248>)
 8000f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f26:	e7e3      	b.n	8000ef0 <_printf_i+0x174>
 8000f28:	065e      	lsls	r6, r3, #25
 8000f2a:	bf48      	it	mi
 8000f2c:	b2ad      	uxthmi	r5, r5
 8000f2e:	e7e6      	b.n	8000efe <_printf_i+0x182>
 8000f30:	4616      	mov	r6, r2
 8000f32:	e7bb      	b.n	8000eac <_printf_i+0x130>
 8000f34:	680b      	ldr	r3, [r1, #0]
 8000f36:	6826      	ldr	r6, [r4, #0]
 8000f38:	6960      	ldr	r0, [r4, #20]
 8000f3a:	1d1d      	adds	r5, r3, #4
 8000f3c:	600d      	str	r5, [r1, #0]
 8000f3e:	0635      	lsls	r5, r6, #24
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	d501      	bpl.n	8000f48 <_printf_i+0x1cc>
 8000f44:	6018      	str	r0, [r3, #0]
 8000f46:	e002      	b.n	8000f4e <_printf_i+0x1d2>
 8000f48:	0671      	lsls	r1, r6, #25
 8000f4a:	d5fb      	bpl.n	8000f44 <_printf_i+0x1c8>
 8000f4c:	8018      	strh	r0, [r3, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6123      	str	r3, [r4, #16]
 8000f52:	4616      	mov	r6, r2
 8000f54:	e7ba      	b.n	8000ecc <_printf_i+0x150>
 8000f56:	680b      	ldr	r3, [r1, #0]
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	681e      	ldr	r6, [r3, #0]
 8000f5e:	6862      	ldr	r2, [r4, #4]
 8000f60:	2100      	movs	r1, #0
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff f93c 	bl	80001e0 <memchr>
 8000f68:	b108      	cbz	r0, 8000f6e <_printf_i+0x1f2>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	6060      	str	r0, [r4, #4]
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	6123      	str	r3, [r4, #16]
 8000f72:	2300      	movs	r3, #0
 8000f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f78:	e7a8      	b.n	8000ecc <_printf_i+0x150>
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	4632      	mov	r2, r6
 8000f7e:	4649      	mov	r1, r9
 8000f80:	4640      	mov	r0, r8
 8000f82:	47d0      	blx	sl
 8000f84:	3001      	adds	r0, #1
 8000f86:	d0ab      	beq.n	8000ee0 <_printf_i+0x164>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	079b      	lsls	r3, r3, #30
 8000f8c:	d413      	bmi.n	8000fb6 <_printf_i+0x23a>
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	9b03      	ldr	r3, [sp, #12]
 8000f92:	4298      	cmp	r0, r3
 8000f94:	bfb8      	it	lt
 8000f96:	4618      	movlt	r0, r3
 8000f98:	e7a4      	b.n	8000ee4 <_printf_i+0x168>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	47d0      	blx	sl
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d09b      	beq.n	8000ee0 <_printf_i+0x164>
 8000fa8:	3501      	adds	r5, #1
 8000faa:	68e3      	ldr	r3, [r4, #12]
 8000fac:	9903      	ldr	r1, [sp, #12]
 8000fae:	1a5b      	subs	r3, r3, r1
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	dcf2      	bgt.n	8000f9a <_printf_i+0x21e>
 8000fb4:	e7eb      	b.n	8000f8e <_printf_i+0x212>
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	f104 0619 	add.w	r6, r4, #25
 8000fbc:	e7f5      	b.n	8000faa <_printf_i+0x22e>
 8000fbe:	bf00      	nop
 8000fc0:	08001154 	.word	0x08001154
 8000fc4:	08001165 	.word	0x08001165

08000fc8 <__retarget_lock_acquire_recursive>:
 8000fc8:	4770      	bx	lr

08000fca <__retarget_lock_release_recursive>:
 8000fca:	4770      	bx	lr

08000fcc <memcpy>:
 8000fcc:	440a      	add	r2, r1
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fd4:	d100      	bne.n	8000fd8 <memcpy+0xc>
 8000fd6:	4770      	bx	lr
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000fe2:	4291      	cmp	r1, r2
 8000fe4:	d1f9      	bne.n	8000fda <memcpy+0xe>
 8000fe6:	bd10      	pop	{r4, pc}

08000fe8 <memmove>:
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	b510      	push	{r4, lr}
 8000fec:	eb01 0402 	add.w	r4, r1, r2
 8000ff0:	d902      	bls.n	8000ff8 <memmove+0x10>
 8000ff2:	4284      	cmp	r4, r0
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	d807      	bhi.n	8001008 <memmove+0x20>
 8000ff8:	1e43      	subs	r3, r0, #1
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	d008      	beq.n	8001010 <memmove+0x28>
 8000ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001006:	e7f8      	b.n	8000ffa <memmove+0x12>
 8001008:	4402      	add	r2, r0
 800100a:	4601      	mov	r1, r0
 800100c:	428a      	cmp	r2, r1
 800100e:	d100      	bne.n	8001012 <memmove+0x2a>
 8001010:	bd10      	pop	{r4, pc}
 8001012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800101a:	e7f7      	b.n	800100c <memmove+0x24>

0800101c <_realloc_r>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	4607      	mov	r7, r0
 8001020:	4614      	mov	r4, r2
 8001022:	460e      	mov	r6, r1
 8001024:	b921      	cbnz	r1, 8001030 <_realloc_r+0x14>
 8001026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800102a:	4611      	mov	r1, r2
 800102c:	f7ff bc26 	b.w	800087c <_malloc_r>
 8001030:	b922      	cbnz	r2, 800103c <_realloc_r+0x20>
 8001032:	f7ff fbd3 	bl	80007dc <_free_r>
 8001036:	4625      	mov	r5, r4
 8001038:	4628      	mov	r0, r5
 800103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103c:	f000 f814 	bl	8001068 <_malloc_usable_size_r>
 8001040:	42a0      	cmp	r0, r4
 8001042:	d20f      	bcs.n	8001064 <_realloc_r+0x48>
 8001044:	4621      	mov	r1, r4
 8001046:	4638      	mov	r0, r7
 8001048:	f7ff fc18 	bl	800087c <_malloc_r>
 800104c:	4605      	mov	r5, r0
 800104e:	2800      	cmp	r0, #0
 8001050:	d0f2      	beq.n	8001038 <_realloc_r+0x1c>
 8001052:	4631      	mov	r1, r6
 8001054:	4622      	mov	r2, r4
 8001056:	f7ff ffb9 	bl	8000fcc <memcpy>
 800105a:	4631      	mov	r1, r6
 800105c:	4638      	mov	r0, r7
 800105e:	f7ff fbbd 	bl	80007dc <_free_r>
 8001062:	e7e9      	b.n	8001038 <_realloc_r+0x1c>
 8001064:	4635      	mov	r5, r6
 8001066:	e7e7      	b.n	8001038 <_realloc_r+0x1c>

08001068 <_malloc_usable_size_r>:
 8001068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800106c:	1f18      	subs	r0, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfbc      	itt	lt
 8001072:	580b      	ldrlt	r3, [r1, r0]
 8001074:	18c0      	addlt	r0, r0, r3
 8001076:	4770      	bx	lr

08001078 <_sbrk>:
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <_sbrk+0x14>)
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	4602      	mov	r2, r0
 800107e:	b909      	cbnz	r1, 8001084 <_sbrk+0xc>
 8001080:	4903      	ldr	r1, [pc, #12]	; (8001090 <_sbrk+0x18>)
 8001082:	6019      	str	r1, [r3, #0]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	4402      	add	r2, r0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	4770      	bx	lr
 800108c:	20000224 	.word	0x20000224
 8001090:	20000238 	.word	0x20000238

08001094 <_init>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr

080010a0 <_fini>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr
